;;
;; Bitwise operations
;;

dec $pow2(nat) : int

dec $shl(int, int) : int
dec $shr(int, int) : int
dec $shr_arith(int, int, int) : int

dec $bneg(int) : int
dec $band(int, int) : int
dec $bxor(int, int) : int
dec $bor(int, int) : int

dec $bitacc(int, int, int) : int

;;
;; Unary operations
;;

;;; Unary bitwise not

dec $un_bnot(value) : value

def $un_bnot(FBitV w i) = FBitV w i'
  -- if i' = $bneg(i)

;;; Unary logical not

dec $un_lnot(value) : value

def $un_lnot(BoolV b) = BoolV (~b)

;;; Unary plus

dec $un_plus(value) : value

def $un_plus(IntV i) = IntV i
def $un_plus(FBitV w i) = FBitV w i
def $un_plus(FIntV w i) = FIntV w i

;;; Unary minus

dec $un_minus(value) : value

def $un_minus(IntV i) = IntV $(-i)
def $un_minus(FBitV w i) = FBitV w i'
  -- if i' = $($pow2(w) - i)
def $un_minus(FIntV w i) = FIntV w i'
  -- if i' = $to_bitstr(w, $to_int(w, $(-i)))

;;
;; Binary operation
;;

;;; Binary plus

dec $bin_plus(value, value) : value

def $bin_plus(IntV i_l, IntV i_r) = IntV $(i_l + i_r)
def $bin_plus(FBitV w i_l, FBitV w i_r) = FBitV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $(i_l' + i_r'))
def $bin_plus(FIntV w i_l, FIntV w i_r) = FIntV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $(i_l' + i_r'))

;;; Binary saturating plus

dec $bin_satplus(value, value) : value 

;;; Binary minus

dec $bin_minus(value, value) : value

def $bin_minus(IntV i_l, IntV i_r) = IntV $(i_l - i_r)
def $bin_minus(FBitV w i_l, FBitV w i_r) = FBitV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $(i_l' - i_r'))
def $bin_plus(FIntV w i_l, FIntV w i_r) = FIntV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $(i_l' - i_r'))

;;; Binary saturating minus

dec $bin_satminus(value, value) : value

;;; Binary multiplication

dec $bin_mul(value, value) : value

def $bin_mul(IntV i_l, IntV i_r) = IntV $(i_l * i_r)
def $bin_minus(FBitV w i_l, FBitV w i_r) = FBitV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $(i_l' * i_r'))
def $bin_plus(FIntV w i_l, FIntV w i_r) = FIntV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $(i_l' * i_r'))

;;; Binary division

dec $bin_div(value, value) : value

def $bin_div(IntV i_l, IntV i_r) = IntV $(i_l / i_r)

;;; Binary modulo

dec $bin_mod(value, value) : value

def $bin_mod(IntV i_l, IntV i_r) = IntV $(i_l \ i_r)

;;; Binary shift left

dec $bin_shl(value, value) : value

def $bin_shl(IntV i_l, IntV i_r) = IntV $shl(i_l, i_r)
def $bin_shl(IntV i_l, FBitV w_r i_r) = IntV $shl(i_l, i_r)
def $bin_shl(IntV i_l, FIntV w_r i_r) = IntV $shl(i_l, i_r')
  -- if i_r' = $to_int(w_r, i_r)

def $bin_shl(FBitV w_l i_l, IntV i_r)
  = $bin_shl(FBitV w_l i_l, FBitV w_l $to_int(w_l, i_r))
def $bin_shl(FBitV w_l i_l, FBitV w_r i_r) = FBitV w_l i'
  -- if i' = $to_bitstr(w_l, $shl(i_l, i_r))
def $bin_shl(FBitV w_l i_l, FIntV w_r i_r) = FBitV w_l i'
  -- if i_r' = $to_int(w_r, i_r)
  -- if i' = $to_bitstr(w_l, $shl(i_l, i_r'))

def $bin_shl(FIntV w_l i_l, IntV i_r)
  = $bin_shl(FIntV w_l i_l, FIntV w_l $to_int(w_l, i_r))
def $bin_shl(FIntV w_l i_l, FBitV w_r i_r) = FIntV w_l i'
  -- if i_l' = $to_int(w_l, i_l)
  -- if i' = $to_bitstr(w_l, $shl(i_l', i_r))
def $bin_shl(FIntV w_l i_l, FIntV w_r i_r) = FIntV w_l i'
  -- if i_l' = $to_int(w_l, i_l)
  -- if i_r' = $to_int(w_r, i_r)
  -- if i' = $to_bitstr(w_l, $shl(i_l', i_r'))

;;; Binary shift right

dec $bin_shr(value, value) : value

def $bin_shr(IntV i_l, IntV i_r) = IntV $shr(i_l, i_r)
def $bin_shr(IntV i_l, FBitV w_r i_r) = IntV $shr(i_l, i_r)
def $bin_shr(IntV i_l, FIntV w_r i_r) = IntV $shr(i_l, i_r')
  -- if i_r' = $to_int(w_r, i_r)

def $bin_shr(FBitV w_l i_l, IntV i_r)
  = $bin_shr(FBitV w_l i_l, FBitV w_l $to_int(w_l, i_r))
def $bin_shr(FBitV w_l i_l, FBitV w_r i_r) = FBitV w_l i'
  -- if i' = $to_bitstr(w_l, $shr(i_l, i_r))
def $bin_shr(FBitV w_l i_l, FIntV w_r i_r) = FBitV w_l i'
  -- if i_r' = $to_int(w_r, i_r)
  -- if i' = $to_bitstr(w_l, $shr(i_l, i_r'))

def $bin_shr(FIntV w_l i_l, IntV i_r) = FIntV w_l i''
  -- if i_l' = $to_int(w_l, i_l)
  -- if $(i_l' < 0)
  -- if i' = $shr_arith(i_l, i_r, $($pow2(w_l) - 1))
  -- if i'' = $to_bitstr(w_l, i')
def $bin_shr(FIntV w_l i_l, IntV i_r) = FIntV w_l i''
  -- if i_l' = $to_int(w_l, i_l)
  -- if $(i_l' >= 0)
  -- if i' = $shr(i_l, i_r)
  -- if i'' = $to_bitstr(w_l, i')
def $bin_shr(FIntV w_l i_l, FBitV w_r i_r) = FIntV w_l i''
  -- if i_l' = $to_int(w_l, i_l)
  -- if $(i_l' < 0)
  -- if i' = $shr_arith(i_l, i_r, $($pow2(w_l) - 1))
  -- if i'' = $to_bitstr(w_l, i')
def $bin_shr(FIntV w_l i_l, FBitV w_r i_r) = FIntV w_l i''
  -- if i_l' = $to_int(w_l, i_l)
  -- if $(i_l' >= 0)
  -- if i' = $shr(i_l, i_r)
  -- if i'' = $to_bitstr(w_l, i')
def $bin_shr(FIntV w_l i_l, FIntV w_r i_r) = FIntV w_l i''
  -- if i_l' = $to_int(w_l, i_l)
  -- if i_r' = $to_int(w_r, i_r)
  -- if $(i_l' < 0)
  -- if i' = $shr_arith(i_l, i_r, $($pow2(w_l) - 1))
  -- if i'' = $to_bitstr(w_l, i')
def $bin_shr(FIntV w_l i_l, FIntV w_r i_r) = FIntV w_l i''
  -- if i_l' = $to_int(w_l, i_l)
  -- if i_r' = $to_int(w_r, i_r)
  -- if $(i_l' >= 0)
  -- if i' = $shr(i_l, i_r)
  -- if i'' = $to_bitstr(w_l, i')

;;; Binary less than or equal

dec $bin_le(value, value) : bool

def $bin_le(IntV i_l, IntV i_r) = $(i_l <= i_r)
def $bin_le(FBitV w i_l, FBitV w i_r) = $(i_l <= i_r)
def $bin_le(FIntV w i_l, FIntV w i_r) = $(i_l' <= i_r')
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)

;;; Binary greater than or equal

dec $bin_ge(value, value) : bool

def $bin_ge(IntV i_l, IntV i_r) = $(i_l >= i_r)
def $bin_ge(FBitV w i_l, FBitV w i_r) = $(i_l >= i_r)
def $bin_ge(FIntV w i_l, FIntV w i_r) = $(i_l' >= i_r')
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)

;;; Binary less than

dec $bin_lt(value, value) : bool

def $bin_lt(IntV i_l, IntV i_r) = $(i_l < i_r)
def $bin_lt(FBitV w i_l, FBitV w i_r) = $(i_l < i_r)
def $bin_lt(FIntV w i_l, FIntV w i_r) = $(i_l' < i_r')
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)

;;; Binary greater than

dec $bin_gt(value, value) : bool

def $bin_gt(IntV i_l, IntV i_r) = $(i_l > i_r)
def $bin_gt(FBitV w i_l, FBitV w i_r) = $(i_l > i_r)
def $bin_gt(FIntV w i_l, FIntV w i_r) = $(i_l' > i_r')
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)

;;; Binary equals

dec $bin_eq(value, value) : bool
dec $bin_eqs(value*, value*) : bool
dec $bin_eqs_fields((value, id)*, (value, id)*) : bool

def $bin_eq(primitiveValue_a, primitiveValue_b)
  = (primitiveValue_a = primitiveValue_b)

def $bin_eq(IntV i_a, IntV i_b) = (i_a = i_b)
def $bin_eq(FBitV w_a i_a, FBitV w_b i_b) = (w_a = w_b) /\ (i_a = i_b)
def $bin_eq(FIntV w_a i_a, FIntV w_b i_b) = (w_a = w_b) /\ (i_a = i_b)
def $bin_eq(VBitV w_a _ i_a, VBitV w_b _ i_b) = (w_a = w_b) /\ (i_a = i_b)

def $bin_eq(ListV value_a*, ListV value_b*)
  = $bin_eqs(value_a*, value_b*)
def $bin_eq(TupleV value_a*, TupleV value_b*)
  = $bin_eqs(value_a*, value_b*)
def $bin_eq(HeaderStackV value_a* _ n_s_a, HeaderStackV value_b* _ n_s_b)
  = $bin_eqs(value_a*, value_b*) /\ (n_s_a = n_s_b)
def $bin_eq(
    StructV tid_a (value_f_a id_f_a)*,
    StructV tid_b (value_f_b id_f_b)*
  )
  = (tid_a = tid_b)
    /\ $bin_eqs_fields((value_f_a, id_f_a)*, (value_f_b, id_f_b)*)
def $bin_eq(
    HeaderV tid_a (value_f_a id_f_a)*,
    HeaderV tid_b (value_f_b id_f_b)*
  )
  = (tid_a = tid_b)
    /\ $bin_eqs_fields((value_f_a, id_f_a)*, (value_f_b, id_f_b)*)
def $bin_eq(
    HeaderUnionV tid_a (value_f_a id_f_a)*,
    HeaderUnionV tid_b (value_f_b id_f_b)*
  )
  = (tid_a = tid_b)
    /\ $bin_eqs_fields((value_f_a, id_f_a)*, (value_f_b, id_f_b)*)
def $bin_eq(EnumV tid_a id_f_a, EnumV tid_b id_f_b)
  = (tid_a = tid_b) /\ (id_f_a = id_f_b)
def $bin_eq(SEnumV tid_a id_f_a value_f_a, SEnumV tid_b id_f_b value_f_b)
  = (tid_a = tid_b) /\ (id_f_a = id_f_b) /\ $bin_eq(value_f_a, value_f_b)
def $bin_eq(InvalidHeaderV, InvalidHeaderV) = true

def $bin_eqs(eps, eps) = true
def $bin_eqs(eps, _ :: _) = false
def $bin_eqs(_ :: _, eps) = false
def $bin_eqs(value_a_h :: value_a_t*, value_b_h :: value_b_t*)
  = $bin_eq(value_a_h, value_b_h) /\ $bin_eqs(value_a_t*, value_b_t*)

def $bin_eqs_fields(eps, eps) = true
def $bin_eqs_fields(eps, _ :: _) = false
def $bin_eqs_fields(_ :: _, eps) = false
def $bin_eqs_fields(
    (value_a_h, id_a_h) :: (value_a_t, id_a_t)*,
    (value_b_h, id_b_h) :: (value_b_t, id_b_t)*)
  = (id_a_h = id_b_h) /\ $bin_eq(value_a_h, value_b_h)
    /\ $bin_eqs_fields((value_a_t, id_a_t)*, (value_b_t, id_b_t)*)

;;; Binary not equals

dec $bin_ne(value, value) : bool

def $bin_ne(value_l, value_r) = ~$bin_eq(value_l, value_r)

;;; Binary bitwise and

dec $bin_band(value, value) : value

def $bin_band(FBitV w i_l, FBitV w i_r) = FBitV w i'
  -- if i' = $to_bitstr(w, $band(i_l, i_r))

def $bin_band(FIntV w i_l, FIntV w i_r) = FIntV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $band(i_l', i_r'))

;;; Binary bitwise xor

dec $bin_bxor(value, value) : value

def $bin_bxor(FBitV w i_l, FBitV w i_r) = FBitV w i'
  -- if i' = $to_bitstr(w, $bxor(i_l, i_r))

def $bin_bxor(FIntV w i_l, FIntV w i_r) = FIntV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $bxor(i_l', i_r'))

;;; Binary bitwise or

dec $bin_bor(value, value) : value

def $bin_bor(FBitV w i_l, FBitV w i_r) = FBitV w i'
  -- if i' = $to_bitstr(w, $bor(i_l, i_r))

def $bin_bor(FIntV w i_l, FIntV w i_r) = FIntV w i'
  -- if i_l' = $to_int(w, i_l)
  -- if i_r' = $to_int(w, i_r)
  -- if i' = $to_bitstr(w, $bor(i_l', i_r'))

;;; Binary bitwise concat

dec $bin_concat(value, value) : value

def $bin_concat(FBitV w_l i_l, FBitV w_r i_r) = FBitV w i''
  -- if i_l' = $shl(i_l, w_r)
  -- if i_l'' = $(i_l' + i_r)
  -- if w = $(w_l + w_r)
  -- if i'' = $to_bitstr(w, i_l'')
def $bin_concat(FBitV w_l i_l, FIntV w_r i_r) = FBitV w i''
  -- if i_l' = $shl(i_l, w_r)
  -- if i_l'' = $(i_l' + i_r)
  -- if w = $(w_l + w_r)
  -- if i'' = $to_bitstr(w, i_l'')

def $bin_concat(FIntV w_l i_l, FBitV w_r i_r) = FIntV w i'''
  -- if i_l' = $to_int(w_l, i_l)
  -- if i_l'' = $shl(i_l', w_r)
  -- if i_l''' = $(i_l'' + i_r)
  -- if w = $(w_l + w_r)
  -- if i''' = $to_bitstr(w, i_l''')
def $bin_concat(FIntV w_l i_l, FIntV w_r i_r) = FIntV w i'''
  -- if i_l' = $to_int(w_l, i_l)
  -- if i_l'' = $shl(i_l', w_r)
  -- if i_l''' = $(i_l'' + i_r)
  -- if w = $(w_l + w_r)
  -- if i''' = $to_bitstr(w, i_l''')

;;; Binary logical and

dec $bin_land(value, value) : value

def $bin_land(BoolV b_l, BoolV b_r) = BoolV (b_l /\ b_r)

;;; Binary logical or

dec $bin_lor(value, value) : value

def $bin_lor(BoolV b_l, BoolV b_r) = BoolV (b_l \/ b_r)

;;
;; Type cast operations
;;

dec $cast_op(typeIR, value) : value

dec $default(typeIR) : value
dec $default'(typeIR) : value

;;; Cast from boolean

dec $cast_bool(typeIR, bool) : value
dec $cast_bool'(typeIR, bool) : value

def $cast_bool(typeIR, b) = $cast_bool'($canon(typeIR), b)

def $cast_bool'(BoolT, b) = BoolV b
def $cast_bool'(FBitT w, true) = FBitV w 1
def $cast_bool'(FBitT w, false) = FBitV w 0
def $cast_bool'(NewT _ typeIR, b) = $cast_bool(typeIR, b)

def $cast_op(typeIR, BoolV b) = $cast_bool(typeIR, b)

;;; Cast from integer

dec $cast_arbint(typeIR, int) : value
dec $cast_arbint'(typeIR, int) : value

def $cast_arbint(typeIR, i) = $cast_arbint'($canon(typeIR), i)

def $cast_arbint'(BoolT, i) = BoolV (i = 0)
def $cast_arbint'(IntT, i) = IntV i
def $cast_arbint'(FBitT w, i) = FBitV w ($to_bitstr(w, i))
def $cast_arbint'(FIntT w, i) = FIntV w ($to_bitstr(w, i))
def $cast_arbint'(DefT _ typeIR, i) = $cast_arbint(typeIR, i)
def $cast_arbint'(SetT typeIR, i) = SingletonSetV $cast_arbint(typeIR, i)

def $cast_op(typeIR, IntV i) = $cast_arbint(typeIR, i)

;;; Cast from fixed unsigned integer

dec $cast_fixbit(typeIR, nat, int) : value
dec $cast_fixbit'(typeIR, nat, int) : value

def $cast_fixbit(typeIR, w, i) = $cast_fixbit'($canon(typeIR), w, i)

def $cast_fixbit'(BoolT, w, i) = BoolV (i = 1)
def $cast_fixbit'(IntT, _, i) = IntV i
def $cast_fixbit'(FBitT w_to, _, i) = FBitV w_to i'
  -- if i' = $to_bitstr(w_to, i)
def $cast_fixbit'(FIntT w_to, _, i) = FIntV w_to i'
  -- if i' = $to_bitstr(w_to, i)
def $cast_fixbit'(NewT _ typeIR, w, i) = $cast_fixbit(typeIR, w, i)
def $cast_fixbit'(SetT typeIR, w, i) = SingletonSetV $cast_fixbit(typeIR, w, i)

def $cast_op(typeIR, FBitV w i) = $cast_fixbit(typeIR, w, i)

;;; Cast from fixed signed integer

dec $cast_fixint(typeIR, nat, int) : value
dec $cast_fixint'(typeIR, nat, int) : value

def $cast_fixint(typeIR, w, i) = $cast_fixint'($canon(typeIR), w, i)

def $cast_fixint'(IntT, w, i) = IntV $to_int(w, i)
def $cast_fixint'(FBitT w_to, w_from, i) = FBitV w_to i'
  -- if i' = $to_bitstr(w_to, $to_int(w_from, i))
def $cast_fixint'(FIntT w_to, w_from, i) = FIntV w_to i'
  -- if i' = $to_bitstr(w_to, $to_int(w_from, i))
def $cast_fixint'(NewT _ typeIR, w, i) = $cast_fixint(typeIR, w, i)
def $cast_fixint'(SetT typeIR, w, i) = SingletonSetV $cast_fixint(typeIR, w, i)

def $cast_op(typeIR, FIntV w i) = $cast_fixint(typeIR, w, i)

;;; Cast from struct

dec $cast_struct(typeIR, tid, (value, id)*) : value
dec $cast_struct'(typeIR, tid, (value, id)*) : value

def $cast_struct(typeIR, tid, (value_f, id_f)*)
  = $cast_struct'($canon(typeIR), tid, (value_f, id_f)*)

def $cast_struct'(StructT tid _, tid, (value_f, id_f)*)
  = StructV tid (value_f id_f)*

def $cast_op(typeIR, StructV tid (value_f id_f)*)
  = $cast_struct(typeIR, tid, (value_f, id_f)*)

;;; Cast from header

dec $cast_header(typeIR, tid, (value, id)*) : value
dec $cast_header'(typeIR, tid, (value, id)*) : value

def $cast_header(typeIR, tid, (value_f, id_f)*)
  = $cast_header'($canon(typeIR), tid, (value_f, id_f)*)

def $cast_header'(HeaderT tid _, tid, (value_f, id_f)*)
  = HeaderV tid (value_f id_f)*

def $cast_op(typeIR, HeaderV tid (value_f id_f)*)
  = $cast_header(typeIR, tid, (value_f, id_f)*)

;;; Cast from serializable enum field

def $cast_op(typeIR, SEnumV _ _ value) = $cast_op(typeIR, value)

;; Cast from sequence

dec $cast_sequence(typeIR, value*) : value
dec $cast_sequence'(typeIR, value*) : value

def $cast_sequence(typeIR, value*)
  = $cast_sequence'($canon(typeIR), value*)

def $cast_sequence'(ListT typeIR, value*)
  = ListV $cast_op(typeIR, value)*

def $cast_sequence'(TupleT typeIR*, value*)
  = TupleV $cast_op(typeIR, value)*

def $cast_sequence'(HeaderStackT typeIR n_s, value*)
  = HeaderStackV value_cast* n_idx n_s
  -- if (value_cast = $cast_op(typeIR, value))*
  -- if n_idx = |value*|

def $cast_sequence'(StructT tid (typeIR_f id_f)*, value*)
  = StructV tid (value_cast id_f)*
  -- if (value_cast = $cast_op(typeIR_f, value))*

def $cast_sequence'(HeaderT tid (typeIR_f id_f)*, value*)
  = HeaderV tid (value_cast id_f)*
  -- if (value_cast = $cast_op(typeIR_f, value))*

def $cast_op(typeIR, SeqV value*) = $cast_sequence(typeIR, value*)

;; Cast from default sequence

;; Cast from record

dec $cast_record(typeIR, (value, id)*) : value
dec $cast_record'(typeIR, (value, id)*) : value

def $cast_record(typeIR, (value, id)*)
  = $cast_record'($canon(typeIR), (value, id)*)

def $cast_record'(
    StructT tid (typeIR_t_f id_t_f)*,
    (value_f, id_f)*
  )
  = StructV tid (value_f_cast id_f)*
  -- if (value_f' = $find_map<id, value>(`{ (id_f -> value_f)* }, id_t_f))*
  -- if (value_f_cast = $cast_op(typeIR_t_f, value_f'))*

def $cast_record'(
    HeaderT tid (typeIR_t_f id_t_f)*,
    (value_f, id_f)*
  )
  = HeaderV tid (value_f_cast id_f)*
  -- if (value_f' = $find_map<id, value>(`{ (id_f -> value_f)* }, id_t_f))*
  -- if (value_f_cast = $cast_op(typeIR_t_f, value_f'))*

def $cast_op(typeIR, RecordV (value id)*)
  = $cast_record(typeIR, (value, id)*)

;; Cast from default record

;; Cast from default

def $cast_op(typeIR, DefaultV) = $default(typeIR)

;; Cast from invalid

;; Cast from set

dec $cast_set_singleton(typeIR, value) : value
dec $cast_set_singleton'(typeIR, value) : value

def $cast_set_singleton(typeIR, value)
  = $cast_set_singleton'($canon(typeIR), value)

def $cast_set_singleton'(SetT typeIR, value)
  = SingletonSetV $cast_op(typeIR, value)

dec $cast_set_mask(typeIR, value, value) : value
dec $cast_set_mask'(typeIR, value, value) : value

def $cast_set_mask(typeIR, value_b, value_m)
  = $cast_set_mask'($canon(typeIR), value_b, value_m)

def $cast_set_mask'(SetT typeIR, value_b, value_m)
  = MaskSetV value_b_cast value_m_cast
  -- if value_b_cast = $cast_op(typeIR, value_b)
  -- if value_m_cast = $cast_op(typeIR, value_m)

dec $cast_set_range(typeIR, value, value) : value
dec $cast_set_range'(typeIR, value, value) : value

def $cast_set_range(typeIR, value_l, value_u)
  = $cast_set_range'($canon(typeIR), value_l, value_u)

def $cast_set_range'(SetT typeIR, value_l, value_u)
  = RangeSetV value_l_cast value_u_cast
  -- if value_l_cast = $cast_op(typeIR, value_l)
  -- if value_u_cast = $cast_op(typeIR, value_u)

def $cast_op(typeIR, SingletonSetV value)
  = $cast_set_singleton(typeIR, value)
def $cast_op(typeIR, MaskSetV value_b value_m)
  = $cast_set_mask(typeIR, value_b, value_m)
def $cast_op(typeIR, RangeSetV value_l value_u)
  = $cast_set_range(typeIR, value_l, value_u)

;;
;; Default values for types
;; (TODO) This should be target-specific
;;

def $default(typeIR) = $default'($canon(typeIR))

def $default'(BoolT) = BoolV false
def $default'(ErrT) = ErrV "NoError"
def $default'(StrT) = StrV ""

def $default'(IntT) = IntV 0
def $default'(FBitT w) = FBitV w 0
def $default'(FIntT w) = FIntV w 0
def $default'(VBitT w) = VBitV w 0 0

def $default'(TupleT typeIR*) = TupleV $default(typeIR)*

def $default'(HeaderStackT typeIR n_s) = HeaderStackV value* 0 n_s
  -- if value* = $repeat_<value>($default(typeIR), n_s)

def $default'(StructT tid (typeIR_f id_f)*)
  = StructV tid ($default(typeIR_f) id_f)*

def $default'(HeaderT tid (typeIR_f id_f)*)
  = HeaderV tid ($default(typeIR_f) id_f)*

def $default'(HeaderUnionT tid (typeIR_f id_f)*)
  = HeaderUnionV tid ($default(typeIR_f) id_f)*

def $default'(EnumT tid (id_f_h :: _)) = EnumV tid id_f_h

def $default'(SEnumT tid typeIR (id_f value_f)*)
  = SEnumV tid id_zero value_zero
  -- if value_zero = $cast_arbint(typeIR, 0)
  -- if id_zero = $assoc_<value, id>(value_zero, (value_f, id_f)*)

def $default'(SEnumT tid typeIR (id_f value_f)*)
  = SEnumV tid id_zero value_zero
  -- if value_zero = $cast_arbint(typeIR, 0)
  -- if eps = $assoc_<value, id>(value_zero, (value_f, id_f)*)
  -- if id_zero = "__UNSPECIFIED"

;;
;; Bitstring access
;;

dec $bitacc_op(value, value, value) : value

def $bitacc_op(value_b, value_h, value_l) = FBitV w i
  -- if i_b = $to_number(value_b)
  -- if i_h = $to_number(value_h)
  -- if i_l = $to_number(value_l)
  -- if w = $(i_h + 1 - i_l)
  -- if i = $bitacc(i_b, i_h, i_l)

;;
;; Size
;;

dec $sizeof(typeIR, id) : value

dec $sizeof_minSizeInBits(typeIR) : value
dec $sizeof_minSizeInBits'(typeIR) : nat
dec $sizeof_minSizeInBits''(typeIR) : nat

dec $sizeof_minSizeInBytes(typeIR) : value

dec $sizeof_maxSizeInBits(typeIR) : value
dec $sizeof_maxSizeInBits'(typeIR) : nat
dec $sizeof_maxSizeInBits''(typeIR) : nat

dec $sizeof_maxSizeInBytes(typeIR) : value

;;; Minimum size in bits

def $sizeof_minSizeInBits(typeIR)
  = IntV $sizeof_minSizeInBits'(typeIR)
def $sizeof_minSizeInBits'(typeIR)
  = $sizeof_minSizeInBits''($canon(typeIR))

def $sizeof_minSizeInBits''(BoolT) = 1
def $sizeof_minSizeInBits''(FBitT w) = w
def $sizeof_minSizeInBits''(FIntT w) = w
def $sizeof_minSizeInBits''(VBitT _) = 0
def $sizeof_minSizeInBits''(NewT _ typeIR)
  = $sizeof_minSizeInBits'(typeIR)
def $sizeof_minSizeInBits''(SEnumT _ typeIR _)
  = $sizeof_minSizeInBits'(typeIR)
def $sizeof_minSizeInBits''(TupleT typeIR*)
  = $sum($sizeof_minSizeInBits'(typeIR)*)
def $sizeof_minSizeInBits''(HeaderStackT typeIR n_size)
  = $($sizeof_minSizeInBits'(typeIR) * n_size)
def $sizeof_minSizeInBits''(StructT _ (typeIR _)*)
  = $sum($sizeof_minSizeInBits'(typeIR)*)
def $sizeof_minSizeInBits''(HeaderT _ (typeIR _)*)
  = $sum($sizeof_minSizeInBits'(typeIR)*)
def $sizeof_minSizeInBits''(HeaderUnionT _ (typeIR _)*)
  = $min($sizeof_minSizeInBits'(typeIR)*)

def $sizeof(typeIR, "minSizeInBits")
  = $sizeof_minSizeInBits(typeIR)

;;; Minimum size in bytes

def $sizeof_minSizeInBytes(typeIR) = IntV $(n_size / 8)
  -- if n_size = $sizeof_minSizeInBits'(typeIR)

def $sizeof(typeIR, "minSizeInBytes")
  = $sizeof_minSizeInBytes(typeIR)

;; Maximum size in bits

def $sizeof_maxSizeInBits(typeIR)
  = IntV $sizeof_maxSizeInBits'(typeIR)
def $sizeof_maxSizeInBits'(typeIR)
  = $sizeof_maxSizeInBits''($canon(typeIR))

def $sizeof_maxSizeInBits''(BoolT) = 1
def $sizeof_maxSizeInBits''(FBitT w) = w
def $sizeof_maxSizeInBits''(FIntT w) = w
def $sizeof_maxSizeInBits''(VBitT w) = w
def $sizeof_maxSizeInBits''(NewT _ typeIR)
  = $sizeof_maxSizeInBits'(typeIR)
def $sizeof_maxSizeInBits''(SEnumT _ typeIR _)
  = $sizeof_maxSizeInBits'(typeIR)
def $sizeof_maxSizeInBits''(TupleT typeIR*)
  = $sum($sizeof_maxSizeInBits'(typeIR)*)
def $sizeof_maxSizeInBits''(HeaderStackT typeIR n_size)
  = $($sizeof_maxSizeInBits'(typeIR) * n_size)
def $sizeof_maxSizeInBits''(StructT _ (typeIR _)*)
  = $sum($sizeof_maxSizeInBits'(typeIR)*)
def $sizeof_maxSizeInBits''(HeaderT _ (typeIR _)*)
  = $sum($sizeof_maxSizeInBits'(typeIR)*)
def $sizeof_maxSizeInBits''(HeaderUnionT _ (typeIR _)*)
  = $max($sizeof_maxSizeInBits'(typeIR)*)

def $sizeof(typeIR, "maxSizeInBits")
  = $sizeof_maxSizeInBits(typeIR)

;;; Maximum size in bytes

def $sizeof_maxSizeInBytes(typeIR) = IntV $(n_size / 8)
  -- if n_size = $sizeof_maxSizeInBits'(typeIR)

def $sizeof(typeIR, "maxSizeInBytes")
  = $sizeof_maxSizeInBytes(typeIR)
