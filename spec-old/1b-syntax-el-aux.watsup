;;
;; Expression constructor checks
;;

dec $is_boole(expr) : bool
def $is_boole(BoolE _) = true
def $is_boole(_) = false
  -- otherwise

dec $is_stre(expr) : bool                 
def $is_stre(StrE _) = true
def $is_stre(_) = false
  -- otherwise

dec $is_nume(expr) : bool
def $is_nume(NumE _) = true
def $is_nume(_) = false
  -- otherwise

dec $is_namee(expr) : bool
def $is_namee(NameE _) = true
def $is_namee(_) = false
  -- otherwise

dec $is_seqe(expr) : bool
def $is_seqe(SeqE _) = true
def $is_seqe(_) = false
  -- otherwise

dec $is_seq_defaulte(expr) : bool
def $is_seq_defaulte(SeqDefaultE _) = true
def $is_seq_defaulte(_) = false
  -- otherwise

dec $is_recorde(expr) : bool
def $is_recorde(RecordE _) = true
def $is_recorde(_) = false
  -- otherwise

dec $is_record_defaulte(expr) : bool
def $is_record_defaulte(RecordDefaultE _) = true
def $is_record_defaulte(_) = false
  -- otherwise

dec $is_defaulte(expr) : bool
def $is_defaulte(DefaultE) = true
def $is_defaulte(_) = false
  -- otherwise

dec $is_invalide(expr) : bool
def $is_invalide(InvalidE) = true
def $is_invalide(_) = false
  -- otherwise

dec $is_une(expr) : bool
def $is_une(UnE _ _) = true
def $is_une(_) = false
  -- otherwise

dec $is_bine(expr) : bool
def $is_bine(BinE _ _ _) = true
def $is_bine(_) = false
  -- otherwise

dec $is_terne(expr) : bool
def $is_terne(TernE _ _ _) = true
def $is_terne(_) = false
  -- otherwise

dec $is_caste(expr) : bool
def $is_caste(CastE _ _) = true
def $is_caste(_) = false
  -- otherwise

dec $is_maske(expr) : bool
def $is_maske(MaskE _ _) = true
def $is_maske(_) = false
  -- otherwise

dec $is_rangee(expr) : bool
def $is_rangee(RangeE _ _) = true
def $is_rangee(_) = false
  -- otherwise

dec $is_selecte(expr) : bool
def $is_selecte(SelectE _ _) = true
def $is_selecte(_) = false
  -- otherwise

dec $is_arracce(expr) : bool
def $is_arracce(ArrAccE _ _) = true
def $is_arracce(_) = false
  -- otherwise

dec $is_bitacce(expr) : bool
def $is_bitacce(BitAccE _ _ _) = true
def $is_bitacce(_) = false
  -- otherwise

dec $is_erracce(expr) : bool
def $is_erracce(ErrAccE _) = true
def $is_erracce(_) = false
  -- otherwise

dec $is_typacce(expr) : bool
def $is_typacce(TypeAccE _ _) = true
def $is_typacce(_) = false
  -- otherwise

dec $is_expracce(expr) : bool
def $is_expracce(ExprAccE _ _) = true
def $is_expracce(_) = false
  -- otherwise

dec $is_callfunce(expr) : bool
def $is_callfunce(CallFuncE _ _ _) = true
def $is_callfunce(_) = false
  -- otherwise

dec $is_callmethode(expr) : bool
def $is_callmethode(CallMethodE _ _ _ _) = true
def $is_callmethode(_) = false
  -- otherwise

dec $is_calltype(expr) : bool
def $is_calltype(CallTypeE _ _ _ _) = true
def $is_calltype(_) = false
  -- otherwise

dec $is_inste(expr) : bool
def $is_inste(InstE _ _ _) = true
def $is_inste(_) = false
  -- otherwise

;;
;; Stringifiers
;;

dec $string_of_name(name) : text

def $string_of_name(TOP id) = $concat_text("." :: id)
def $string_of_name(CURRENT id) = id

;;
;; Unpacking name
;;

dec $id_of_name(name) : id

def $id_of_name(TOP id) = id
def $id_of_name(CURRENT id) = id
