;;
;; Type helpers
;;

;; Type constructor checks

dec $is_base(typ) : bool
def $is_base(basetyp) = true
def $is_base(typ) = false
  -- otherwise

dec $is_prim(typ) : bool
def $is_prim(primtyp) = true
def $is_prim(typ) = false
  -- otherwise

dec $is_voidt(typ) : bool
def $is_voidt(VoidT) = true
def $is_voidt(typ) = false
  -- otherwise

dec $is_errt(typ) : bool
def $is_errt(ErrT) = true
def $is_errt(typ) = false
  -- otherwise

dec $is_matchkindt(typ) : bool
def $is_matchkindt(MatchKindT) = true
def $is_matchkindt(typ) = false
  -- otherwise

dec $is_strt(typ) : bool
def $is_strt(StrT) = true
def $is_strt(typ) = false
  -- otherwise

dec $is_boolt(typ) : bool
def $is_boolt(BoolT) = true
def $is_boolt(typ) = false
  -- otherwise

dec $is_num(typ) : bool
def $is_num(numtyp) = true
def $is_num(typ) = false
  -- otherwise

dec $is_intt(typ) : bool
def $is_intt(IntT) = true
def $is_intt(typ) = false
  -- otherwise

dec $is_fintt(typ) : bool
def $is_fintt(FIntT _) = true
def $is_fintt(typ) = false
  -- otherwise

dec $is_fbitt(typ) : bool
def $is_fbitt(FBitT _) = true
def $is_fbitt(typ) = false
  -- otherwise

dec $is_vbitt(typ) : bool
def $is_vbitt(VBitT _) = true
def $is_vbitt(typ) = false
  -- otherwise

dec $is_abstract(typ) : bool
def $is_abstract(abstyp) = true
def $is_abstract(typ) = false
  -- otherwise

dec $is_vart(typ) : bool
def $is_vart(VarT _) = true
def $is_vart(typ) = false
  -- otherwise

dec $is_spect(typ) : bool
def $is_spect(SpecT _ _) = true
def $is_spect(typ) = false
  -- otherwise

dec $is_def(typ) : bool
def $is_def(deftyp) = true
def $is_def(typ) = false
  -- otherwise

dec $is_alias(typ) : bool
def $is_alias(aliastyp) = true
def $is_alias(typ) = false
  -- otherwise

dec $is_deft(typ) : bool
def $is_deft(DefT _ _) = true
def $is_deft(typ) = false
  -- otherwise

dec $is_data(typ) : bool
def $is_data(datatyp) = true
def $is_data(typ) = false
  -- otherwise

dec $is_newt(typ) : bool
def $is_newt(NewT _ _) = true
def $is_newt(typ) = false
  -- otherwise

dec $is_enumt(typ) : bool
def $is_enumt(EnumT _ _) = true
def $is_enumt(typ) = false
  -- otherwise

dec $is_senumt(typ) : bool
def $is_senumt(SEnumT _ _ _) = true
def $is_senumt(typ) = false
  -- otherwise

dec $is_listt(typ) : bool
def $is_listt(ListT _) = true
def $is_listt(typ) = false
  -- otherwise

dec $is_tuplet(typ) : bool
def $is_tuplet(TupleT _) = true
def $is_tuplet(typ) = false
  -- otherwise

dec $is_stackt(typ) : bool
def $is_stackt(StackT _ _) = true
def $is_stackt(typ) = false
  -- otherwise

dec $is_structt(typ) : bool
def $is_structt(StructT _ _) = true
def $is_structt(typ) = false
  -- otherwise

dec $is_headert(typ) : bool
def $is_headert(HeaderT _ _) = true
def $is_headert(typ) = false
  -- otherwise

dec $is_uniont(typ) : bool
def $is_uniont(UnionT _ _) = true
def $is_uniont(typ) = false
  -- otherwise

dec $is_obj(typ) : bool
def $is_obj(objtyp) = true
def $is_obj(typ) = false
  -- otherwise

dec $is_externt(typ) : bool
def $is_externt(ExternT _ _) = true
def $is_externt(typ) = false
  -- otherwise

dec $is_parsert(typ) : bool
def $is_parsert(ParserT _ _) = true
def $is_parsert(typ) = false
  -- otherwise

dec $is_controlt(typ) : bool
def $is_controlt(ControlT _ _) = true
def $is_controlt(typ) = false
  -- otherwise

dec $is_packaget(typ) : bool
def $is_packaget(PackageT _ _) = true
def $is_packaget(typ) = false
  -- otherwise

dec $is_tablet(typ) : bool
def $is_tablet(TableT _ _) = true
def $is_tablet(typ) = false
  -- otherwise

dec $is_synth(typ) : bool
def $is_synth(synthtyp) = true
def $is_synth(typ) = false
  -- otherwise

dec $is_seqt(typ) : bool
def $is_seqt(SeqT _) = true
def $is_seqt(typ) = false
  -- otherwise

dec $is_recordt(typ) : bool
def $is_recordt(RecordT _) = true
def $is_recordt(typ) = false
  -- otherwise

dec $is_sett(typ) : bool
def $is_sett(SetT _) = true
def $is_sett(typ) = false
  -- otherwise

dec $is_table_structt(typ) : bool
def $is_table_structt(TableStructT _ _) = true
def $is_table_structt(typ) = false
  -- otherwise

;;
;; Function type helpers
;;

;; Function type constructor checks

dec $is_actiont(functyp) : bool
def $is_actiont(ActionT _) = true
def $is_actiont(functyp) = false
  -- otherwise

dec $is_externfunct(functyp) : bool
def $is_externfunct(ExternFuncT _ _) = true
def $is_externfunct(functyp) = false
  -- otherwise

dec $is_funct(functyp) : bool
def $is_funct(FuncT _ _) = true
def $is_funct(functyp) = false
  -- otherwise

dec $is_builtinmethodt(functyp) : bool
def $is_builtinmethodt(BuiltinMethodT _ _) = true
def $is_builtinmethodt(functyp) = false
  -- otherwise

dec $is_externmethodt(functyp) : bool
def $is_externmethodt(ExternMethodT _ _) = true
def $is_externmethodt(functyp) = false
  -- otherwise

dec $is_externabstractmethodt(functyp) : bool
def $is_externabstractmethodt(ExternAbstractMethodT _ _) = true
def $is_externabstractmethodt(functyp) = false
  -- otherwise

dec $is_parserapplymethodt(functyp) : bool
def $is_parserapplymethodt(ParserApplyMethodT _) = true
def $is_parserapplymethodt(functyp) = false
  -- otherwise

dec $is_controlapplymethodt(functyp) : bool
def $is_controlapplymethodt(ControlApplyMethodT _) = true
def $is_controlapplymethodt(functyp) = false
  -- otherwise

dec $is_tableapplymethodt(functyp) : bool
def $is_tableapplymethodt(TableApplyMethodT _) = true
def $is_tableapplymethodt(functyp) = false
  -- otherwise

;; Parmeter and return type getters

dec $get_params_functyp(functyp) : paramtyp*
def $get_params_functyp(ActionT pt*) = pt*
def $get_params_functyp(ExternFuncT pt* _) = pt*
def $get_params_functyp(FuncT pt* _) = pt*
def $get_params_functyp(ExternMethodT pt* _) = pt*
def $get_params_functyp(ExternAbstractMethodT pt* _) = pt*
def $get_params_functyp(ParserApplyMethodT pt*) = pt*
def $get_params_functyp(ControlApplyMethodT pt*) = pt*
def $get_params_functyp(BuiltinMethodT pt* _) = pt*
def $get_params_functyp(TableApplyMethodT _) = eps

dec $get_typ_ret_functyp(functyp) : typ
def $get_typ_ret_functyp(ActionT _) = VoidT
def $get_typ_ret_functyp(ExternFuncT _ typ_r) = typ_r
def $get_typ_ret_functyp(FuncT _ typ_r) = typ_r
def $get_typ_ret_functyp(ExternMethodT _ typ_r) = typ_r
def $get_typ_ret_functyp(ExternAbstractMethodT _ typ_r) = typ_r
def $get_typ_ret_functyp(ParserApplyMethodT _) = VoidT
def $get_typ_ret_functyp(ControlApplyMethodT _) = VoidT
def $get_typ_ret_functyp(BuiltinMethodT _ typ_r) = typ_r
def $get_typ_ret_functyp(TableApplyMethodT typ_r) = typ_r

;;
;; Function definition helpers
;;

;; Parmeter and return type getters

dec $get_params_funcdef(funcdef): paramtyp*
def $get_params_funcdef(MonoFD ft) = $get_params_functyp(ft)
def $get_params_funcdef(PolyFD _ -> ft) = $get_params_functyp(ft)

dec $get_typ_ret_funcdef(funcdef) : typ
    hint(show GET_TYP_RET_FUNCDEF(%1))
def $get_typ_ret_funcdef(MonoFD ft) = $get_typ_ret_functyp(ft)
def $get_typ_ret_funcdef(PolyFD _ -> ft) = $get_typ_ret_functyp(ft)
