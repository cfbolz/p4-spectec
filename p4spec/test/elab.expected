;; ../../../../spec/0-aux.watsup:18.1-18.21
def $sum(nat*) : nat =

;; ../../../../spec/0-aux.watsup:19.1-19.21
def $max(nat*) : nat =

;; ../../../../spec/0-aux.watsup:20.1-20.21
def $min(nat*) : nat =

;; ../../../../spec/0-aux.watsup:26.1-27.17
def $int_to_text(int) : text =

;; ../../../../spec/0-aux.watsup:29.1-30.17
def $concat_text(text*) : text =

   ;; ../../../../spec/0-aux.watsup:32.1-32.27
   clause 0(text*{text <- text*}) = ""
      -- if text*{text <- text*} matches []

   ;; ../../../../spec/0-aux.watsup:33.1-33.52
   clause 1(text*{text <- text*}) = t ++ $concat_text(t'*{t' <- t'*})
      -- if text*{text <- text*} matches _ :: _
      -- let t :: t'*{t' <- t'*} = text*{text <- text*}

;; ../../../../spec/0-aux.watsup:35.1-35.37
def $strip_prefix(text, text) : text =

;; ../../../../spec/0-aux.watsup:36.1-36.37
def $strip_suffix(text, text) : text =

;; ../../../../spec/0-aux.watsup:42.1-42.23
def $init_(nat) : nat* =

   ;; ../../../../spec/0-aux.watsup:43.1-43.20
   clause 0(nat) = []
      -- if (nat = 0)

   ;; ../../../../spec/0-aux.watsup:44.1-45.15
   clause 1(n) = (n - 1) :: $init_((n - 1))
      -- otherwise

;; ../../../../spec/0-aux.watsup:47.1-47.29
def $repeat_<X>(X, nat) : X* =

   ;; ../../../../spec/0-aux.watsup:49.1-49.28
   clause 0(X, nat) = []
      -- if (nat = 0)

   ;; ../../../../spec/0-aux.watsup:50.1-51.15
   clause 1(X, n) = [X] ++ $repeat_<X>(X, (n - 1))
      -- otherwise

;; ../../../../spec/0-aux.watsup:53.1-54.26
def $rev_<X>(X*) : X* =

;; ../../../../spec/0-aux.watsup:56.1-57.23
def $concat_<X>(X**) : X* =

;; ../../../../spec/0-aux.watsup:59.1-59.39
def $partition_<X>(X*, nat) : (X*, X*) =

;; ../../../../spec/0-aux.watsup:61.1-62.23
def $assoc_<X, Y>(X, (X, Y)*) : Y? =

;; ../../../../spec/0-aux.watsup:64.1-65.28
def $distinct_<K>(K*) : bool =

;; ../../../../spec/0-aux.watsup:71.17-71.24
syntax set<K> = 
   | `{%}`(K*)

;; ../../../../spec/0-aux.watsup:73.1-74.43
def $empty_set<K> : set<K> =

   ;; ../../../../spec/0-aux.watsup:75.1-75.29
   clause 0 = `{%}`_set<K>([])

;; ../../../../spec/0-aux.watsup:77.1-78.36
def $in_set<K>(K, set<K>) : bool =

   ;; ../../../../spec/0-aux.watsup:79.1-79.39
   clause 0(K, `{%}`_set<K>(K'*{K' <- K'*})) = K <- K'*{K' <- K'*}

;; ../../../../spec/0-aux.watsup:81.1-82.37
def $intersect_set<K>(set<K>, set<K>) : set<K> =

;; ../../../../spec/0-aux.watsup:84.1-85.37
def $union_set<K>(set<K>, set<K>) : set<K> =

;; ../../../../spec/0-aux.watsup:87.1-88.37
def $unions_set<K>(set<K>*) : set<K> =

;; ../../../../spec/0-aux.watsup:90.1-91.42
def $diff_set<K>(set<K>, set<K>) : set<K> =

;; ../../../../spec/0-aux.watsup:93.1-94.40
def $sub_set<K>(set<K>, set<K>) : bool =

;; ../../../../spec/0-aux.watsup:96.1-97.33
def $eq_set<K>(set<K>, set<K>) : bool =

;; ../../../../spec/0-aux.watsup:103.21-103.27
syntax pair<K, V> = 
   | `%->%`(K, V)

;; ../../../../spec/0-aux.watsup:106.20-106.37
syntax map<K, V> = set<pair<K, V>>

;; ../../../../spec/0-aux.watsup:108.1-109.43
def $empty_map<K, V> : map<K, V> =

   ;; ../../../../spec/0-aux.watsup:111.1-111.32
   clause 0 = `{%}`_set<pair<K, V>>([])

;; ../../../../spec/0-aux.watsup:113.1-114.55
def $dom_map<K, V>(map<K, V>) : set<K> =

   ;; ../../../../spec/0-aux.watsup:116.1-116.45
   clause 0(`{%}`_set<pair<K, V>>(`%->%`_pair<K, V>(K, V)*{K <- K*, V <- V*})) = `{%}`_set<K>(K*{K <- K*})

;; ../../../../spec/0-aux.watsup:118.1-119.25
def $find_map<K, V>(map<K, V>, K) : V? =

;; ../../../../spec/0-aux.watsup:121.1-122.25
def $find_maps<K, V>(map<K, V>*, K) : V? =

;; ../../../../spec/0-aux.watsup:124.1-125.71
def $add_map<K, V>(map<K, V>, K, V) : map<K, V> =

;; ../../../../spec/0-aux.watsup:127.1-128.71
def $adds_map<K, V>(map<K, V>, K*, V*) : map<K, V> =

;; ../../../../spec/0-aux.watsup:130.1-131.71
def $update_map<K, V>(map<K, V>, K, V) : map<K, V> =

;; ../../../../spec/1a-syntax-el.watsup:5.15-5.18
syntax bits = int

;; ../../../../spec/1a-syntax-el.watsup:6.16-6.19
syntax width = nat

;; ../../../../spec/1a-syntax-el.watsup:9.1-11.20
syntax num = 
   | `INT%`(int)
   | `FINT%%`(width, bits)
   | `FBIT%%`(width, bits)

;; ../../../../spec/1a-syntax-el.watsup:21.13-21.17
syntax id = text

;; ../../../../spec/1a-syntax-el.watsup:28.1-29.15
syntax name = 
   | `TOP%`(id)
   | `CURRENT%`(id)

;; ../../../../spec/1a-syntax-el.watsup:35.17-35.19
syntax member = id

;; ../../../../spec/1a-syntax-el.watsup:41.20-41.22
syntax matchkind = id

;; ../../../../spec/1a-syntax-el.watsup:47.21-47.23
syntax statelabel = id

;; ../../../../spec/1a-syntax-el.watsup:54.1-55.19
syntax unop = 
   | `BNOT`()
   | `LNOT`()
   | `UPLUS`()
   | `UMINUS`()

;; ../../../../spec/1a-syntax-el.watsup:62.1-70.15
syntax binop = 
   | `PLUS`()
   | `SPLUS`()
   | `MINUS`()
   | `SMINUS`()
   | `MUL`()
   | `DIV`()
   | `MOD`()
   | `SHL`()
   | `SHR`()
   | `LE`()
   | `GE`()
   | `LT`()
   | `GT`()
   | `EQ`()
   | `NE`()
   | `BAND`()
   | `BXOR`()
   | `BOR`()
   | `CONCAT`()
   | `LAND`()
   | `LOR`()

;; ../../../../spec/1a-syntax-el.watsup:76.14-76.35
syntax dir = 
   | `NO`()
   | `IN`()
   | `OUT`()
   | `INOUT`()

;; ../../../../spec/1a-syntax-el.watsup:89.1-103.9
syntax type = 
   | `VoidT`()
   | `ErrT`()
   | `MatchKindT`()
   | `StrT`()
   | `BoolT`()
   | `IntT`()
   | `FIntT%`(expr)
   | `FBitT%`(expr)
   | `VBitT%`(expr)
   | `StackT%%`(type, expr)
   | `ListT%`(type)
   | `TupleT%`(type*)
   | `NameT%`(name)
   | `SpecT%%`(name, type*)
   | `AnyT`()

;; ../../../../spec/1a-syntax-el.watsup:109.17-109.19
syntax tparam = id

;; ../../../../spec/1a-syntax-el.watsup:115.16-115.33
syntax param = 
   | `%%%%`(id, dir, type, expr?)

;; ../../../../spec/1a-syntax-el.watsup:121.17-121.22
syntax cparam = param

;; ../../../../spec/1a-syntax-el.watsup:127.15-127.19
syntax targ = type

;; ../../../../spec/1a-syntax-el.watsup:134.1-136.9
syntax arg = 
   | `ExprA%`(expr)
   | `NameA%%`(id, expr?)
   | `AnyA`()

;; ../../../../spec/1a-syntax-el.watsup:143.1-145.9
syntax keyset = 
   | `ExprK%`(expr)
   | `DefaultK`()
   | `AnyK`()

;; ../../../../spec/1a-syntax-el.watsup:151.21-151.39
syntax selectcase = 
   | `%%`(keyset*, statelabel)

;; ../../../../spec/1a-syntax-el.watsup:158.1-183.26
syntax expr = 
   | `BoolE%`(bool)
   | `StrE%`(text)
   | `NumE%`(num)
   | `NameE%`(name)
   | `SeqE%`(expr*)
   | `SeqDefaultE%`(expr*)
   | `RecordE%`((member, expr)*)
   | `RecordDefaultE%`((member, expr)*)
   | `DefaultE`()
   | `InvalidE`()
   | `UnE%%`(unop, expr)
   | `BinE%%%`(binop, expr, expr)
   | `TernE%%%`(expr, expr, expr)
   | `CastE%%`(type, expr)
   | `MaskE%%`(expr, expr)
   | `RangeE%%`(expr, expr)
   | `SelectE%%`(expr*, selectcase*)
   | `ArrAccE%%`(expr, expr)
   | `BitAccE%%%`(expr, expr, expr)
   | `ErrAccE%`(member)
   | `TypeAccE%%`(name, member)
   | `ExprAccE%%`(expr, member)
   | `CallFuncE%%%`(name, targ*, arg*)
   | `CallMethodE%%%%`(expr, member, targ*, arg*)
   | `CallTypeE%%%%`(name, member, targ*, arg*)
   | `InstE%%%`(name, targ*, arg*)

;; ../../../../spec/1a-syntax-el.watsup:189.16-189.28
syntax block = 
   | `BlockB%`(stmt*)

;; ../../../../spec/1a-syntax-el.watsup:196.1-207.15
syntax stmt = 
   | `EmptyS`()
   | `AssignS%%`(expr, expr)
   | `SwitchS%%`(expr, switchcase*)
   | `IfS%%%`(expr, stmt, stmt)
   | `BlockS%`(block)
   | `ExitS`()
   | `RetS%`(expr?)
   | `CallFuncS%%%`(name, targ*, arg*)
   | `CallMethodS%%%%`(expr, member, targ*, arg*)
   | `CallInstS%%%`(name, targ*, arg*)
   | `TransS%`(expr)
   | `DeclS%`(decl)

;; ../../../../spec/1a-syntax-el.watsup:214.1-215.13
syntax switchlabel = 
   | `ExprL%`(expr)
   | `DefaultL`()

;; ../../../../spec/1a-syntax-el.watsup:218.1-219.22
syntax switchcase = 
   | `MatchC%%`(switchlabel, block)
   | `FallC%`(switchlabel)

;; ../../../../spec/1a-syntax-el.watsup:225.22-225.38
syntax parserstate = 
   | `%%`(statelabel, block)

;; ../../../../spec/1a-syntax-el.watsup:231.14-231.22
syntax tbl = tblprop*

;; ../../../../spec/1a-syntax-el.watsup:237.17-237.31
syntax tblkey = 
   | `%%`(expr, matchkind)

;; ../../../../spec/1a-syntax-el.watsup:238.21-238.28
syntax tblkeyprop = tblkey*

;; ../../../../spec/1a-syntax-el.watsup:244.20-244.29
syntax tblaction = 
   | `%%`(name, arg*)

;; ../../../../spec/1a-syntax-el.watsup:245.24-245.34
syntax tblactionprop = tblaction*

;; ../../../../spec/1a-syntax-el.watsup:251.19-251.47
syntax tblentry = 
   | `%%%%`(bool, keyset*, tblaction, expr?)

;; ../../../../spec/1a-syntax-el.watsup:252.23-252.37
syntax tblentryprop = 
   | `%%`(bool, tblentry*)

;; ../../../../spec/1a-syntax-el.watsup:258.25-258.39
syntax tbldefaultprop = 
   | `%%`(bool, tblaction)

;; ../../../../spec/1a-syntax-el.watsup:264.24-264.40
syntax tblcustomprop = 
   | `%%%`(bool, member, expr)

;; ../../../../spec/1a-syntax-el.watsup:271.1-275.26
syntax tblprop = 
   | `KeyP%`(tblkeyprop)
   | `ActionP%`(tblactionprop)
   | `EntryP%`(tblentryprop)
   | `DefaultP%`(tbldefaultprop)
   | `CustomP%`(tblcustomprop)

;; ../../../../spec/1a-syntax-el.watsup:282.1-284.35
syntax method = 
   | `ExternConsM%%`(id, cparam*)
   | `ExternAbstractM%%%%`(id, type, tparam*, param*)
   | `ExternM%%%%`(id, type, tparam*, param*)

;; ../../../../spec/1a-syntax-el.watsup:293.1-315.36
syntax decl = 
   | `ConstD%%%`(id, type, expr)
   | `VarD%%%`(id, type, expr?)
   | `ErrD%`(member*)
   | `MatchKindD%`(member*)
   | `InstD%%%%%`(id, name, targ*, arg*, decl*)
   | `StructD%%%`(id, tparam*, (member, type)*)
   | `HeaderD%%%`(id, tparam*, (member, type)*)
   | `UnionD%%%`(id, tparam*, (member, type)*)
   | `EnumD%%`(id, member*)
   | `SEnumD%%%`(id, type, (member, expr)*)
   | `NewTypeD%%`(id, typedef)
   | `TypeDefD%%`(id, typedef)
   | `ValueSetD%%%`(id, type, expr)
   | `ParserTypeD%%%`(id, tparam*, param*)
   | `ParserD%%%%%`(id, param*, cparam*, decl*, parserstate*)
   | `TableD%%`(id, tbl)
   | `ControlTypeD%%%`(id, tparam*, param*)
   | `ControlD%%%%%`(id, param*, cparam*, decl*, block)
   | `ActionD%%%`(id, param*, block)
   | `FuncD%%%%%`(id, type, tparam*, param*, block)
   | `ExternFuncD%%%%`(id, type, tparam*, param*)
   | `ExternObjectD%%%`(id, tparam*, method*)
   | `PackageTypeD%%%`(id, tparam*, cparam*)

;; ../../../../spec/1a-syntax-el.watsup:318.1-319.15
syntax typedef = 
   | `TypeD%`(type)
   | `DeclD%`(decl)

;; ../../../../spec/1a-syntax-el.watsup:325.18-325.23
syntax program = decl*

;; ../../../../spec/1b-syntax-el-aux.watsup:5.1-5.27
def $is_boole(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:6.1-6.30
   clause 0(expr) = true
      -- if expr matches `BoolE%`
      -- let `BoolE%`_expr(_bool) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:7.1-8.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:10.1-10.26
def $is_stre(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:11.1-11.28
   clause 0(expr) = true
      -- if expr matches `StrE%`
      -- let `StrE%`_expr(_text) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:12.1-13.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:15.1-15.26
def $is_nume(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:16.1-16.28
   clause 0(expr) = true
      -- if expr matches `NumE%`
      -- let `NumE%`_expr(_num) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:17.1-18.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:20.1-20.27
def $is_namee(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:21.1-21.30
   clause 0(expr) = true
      -- if expr matches `NameE%`
      -- let `NameE%`_expr(_name) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:22.1-23.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:25.1-25.26
def $is_seqe(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:26.1-26.28
   clause 0(expr) = true
      -- if expr matches `SeqE%`
      -- let `SeqE%`_expr(_expr*{_expr <- _expr*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:27.1-28.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:30.1-30.34
def $is_seq_defaulte(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:31.1-31.43
   clause 0(expr) = true
      -- if expr matches `SeqDefaultE%`
      -- let `SeqDefaultE%`_expr(_expr*{_expr <- _expr*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:32.1-33.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:35.1-35.29
def $is_recorde(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:36.1-36.34
   clause 0(expr) = true
      -- if expr matches `RecordE%`
      -- let `RecordE%`_expr(_(member, expr)*{_(member, expr) <- _(member, expr)*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:37.1-38.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:40.1-40.37
def $is_record_defaulte(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:41.1-41.49
   clause 0(expr) = true
      -- if expr matches `RecordDefaultE%`
      -- let `RecordDefaultE%`_expr(_(member, expr)*{_(member, expr) <- _(member, expr)*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:42.1-43.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:45.1-45.30
def $is_defaulte(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:46.1-46.34
   clause 0(expr) = true
      -- if expr matches `DefaultE`

   ;; ../../../../spec/1b-syntax-el-aux.watsup:47.1-48.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:50.1-50.30
def $is_invalide(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:51.1-51.34
   clause 0(expr) = true
      -- if expr matches `InvalidE`

   ;; ../../../../spec/1b-syntax-el-aux.watsup:52.1-53.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:55.1-55.25
def $is_une(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:56.1-56.28
   clause 0(expr) = true
      -- if expr matches `UnE%%`
      -- let `UnE%%`_expr(_unop, _expr) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:57.1-58.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:60.1-60.26
def $is_bine(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:61.1-61.32
   clause 0(expr) = true
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(_binop, _expr, _expr') = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:62.1-63.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:65.1-65.27
def $is_terne(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:66.1-66.34
   clause 0(expr) = true
      -- if expr matches `TernE%%%`
      -- let `TernE%%%`_expr(_expr, _expr', _expr'') = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:67.1-68.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:70.1-70.27
def $is_caste(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:71.1-71.32
   clause 0(expr) = true
      -- if expr matches `CastE%%`
      -- let `CastE%%`_expr(_type, _expr) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:72.1-73.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:75.1-75.27
def $is_maske(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:76.1-76.32
   clause 0(expr) = true
      -- if expr matches `MaskE%%`
      -- let `MaskE%%`_expr(_expr, _expr') = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:77.1-78.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:80.1-80.28
def $is_rangee(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:81.1-81.34
   clause 0(expr) = true
      -- if expr matches `RangeE%%`
      -- let `RangeE%%`_expr(_expr, _expr') = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:82.1-83.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:85.1-85.29
def $is_selecte(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:86.1-86.36
   clause 0(expr) = true
      -- if expr matches `SelectE%%`
      -- let `SelectE%%`_expr(_expr*{_expr <- _expr*}, _selectcase*{_selectcase <- _selectcase*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:87.1-88.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:90.1-90.29
def $is_arracce(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:91.1-91.36
   clause 0(expr) = true
      -- if expr matches `ArrAccE%%`
      -- let `ArrAccE%%`_expr(_expr, _expr') = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:92.1-93.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:95.1-95.29
def $is_bitacce(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:96.1-96.38
   clause 0(expr) = true
      -- if expr matches `BitAccE%%%`
      -- let `BitAccE%%%`_expr(_expr, _expr', _expr'') = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:97.1-98.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:100.1-100.29
def $is_erracce(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:101.1-101.34
   clause 0(expr) = true
      -- if expr matches `ErrAccE%`
      -- let `ErrAccE%`_expr(_member) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:102.1-103.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:105.1-105.29
def $is_typacce(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:106.1-106.37
   clause 0(expr) = true
      -- if expr matches `TypeAccE%%`
      -- let `TypeAccE%%`_expr(_name, _member) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:107.1-108.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:110.1-110.30
def $is_expracce(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:111.1-111.38
   clause 0(expr) = true
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(_expr, _member) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:112.1-113.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:115.1-115.31
def $is_callfunce(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:116.1-116.42
   clause 0(expr) = true
      -- if expr matches `CallFuncE%%%`
      -- let `CallFuncE%%%`_expr(_name, _targ*{_targ <- _targ*}, _arg*{_arg <- _arg*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:117.1-118.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:120.1-120.33
def $is_callmethode(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:121.1-121.48
   clause 0(expr) = true
      -- if expr matches `CallMethodE%%%%`
      -- let `CallMethodE%%%%`_expr(_expr, _member, _targ*{_targ <- _targ*}, _arg*{_arg <- _arg*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:122.1-123.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:125.1-125.30
def $is_calltype(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:126.1-126.43
   clause 0(expr) = true
      -- if expr matches `CallTypeE%%%%`
      -- let `CallTypeE%%%%`_expr(_name, _member, _targ*{_targ <- _targ*}, _arg*{_arg <- _arg*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:127.1-128.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:130.1-130.27
def $is_inste(expr) : bool =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:131.1-131.34
   clause 0(expr) = true
      -- if expr matches `InstE%%%`
      -- let `InstE%%%`_expr(_name, _targ*{_targ <- _targ*}, _arg*{_arg <- _arg*}) = expr

   ;; ../../../../spec/1b-syntax-el-aux.watsup:132.1-133.15
   clause 1(_expr) = false
      -- otherwise

;; ../../../../spec/1b-syntax-el-aux.watsup:139.1-139.33
def $string_of_name(name) : text =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:141.1-141.54
   clause 0(name) = $concat_text("." :: [id])
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name

   ;; ../../../../spec/1b-syntax-el-aux.watsup:142.1-142.37
   clause 1(name) = id
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

;; ../../../../spec/1b-syntax-el-aux.watsup:148.1-148.27
def $id_of_name(name) : id =

   ;; ../../../../spec/1b-syntax-el-aux.watsup:150.1-150.29
   clause 0(name) = id
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name

   ;; ../../../../spec/1b-syntax-el-aux.watsup:151.1-151.33
   clause 1(name) = id
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

;; ../../../../spec/2a-runtime-domain.watsup:10.14-10.16
syntax tid = id

;; ../../../../spec/2a-runtime-domain.watsup:11.17-11.25
syntax tidset = set<tid>

;; ../../../../spec/2a-runtime-domain.watsup:13.1-13.23
def $fresh_tid : tid =

;; ../../../../spec/2a-runtime-domain.watsup:15.1-15.28
def $fresh_tids(nat) : tid* =

   ;; ../../../../spec/2a-runtime-domain.watsup:17.1-17.25
   clause 0(nat) = []
      -- if (nat = 0)

   ;; ../../../../spec/2a-runtime-domain.watsup:18.1-19.15
   clause 1(n) = $fresh_tid :: $fresh_tids((n - 1))
      -- otherwise

;; ../../../../spec/2a-runtime-domain.watsup:27.14-27.28
syntax fid = 
   | `%%`(id, (id, bool)*)

;; ../../../../spec/2a-runtime-domain.watsup:28.14-28.17
syntax cid = fid

;; ../../../../spec/2a-runtime-domain.watsup:32.1-32.30
def $to_fid(id, param*) : fid =

   ;; ../../../../spec/2a-runtime-domain.watsup:35.1-35.46
   clause 0(id, param*{param <- param*}) = `%%`_fid(id, $to_fid'(param*{param <- param*}))

;; ../../../../spec/2a-runtime-domain.watsup:33.1-33.35
def $to_fid'(param*) : (id, bool)* =

   ;; ../../../../spec/2a-runtime-domain.watsup:36.1-36.24
   clause 0(param*{param <- param*}) = []
      -- if param*{param <- param*} matches []

   ;; ../../../../spec/2a-runtime-domain.watsup:37.1-38.35
   clause 1(param*{param <- param*}) = (id, true) :: $to_fid'(param_t*{param_t <- param_t*})
      -- if param*{param <- param*} matches _ :: _
      -- let param_h :: param_t*{param_t <- param_t*} = param*{param <- param*}
      -- let `%%%%`_param(id, dir, type, expr'?{expr' <- expr'?}) = param_h
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}

   ;; ../../../../spec/2a-runtime-domain.watsup:39.1-40.34
   clause 2(param*{param <- param*}) = (id, false) :: $to_fid'(param_t*{param_t <- param_t*})
      -- if param*{param <- param*} matches _ :: _
      -- let param_h :: param_t*{param_t <- param_t*} = param*{param <- param*}
      -- let `%%%%`_param(id, dir, type, expr?{expr <- expr?}) = param_h
      -- if expr?{expr <- expr?} matches ()

;; ../../../../spec/2a-runtime-domain.watsup:44.1-44.30
def $to_cid(id, param*) : cid =

   ;; ../../../../spec/2a-runtime-domain.watsup:45.1-45.46
   clause 0(id, param*{param <- param*}) = $to_fid(id, param*{param <- param*})

;; ../../../../spec/2a-runtime-domain.watsup:52.14-52.17
syntax oid = id*

;; ../../../../spec/2b1-runtime-bitstr.watsup:5.17-5.20
syntax bitstr = int

;; ../../../../spec/2b1-runtime-bitstr.watsup:10.1-10.31
def $to_int(int, bitstr) : int =

;; ../../../../spec/2b1-runtime-bitstr.watsup:14.1-14.34
def $to_bitstr(int, int) : bitstr =

;; ../../../../spec/2b2-runtime-value.watsup:9.1-37.16
syntax val = 
   | `ErrV%`(member)
   | `MatchKindV%`(member)
   | `StrV%`(text)
   | `BoolV%`(bool)
   | `IntV%`(int)
   | `FIntV%%`(width, bitstr)
   | `FBitV%%`(width, bitstr)
   | `VBitV%%%`(width, width, bitstr)
   | `EnumFieldV%%`(id, member)
   | `SEnumFieldV%%%`(id, member, val)
   | `ListV%`(val*)
   | `TupleV%`(val*)
   | `StackV%%%`(val*, int, int)
   | `StructV%%`(id, (member, val)*)
   | `HeaderV%%%`(id, bool, (member, val)*)
   | `UnionV%%`(id, (member, val)*)
   | `RefV%`(oid)
   | `TableEnumFieldV%%`(id, member)
   | `TableStructV%%`(id, (member, val)*)
   | `SeqV%`(val*)
   | `SeqDefaultV%`(val*)
   | `RecordV%`((member, val)*)
   | `RecordDefaultV%`((member, val)*)
   | `DefaultV`()
   | `InvalidV`()
   | `SetV%`(setval)

;; ../../../../spec/2b2-runtime-value.watsup:40.1-42.21
syntax setval = 
   | `SingletonSet%`(val)
   | `MaskSet%%`(val, val)
   | `RangeSet%%`(val, val)

;; ../../../../spec/2b3-runtime-value-aux.watsup:3.1-3.24
def $get_num(val) : int =

   ;; ../../../../spec/2b3-runtime-value-aux.watsup:5.1-5.25
   clause 0(val) = i
      -- if val matches `IntV%`
      -- let `IntV%`_val(i) = val

   ;; ../../../../spec/2b3-runtime-value-aux.watsup:6.1-6.42
   clause 1(val) = $to_int(w as int, bs)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs) = val

   ;; ../../../../spec/2b3-runtime-value-aux.watsup:7.1-7.30
   clause 2(val) = bs
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(_width, bs) = val

   ;; ../../../../spec/2b3-runtime-value-aux.watsup:8.1-8.32
   clause 3(val) = bs
      -- if val matches `VBitV%%%`
      -- let `VBitV%%%`_val(_width, _width', bs) = val

;; ../../../../spec/2c1-runtime-type.watsup:15.19-15.37
syntax paramtyp = 
   | `%%%%`(id, dir, typ, exprIL?)

;; ../../../../spec/2c1-runtime-type.watsup:28.1-32.10
syntax primtyp = 
   | `VoidT`()
   | `ErrT`()
   | `MatchKindT`()
   | `StrT`()
   | `BoolT`()

;; ../../../../spec/2c1-runtime-type.watsup:35.1-38.16
syntax numtyp = 
   | `IntT`()
   | `FIntT%`(width)
   | `FBitT%`(width)
   | `VBitT%`(width)

;; ../../../../spec/2c1-runtime-type.watsup:40.18-40.34
syntax basetyp = 
   | `VoidT`()
   | `ErrT`()
   | `MatchKindT`()
   | `StrT`()
   | `BoolT`()
   | `IntT`()
   | `FIntT%`(width)
   | `FBitT%`(width)
   | `VBitT%`(width)

;; ../../../../spec/2c1-runtime-type.watsup:47.1-48.26
syntax abstyp = 
   | `VarT%`(id)
   | `SpecT%%`(polytypdef, typ*)

;; ../../../../spec/2c1-runtime-type.watsup:55.1-55.16
syntax aliastyp = 
   | `DefT%%`(id, typ)

;; ../../../../spec/2c1-runtime-type.watsup:58.1-66.29
syntax datatyp = 
   | `NewT%%`(id, typ)
   | `EnumT%%`(id, member*)
   | `SEnumT%%%`(id, typ, (member, val)*)
   | `ListT%`(typ)
   | `TupleT%`(typ*)
   | `StackT%%`(typ, int)
   | `StructT%%`(id, (member, typ)*)
   | `HeaderT%%`(id, (member, typ)*)
   | `UnionT%%`(id, (member, typ)*)

;; ../../../../spec/2c1-runtime-type.watsup:69.1-73.18
syntax objtyp = 
   | `ExternT%%`(id, map<fid, funcdef>)
   | `ParserT%%`(id, paramtyp*)
   | `ControlT%%`(id, paramtyp*)
   | `PackageT%%`(id, typ*)
   | `TableT%%`(id, typ)

;; ../../../../spec/2c1-runtime-type.watsup:76.1-76.32
syntax deftyp = 
   | `DefT%%`(id, typ)
   | `NewT%%`(id, typ)
   | `EnumT%%`(id, member*)
   | `SEnumT%%%`(id, typ, (member, val)*)
   | `ListT%`(typ)
   | `TupleT%`(typ*)
   | `StackT%%`(typ, int)
   | `StructT%%`(id, (member, typ)*)
   | `HeaderT%%`(id, (member, typ)*)
   | `UnionT%%`(id, (member, typ)*)
   | `ExternT%%`(id, map<fid, funcdef>)
   | `ParserT%%`(id, paramtyp*)
   | `ControlT%%`(id, paramtyp*)
   | `PackageT%%`(id, typ*)
   | `TableT%%`(id, typ)

;; ../../../../spec/2c1-runtime-type.watsup:83.1-93.9
syntax synthtyp = 
   | `DefaultT`()
   | `SeqT%`(typ*)
   | `SeqDefaultT%`(typ*)
   | `RecordT%`((member, typ)*)
   | `RecordDefaultT%`((member, typ)*)
   | `InvalidT`()
   | `SetT%`(typ)
   | `StateT`()
   | `TableEnumT%%`(id, member*)
   | `TableStructT%%`(id, (member, typ)*)
   | `AnyT`()

;; ../../../../spec/2c1-runtime-type.watsup:95.14-95.50
syntax typ = 
   | `VoidT`()
   | `ErrT`()
   | `MatchKindT`()
   | `StrT`()
   | `BoolT`()
   | `IntT`()
   | `FIntT%`(width)
   | `FBitT%`(width)
   | `VBitT%`(width)
   | `VarT%`(id)
   | `SpecT%%`(polytypdef, typ*)
   | `DefT%%`(id, typ)
   | `NewT%%`(id, typ)
   | `EnumT%%`(id, member*)
   | `SEnumT%%%`(id, typ, (member, val)*)
   | `ListT%`(typ)
   | `TupleT%`(typ*)
   | `StackT%%`(typ, int)
   | `StructT%%`(id, (member, typ)*)
   | `HeaderT%%`(id, (member, typ)*)
   | `UnionT%%`(id, (member, typ)*)
   | `ExternT%%`(id, map<fid, funcdef>)
   | `ParserT%%`(id, paramtyp*)
   | `ControlT%%`(id, paramtyp*)
   | `PackageT%%`(id, typ*)
   | `TableT%%`(id, typ)
   | `DefaultT`()
   | `SeqT%`(typ*)
   | `SeqDefaultT%`(typ*)
   | `RecordT%`((member, typ)*)
   | `RecordDefaultT%`((member, typ)*)
   | `InvalidT`()
   | `SetT%`(typ)
   | `StateT`()
   | `TableEnumT%%`(id, member*)
   | `TableStructT%%`(id, (member, typ)*)
   | `AnyT`()

;; ../../../../spec/2c1-runtime-type.watsup:101.21-101.30
syntax monotypdef = 
   | `MonoD%`(typ)

;; ../../../../spec/2c1-runtime-type.watsup:102.21-102.52
syntax polytypdef = 
   | `PolyD%->%`((tparam*, tparam*), typ)

;; ../../../../spec/2c1-runtime-type.watsup:104.17-104.40
syntax typdef = 
   | `MonoD%`(typ)
   | `PolyD%->%`((tparam*, tparam*), typ)

;; ../../../../spec/2c1-runtime-type.watsup:115.1-123.26
syntax functyp = 
   | `ActionT%`(paramtyp*)
   | `ExternFuncT%%`(paramtyp*, typ)
   | `FuncT%%`(paramtyp*, typ)
   | `BuiltinMethodT%%`(paramtyp*, typ)
   | `ExternMethodT%%`(paramtyp*, typ)
   | `ExternAbstractMethodT%%`(paramtyp*, typ)
   | `ParserApplyMethodT%`(paramtyp*)
   | `ControlApplyMethodT%`(paramtyp*)
   | `TableApplyMethodT%`(typ)

;; ../../../../spec/2c1-runtime-type.watsup:131.22-131.36
syntax monofuncdef = 
   | `MonoFD%`(functyp)

;; ../../../../spec/2c1-runtime-type.watsup:133.22-133.58
syntax polyfuncdef = 
   | `PolyFD%->%`((tparam*, tparam*), functyp)

;; ../../../../spec/2c1-runtime-type.watsup:135.18-135.43
syntax funcdef = 
   | `MonoFD%`(functyp)
   | `PolyFD%->%`((tparam*, tparam*), functyp)

;; ../../../../spec/2c1-runtime-type.watsup:147.18-147.37
syntax constyp = 
   | `ConsT%%`(paramtyp*, typ)

;; ../../../../spec/2c1-runtime-type.watsup:155.18-155.53
syntax consdef = 
   | `ConsD%->%`((tparam*, tparam*), constyp)

;; ../../../../spec/2c2-runtime-type-aux.watsup:7.1-7.25
def $is_base(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:8.1-8.29
   clause 0(typ) = true
      -- if typ <: basetyp
      -- let basetyp = typ as basetyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:9.1-10.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:12.1-12.25
def $is_prim(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:13.1-13.29
   clause 0(typ) = true
      -- if typ <: primtyp
      -- let primtyp = typ as primtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:14.1-15.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:17.1-17.26
def $is_voidt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:18.1-18.28
   clause 0(typ) = true
      -- if (typ = `VoidT`_primtyp() as typ)

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:19.1-20.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:22.1-22.25
def $is_errt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:23.1-23.26
   clause 0(typ) = true
      -- if (typ = `ErrT`_primtyp() as typ)

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:24.1-25.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:27.1-27.31
def $is_matchkindt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:28.1-28.38
   clause 0(typ) = true
      -- if (typ = `MatchKindT`_primtyp() as typ)

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:29.1-30.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:32.1-32.25
def $is_strt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:33.1-33.26
   clause 0(typ) = true
      -- if (typ = `StrT`_primtyp() as typ)

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:34.1-35.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:37.1-37.26
def $is_boolt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:38.1-38.28
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:39.1-40.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:42.1-42.24
def $is_num(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:43.1-43.27
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:44.1-45.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:47.1-47.25
def $is_intt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:48.1-48.26
   clause 0(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:49.1-50.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:52.1-52.26
def $is_fintt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:53.1-53.30
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:54.1-55.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:57.1-57.26
def $is_fbitt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:58.1-58.30
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:59.1-60.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:62.1-62.26
def $is_vbitt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:63.1-63.30
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `VBitT%`
      -- let `VBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:64.1-65.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:67.1-67.29
def $is_abstract(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:68.1-68.32
   clause 0(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:69.1-70.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:72.1-72.25
def $is_vart(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:73.1-73.28
   clause 0(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:74.1-75.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:77.1-77.26
def $is_spect(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:78.1-78.32
   clause 0(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(_polytypdef, _typ*{_typ <- _typ*}) = abstyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:79.1-80.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:82.1-82.24
def $is_def(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:83.1-83.27
   clause 0(typ) = true
      -- if typ <: deftyp
      -- let deftyp = typ as deftyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:84.1-85.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:87.1-87.26
def $is_alias(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:88.1-88.31
   clause 0(typ) = true
      -- if typ <: aliastyp
      -- let aliastyp = typ as aliastyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:89.1-90.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:92.1-92.25
def $is_deft(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:93.1-93.30
   clause 0(typ) = true
      -- if typ <: aliastyp
      -- let `DefT%%`_aliastyp(_id, _typ) = typ as aliastyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:94.1-95.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:97.1-97.25
def $is_data(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:98.1-98.29
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:99.1-100.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:102.1-102.25
def $is_newt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:103.1-103.30
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:104.1-105.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:107.1-107.26
def $is_enumt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:108.1-108.32
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:109.1-110.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:112.1-112.27
def $is_senumt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:113.1-113.36
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:114.1-115.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:117.1-117.26
def $is_listt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:118.1-118.30
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(_typ) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:119.1-120.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:122.1-122.27
def $is_tuplet(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:123.1-123.32
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(_typ*{_typ <- _typ*}) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:124.1-125.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:127.1-127.27
def $is_stackt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:128.1-128.34
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(_typ, _int) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:129.1-130.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:132.1-132.28
def $is_structt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:133.1-133.36
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:134.1-135.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:137.1-137.28
def $is_headert(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:138.1-138.36
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:139.1-140.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:142.1-142.27
def $is_uniont(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:143.1-143.34
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:144.1-145.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:147.1-147.24
def $is_obj(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:148.1-148.27
   clause 0(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:149.1-150.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:152.1-152.28
def $is_externt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:153.1-153.36
   clause 0(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, _map<fid, funcdef>) = objtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:154.1-155.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:157.1-157.28
def $is_parsert(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:158.1-158.36
   clause 0(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:159.1-160.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:162.1-162.29
def $is_controlt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:163.1-163.38
   clause 0(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:164.1-165.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:167.1-167.29
def $is_packaget(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:168.1-168.38
   clause 0(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, _typ*{_typ <- _typ*}) = objtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:169.1-170.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:172.1-172.27
def $is_tablet(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:173.1-173.34
   clause 0(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(_id, _typ) = objtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:174.1-175.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:177.1-177.26
def $is_synth(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:178.1-178.31
   clause 0(typ) = true
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:179.1-180.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:182.1-182.25
def $is_seqt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:183.1-183.28
   clause 0(typ) = true
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(_typ*{_typ <- _typ*}) = synthtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:184.1-185.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:187.1-187.28
def $is_recordt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:188.1-188.34
   clause 0(typ) = true
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp(_(member, typ)*{_(member, typ) <- _(member, typ)*}) = synthtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:189.1-190.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:192.1-192.25
def $is_sett(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:193.1-193.28
   clause 0(typ) = true
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(_typ) = synthtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:194.1-195.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:197.1-197.34
def $is_table_structt(typ) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:198.1-198.47
   clause 0(typ) = true
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = synthtyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:199.1-200.15
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:208.1-208.32
def $is_actiont(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:209.1-209.34
   clause 0(functyp) = true
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:210.1-211.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:213.1-213.36
def $is_externfunct(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:214.1-214.44
   clause 0(functyp) = true
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:215.1-216.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:218.1-218.30
def $is_funct(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:219.1-219.32
   clause 0(functyp) = true
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:220.1-221.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:223.1-223.39
def $is_builtinmethodt(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:224.1-224.50
   clause 0(functyp) = true
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:225.1-226.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:228.1-228.38
def $is_externmethodt(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:229.1-229.48
   clause 0(functyp) = true
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:230.1-231.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:233.1-233.46
def $is_externabstractmethodt(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:234.1-234.64
   clause 0(functyp) = true
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:235.1-236.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:238.1-238.43
def $is_parserapplymethodt(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:239.1-239.56
   clause 0(functyp) = true
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:240.1-241.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:243.1-243.44
def $is_controlapplymethodt(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:244.1-244.58
   clause 0(functyp) = true
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:245.1-246.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:248.1-248.42
def $is_tableapplymethodt(functyp) : bool =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:249.1-249.54
   clause 0(functyp) = true
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(_typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:250.1-251.15
   clause 1(functyp) = false
      -- otherwise

;; ../../../../spec/2c2-runtime-type-aux.watsup:255.1-255.45
def $get_params_functyp(functyp) : paramtyp* =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:256.1-256.43
   clause 0(functyp) = pt*{pt <- pt*}
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:257.1-257.49
   clause 1(functyp) = pt*{pt <- pt*}
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt*{pt <- pt*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:258.1-258.43
   clause 2(functyp) = pt*{pt <- pt*}
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt*{pt <- pt*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:259.1-259.51
   clause 3(functyp) = pt*{pt <- pt*}
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt*{pt <- pt*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:260.1-260.59
   clause 4(functyp) = pt*{pt <- pt*}
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt*{pt <- pt*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:261.1-261.54
   clause 5(functyp) = pt*{pt <- pt*}
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:262.1-262.55
   clause 6(functyp) = pt*{pt <- pt*}
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:263.1-263.52
   clause 7(functyp) = pt*{pt <- pt*}
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, _typ) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:264.1-264.51
   clause 8(functyp) = []
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(_typ) = functyp

;; ../../../../spec/2c2-runtime-type-aux.watsup:266.1-266.40
def $get_typ_ret_functyp(functyp) : typ =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:267.1-267.44
   clause 0(functyp) = `VoidT`_primtyp() as typ
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:268.1-268.54
   clause 1(functyp) = typ_r
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, typ_r) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:269.1-269.48
   clause 2(functyp) = typ_r
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, typ_r) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:270.1-270.56
   clause 3(functyp) = typ_r
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, typ_r) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:271.1-271.64
   clause 4(functyp) = typ_r
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, typ_r) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:272.1-272.55
   clause 5(functyp) = `VoidT`_primtyp() as typ
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:273.1-273.56
   clause 6(functyp) = `VoidT`_primtyp() as typ
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:274.1-274.57
   clause 7(functyp) = typ_r
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, typ_r) = functyp

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:275.1-275.58
   clause 8(functyp) = typ_r
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ_r) = functyp

;; ../../../../spec/2c2-runtime-type-aux.watsup:283.1-283.44
def $get_params_funcdef(funcdef) : paramtyp* =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:284.1-284.61
   clause 0(funcdef) = $get_params_functyp(ft)
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft) = funcdef as monofuncdef

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:285.1-285.66
   clause 1(funcdef) = $get_params_functyp(ft)
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef(_(tparam*, tparam*), ft) = funcdef as polyfuncdef

;; ../../../../spec/2c2-runtime-type-aux.watsup:287.1-288.39
def $get_typ_ret_funcdef(funcdef) : typ =

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:289.1-289.63
   clause 0(funcdef) = $get_typ_ret_functyp(ft)
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft) = funcdef as monofuncdef

   ;; ../../../../spec/2c2-runtime-type-aux.watsup:290.1-290.68
   clause 1(funcdef) = $get_typ_ret_functyp(ft)
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef(_(tparam*, tparam*), ft) = funcdef as polyfuncdef

;; ../../../../spec/2c3-runtime-type-subst.watsup:5.16-5.28
syntax theta = map<id, typ>

;; ../../../../spec/2c3-runtime-type-subst.watsup:7.1-7.30
def $free_typ(typ) : set<tid> =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:30.1-30.34
   clause 0(typ) = `{%}`_set<tid>([])
      -- if typ <: basetyp
      -- let basetyp = typ as basetyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:32.1-32.33
   clause 1(typ) = `{%}`_set<tid>([id])
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(id) = abstyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:34.1-36.56
   clause 2(typ') = $union_set<tid>(tidset_ptd, tidset_typs)
      -- if typ' <: abstyp
      -- let abstyp = typ' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd, typ*{typ <- typ*}) = abstyp
      -- let tidset_ptd = $free_typdef_poly(ptd)
      -- let tidset_typs = $unions_set<tid>($free_typ(typ)*{typ <- typ*})

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:38.1-38.43
   clause 3(typ') = $free_typ(typ)
      -- if typ' <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ) = typ' as aliastyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:40.1-40.43
   clause 4(typ') = $free_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:42.1-42.36
   clause 5(typ) = `{%}`_set<tid>([])
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:44.1-44.47
   clause 6(typ') = $free_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:46.1-46.42
   clause 7(typ') = $free_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:48.1-48.63
   clause 8(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:50.1-50.45
   clause 9(typ') = $free_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, _int) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:52.1-52.71
   clause 10(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:54.1-54.71
   clause 11(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:56.1-56.70
   clause 12(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:58.1-58.82
   clause 13(typ) = $unions_set<tid>($free_funcdef(fd)*{fd <- fd*})
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(_fid, fd)*{_fid <- _fid*, fd <- fd*})) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:60.1-60.82
   clause 14(typ) = $unions_set<tid>($free_funcdef(fd)*{fd <- fd*})
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(_fid, fd)*{_fid <- _fid*, fd <- fd*})) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:62.1-63.26
   clause 15(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, pt*{pt <- pt*}) = objtyp
      -- (let `%%%%`_paramtyp(_id', _dir, typ, _exprIL?{_exprIL <- _exprIL?}) = pt)*{_dir <- _dir*, _exprIL? <- _exprIL?*, _id' <- _id'*, pt <- pt*, typ <- typ*}

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:65.1-66.26
   clause 16(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, pt*{pt <- pt*}) = objtyp
      -- (let `%%%%`_paramtyp(_id', _dir, typ, _exprIL?{_exprIL <- _exprIL?}) = pt)*{_dir <- _dir*, _exprIL? <- _exprIL?*, _id' <- _id'*, pt <- pt*, typ <- typ*}

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:68.1-68.67
   clause 17(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, typ*{typ <- typ*}) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:70.1-70.45
   clause 18(typ') = $free_typ(typ)
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(_id, typ) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:72.1-72.35
   clause 19(typ) = `{%}`_set<tid>([])
      -- if (typ = `DefaultT`_synthtyp() as typ)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:74.1-74.61
   clause 20(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ*{typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:76.1-76.68
   clause 21(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ*{typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:78.1-78.69
   clause 22(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((_member, typ)*{_member <- _member*, typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:80.1-80.76
   clause 23(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((_member, typ)*{_member <- _member*, typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:82.1-82.35
   clause 24(typ) = `{%}`_set<tid>([])
      -- if (typ = `InvalidT`_synthtyp() as typ)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:84.1-84.41
   clause 25(typ') = $free_typ(typ)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:86.1-86.33
   clause 26(typ) = `{%}`_set<tid>([])
      -- if (typ = `StateT`_synthtyp() as typ)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:88.1-88.41
   clause 27(typ) = `{%}`_set<tid>([])
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableEnumT%%`
      -- let `TableEnumT%%`_synthtyp(_id, _member*{_member <- _member*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:90.1-90.76
   clause 28(typ') = $unions_set<tid>($free_typ(typ)*{typ <- typ*})
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:92.1-92.31
   clause 29(typ) = `{%}`_set<tid>([])
      -- if (typ = `AnyT`_synthtyp() as typ)

;; ../../../../spec/2c3-runtime-type-subst.watsup:8.1-8.45
def $free_typdef_poly(polytypdef) : set<tid> =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:98.1-101.56
   clause 0(`PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ)) = $diff_set<tid>(tidset_typ, tidset_tparams)
      -- let tidset_typ = $free_typ(typ)
      -- let tidset_tparams = `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*})

;; ../../../../spec/2c3-runtime-type-subst.watsup:9.1-9.40
def $free_paramtyp(paramtyp) : set<tid> =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:107.1-107.47
   clause 0(`%%%%`_paramtyp(_id, _dir, typ, _exprIL?{_exprIL <- _exprIL?})) = $free_typ(typ)

;; ../../../../spec/2c3-runtime-type-subst.watsup:10.1-10.38
def $free_functyp(functyp) : set<tid> =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:113.1-114.44
   clause 0(functyp) = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:116.1-119.41
   clause 1(functyp) = $union_set<tid>(tidset_params, tidset_return)
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let tidset_params = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- let tidset_return = $free_typ(typ_r)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:121.1-124.41
   clause 2(functyp) = $union_set<tid>(tidset_params, tidset_return)
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let tidset_params = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- let tidset_return = $free_typ(typ_r)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:126.1-129.41
   clause 3(functyp) = $union_set<tid>(tidset_params, tidset_return)
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let tidset_params = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- let tidset_return = $free_typ(typ_r)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:131.1-134.41
   clause 4(functyp) = $union_set<tid>(tidset_params, tidset_return)
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let tidset_params = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- let tidset_return = $free_typ(typ_r)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:136.1-139.41
   clause 5(functyp) = $union_set<tid>(tidset_params, tidset_return)
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let tidset_params = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- let tidset_return = $free_typ(typ_r)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:141.1-142.44
   clause 6(functyp) = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:144.1-145.44
   clause 7(functyp) = $unions_set<tid>($free_paramtyp(pt)*{pt <- pt*})
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:147.1-147.58
   clause 8(functyp) = $free_typ(typ)
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ) = functyp

;; ../../../../spec/2c3-runtime-type-subst.watsup:11.1-11.38
def $free_funcdef(funcdef) : set<tid> =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:153.1-153.49
   clause 0(funcdef) = $free_functyp(ft)
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft) = funcdef as monofuncdef

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:155.1-158.56
   clause 1(funcdef) = $diff_set<tid>(tidset_ft, tidset_tparams)
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ft) = funcdef as polyfuncdef
      -- let tidset_ft = $free_functyp(ft)
      -- let tidset_tparams = `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*})

;; ../../../../spec/2c3-runtime-type-subst.watsup:13.1-13.33
def $subst_typ(theta, typ) : typ =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:164.1-164.36
   clause 0(set<pair<id, typ>>, typ) = typ
      -- if (set<pair<id, typ>> = `{%}`_set<pair<id, typ>>([]))

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:165.1-166.15
   clause 1(theta, typ) = $subst_typ'(theta, typ)
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:14.1-14.34
def $subst_typ'(theta, typ) : typ =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:168.1-170.44
   clause 0(theta, typ') = typ
      -- if typ' <: abstyp
      -- let abstyp = typ' as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(id) = abstyp
      -- if $in_set<id>(id, $dom_map<id, typ>(theta))
      -- let typ''?{typ'' <- typ''?} = $find_map<id, typ>(theta, id)
      -- if typ''?{typ'' <- typ''?} matches (_)
      -- let ?(typ) = typ''?{typ'' <- typ''?}

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:172.1-175.42
   clause 1(theta, typ'') = `SpecT%%`_abstyp(ptd', typ'*{typ' <- typ'*}) as typ
      -- if typ'' <: abstyp
      -- let abstyp = typ'' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd, typ*{typ <- typ*}) = abstyp
      -- let ptd' = $subst_typdef_poly'(theta, ptd)
      -- (let typ' = $subst_typ'(theta, typ))*{typ <- typ*, typ' <- typ'*}

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:177.1-178.28
   clause 2(theta, typ') = $subst_typ'(theta, typ)
      -- if typ' <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ) = typ' as aliastyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:180.1-181.36
   clause 3(theta, typ') = `NewT%%`_datatyp(id, $subst_typ'(theta, typ)) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(id, typ) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:183.1-184.53
   clause 4(theta, typ') = `SEnumT%%%`_datatyp(id, $subst_typ'(theta, typ), (member, val)*{member <- member*, val <- val*}) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id, typ, (member, val)*{member <- member*, val <- val*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:186.1-187.34
   clause 5(theta, typ') = `ListT%`_datatyp($subst_typ'(theta, typ)) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:189.1-190.36
   clause 6(theta, typ') = `TupleT%`_datatyp($subst_typ'(theta, typ)*{typ <- typ*}) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:192.1-193.39
   clause 7(theta, typ') = `StackT%%`_datatyp($subst_typ'(theta, typ), int) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, int) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:195.1-196.50
   clause 8(theta, typ') = `StructT%%`_datatyp(id, (member, $subst_typ'(theta, typ))*{member <- member*, typ <- typ*}) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:198.1-199.50
   clause 9(theta, typ') = `HeaderT%%`_datatyp(id, (member, $subst_typ'(theta, typ))*{member <- member*, typ <- typ*}) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:201.1-202.49
   clause 10(theta, typ') = `UnionT%%`_datatyp(id, (member, $subst_typ'(theta, typ))*{member <- member*, typ <- typ*}) as typ
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:204.1-207.63
   clause 11(theta, typ) = `ExternT%%`_objtyp(id, fmap') as typ
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id, fmap) = objtyp
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid, funcdef)*{fid <- fid*, funcdef <- funcdef*}) = fmap
      -- let fmap' = `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid, $subst_funcdef'(theta, funcdef))*{fid <- fid*, funcdef <- funcdef*})

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:209.1-210.44
   clause 12(theta, typ) = `ParserT%%`_objtyp(id, $subst_paramtyp'(theta, pt)*{pt <- pt*}) as typ
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(id, pt*{pt <- pt*}) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:212.1-213.43
   clause 13(theta, typ) = `ControlT%%`_objtyp(id, $subst_paramtyp'(theta, pt)*{pt <- pt*}) as typ
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(id, pt*{pt <- pt*}) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:215.1-216.41
   clause 14(theta, typ') = `PackageT%%`_objtyp(id, $subst_typ'(theta, typ)*{typ <- typ*}) as typ
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(id, typ*{typ <- typ*}) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:218.1-219.38
   clause 15(theta, typ') = `TableT%%`_objtyp(id, $subst_typ'(theta, typ)) as typ
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(id, typ) = objtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:221.1-222.55
   clause 16(theta, typ') = `TableStructT%%`_synthtyp(id, (member, $subst_typ'(theta, typ))*{member <- member*, typ <- typ*}) as typ
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(id, (member, typ)*{member <- member*, typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:224.1-225.34
   clause 17(theta, typ') = `SeqT%`_synthtyp($subst_typ'(theta, typ)*{typ <- typ*}) as typ
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ*{typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:227.1-228.41
   clause 18(theta, typ') = `SeqDefaultT%`_synthtyp($subst_typ'(theta, typ)*{typ <- typ*}) as typ
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ*{typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:230.1-231.47
   clause 19(theta, typ') = `RecordT%`_synthtyp((member, $subst_typ'(theta, typ))*{member <- member*, typ <- typ*}) as typ
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member, typ)*{member <- member*, typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:233.1-234.54
   clause 20(theta, typ') = `RecordDefaultT%`_synthtyp((member, $subst_typ'(theta, typ))*{member <- member*, typ <- typ*}) as typ
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member, typ)*{member <- member*, typ <- typ*}) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:236.1-237.33
   clause 21(theta, typ') = `SetT%`_synthtyp($subst_typ'(theta, typ)) as typ
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:239.1-240.15
   clause 22(theta, typ) = typ
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:15.1-15.55
def $subst_typdef_poly(theta, polytypdef) : polytypdef =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:246.1-246.44
   clause 0(set<pair<id, typ>>, ptd) = ptd
      -- if (set<pair<id, typ>> = `{%}`_set<pair<id, typ>>([]))

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:247.1-248.15
   clause 1(theta, ptd) = $subst_typdef_poly'(theta, ptd)
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:16.1-16.56
def $subst_typdef_poly'(theta, polytypdef) : polytypdef =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:250.1-267.41
   clause 0(theta, `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ)) = `PolyD%->%`_polytypdef((tparam''*{tparam'' <- tparam''*}, tparam''_hidden*{tparam''_hidden <- tparam''_hidden*}), typ')
      -- let `{%}`_set<tid>(tid_free*{tid_free <- tid_free*}) = $diff_set<tid>($free_typ(typ), `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<tid, typ>(theta, tid_free))*{tid_free <- tid_free*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_free) = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_free <- typ_free*}
      -- let tidset_capture = $unions_set<tid>($free_typ(typ_free)*{typ_free <- typ_free*})
      -- let tparam'*{tparam' <- tparam'*} = $fresh_tids(|tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}|)
      -- (if ~$in_set<tid>(tparam', tidset_capture))*{tparam' <- tparam'*}
      -- let tparam''*{tparam'' <- tparam''*} = tparam'*{tparam' <- tparam'*}[0 : |tparam*{tparam <- tparam*}|]
      -- let tparam''_hidden*{tparam''_hidden <- tparam''_hidden*} = tparam'*{tparam' <- tparam'*}[|tparam*{tparam <- tparam*}| : |tparam_hidden*{tparam_hidden <- tparam_hidden*}|]
      -- let theta' = $adds_map<tid, typ>(theta, tparam*{tparam <- tparam*}, `VarT%`_abstyp(tparam'') as typ*{tparam'' <- tparam''*})
      -- let theta'' = $adds_map<tid, typ>(theta', tparam_hidden*{tparam_hidden <- tparam_hidden*}, `VarT%`_abstyp(tparam''_hidden) as typ*{tparam''_hidden <- tparam''_hidden*})
      -- let typ' = $subst_typ'(theta'', typ)

;; ../../../../spec/2c3-runtime-type-subst.watsup:17.1-17.48
def $subst_paramtyp(theta, paramtyp) : paramtyp =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:273.1-273.39
   clause 0(set<pair<id, typ>>, pt) = pt
      -- if (set<pair<id, typ>> = `{%}`_set<pair<id, typ>>([]))

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:274.1-275.15
   clause 1(theta, pt) = $subst_paramtyp'(theta, pt)
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:18.1-18.49
def $subst_paramtyp'(theta, paramtyp) : paramtyp =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:277.1-278.43
   clause 0(theta, `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?})) = `%%%%`_paramtyp(id, dir, $subst_typ'(theta, typ), exprIL?{exprIL <- exprIL?})

;; ../../../../spec/2c3-runtime-type-subst.watsup:19.1-19.45
def $subst_funcdef(theta, funcdef) : funcdef =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:284.1-284.48
   clause 0(set<pair<id, typ>>, funcdef) = funcdef
      -- if (set<pair<id, typ>> = `{%}`_set<pair<id, typ>>([]))

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:285.1-286.15
   clause 1(theta, funcdef) = $subst_funcdef'(theta, funcdef)
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:20.1-20.46
def $subst_funcdef'(theta, funcdef) : funcdef =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:288.1-289.38
   clause 0(theta, funcdef) = `MonoFD%`_monofuncdef($subst_functyp'(theta, ft)) as funcdef
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft) = funcdef as monofuncdef

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:291.1-307.43
   clause 1(theta, funcdef) = `PolyFD%->%`_polyfuncdef((tparam''*{tparam'' <- tparam''*}, tparam''_hidden*{tparam''_hidden <- tparam''_hidden*}), ft') as funcdef
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ft) = funcdef as polyfuncdef
      -- let `{%}`_set<tid>(tid_free*{tid_free <- tid_free*}) = $diff_set<tid>($free_functyp(ft), `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}))
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_free))*{tid_free <- tid_free*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(typ_free) = typ?{typ <- typ?})*{typ? <- typ?*, typ_free <- typ_free*}
      -- let tidset_capture = $unions_set<tid>($free_typ(typ_free)*{typ_free <- typ_free*})
      -- let tparam'*{tparam' <- tparam'*} = $fresh_tids(|tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}|)
      -- (if ~$in_set<tid>(tparam', tidset_capture))*{tparam' <- tparam'*}
      -- let tparam''*{tparam'' <- tparam''*} = tparam'*{tparam' <- tparam'*}[0 : |tparam*{tparam <- tparam*}|]
      -- let tparam''_hidden*{tparam''_hidden <- tparam''_hidden*} = tparam'*{tparam' <- tparam'*}[|tparam*{tparam <- tparam*}| : |tparam_hidden*{tparam_hidden <- tparam_hidden*}|]
      -- let theta' = $adds_map<tid, typ>(theta, tparam*{tparam <- tparam*}, `VarT%`_abstyp(tparam') as typ*{tparam' <- tparam'*})
      -- let theta'' = $adds_map<tid, typ>(theta', tparam_hidden*{tparam_hidden <- tparam_hidden*}, `VarT%`_abstyp(tparam''_hidden) as typ*{tparam''_hidden <- tparam''_hidden*})
      -- let ft' = $subst_functyp'(theta'', ft)

;; ../../../../spec/2c3-runtime-type-subst.watsup:21.1-21.45
def $subst_functyp(theta, functyp) : functyp =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:313.1-313.48
   clause 0(set<pair<id, typ>>, functyp) = functyp
      -- if (set<pair<id, typ>> = `{%}`_set<pair<id, typ>>([]))

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:314.1-315.15
   clause 1(theta, functyp) = $subst_functyp'(theta, functyp)
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:22.1-22.46
def $subst_functyp'(theta, functyp) : functyp =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:317.1-318.72
   clause 0(theta, functyp) = `BuiltinMethodT%%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*}, $subst_typ'(theta, typ))
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, typ) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:320.1-321.41
   clause 1(theta, functyp) = `ActionT%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*})
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:323.1-324.52
   clause 2(theta, functyp) = `ParserApplyMethodT%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*})
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:326.1-327.53
   clause 3(theta, functyp) = `ControlApplyMethodT%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*})
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:329.1-330.46
   clause 4(theta, functyp) = `TableApplyMethodT%`_functyp($subst_typ'(theta, typ))
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:332.1-333.69
   clause 5(theta, functyp) = `ExternFuncT%%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*}, $subst_typ'(theta, typ))
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt*{pt <- pt*}, typ) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:335.1-336.63
   clause 6(theta, functyp) = `FuncT%%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*}, $subst_typ'(theta, typ))
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt*{pt <- pt*}, typ) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:338.1-339.71
   clause 7(theta, functyp) = `ExternMethodT%%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*}, $subst_typ'(theta, typ))
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt*{pt <- pt*}, typ) = functyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:341.1-342.79
   clause 8(theta, functyp) = `ExternAbstractMethodT%%`_functyp($subst_paramtyp'(theta, pt)*{pt <- pt*}, $subst_typ'(theta, typ))
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt*{pt <- pt*}, typ) = functyp

;; ../../../../spec/2c3-runtime-type-subst.watsup:23.1-23.45
def $subst_constyp(theta, constyp) : constyp =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:348.1-348.48
   clause 0(set<pair<id, typ>>, constyp) = constyp
      -- if (set<pair<id, typ>> = `{%}`_set<pair<id, typ>>([]))

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:349.1-350.15
   clause 1(theta, constyp) = $subst_constyp'(theta, constyp)
      -- otherwise

;; ../../../../spec/2c3-runtime-type-subst.watsup:24.1-24.46
def $subst_constyp'(theta, constyp) : constyp =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:352.1-353.63
   clause 0(theta, `ConsT%%`_constyp(pt*{pt <- pt*}, typ)) = `ConsT%%`_constyp($subst_paramtyp'(theta, pt)*{pt <- pt*}, $subst_typ'(theta, typ))

;; ../../../../spec/2c3-runtime-type-subst.watsup:363.1-363.43
def $specialize_typdef(typdef, typ*) : typ =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:365.1-365.45
   clause 0(typdef, typ'*{typ' <- typ'*}) = typ
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef
      -- if typ'*{typ' <- typ'*} matches []

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:366.1-369.41
   clause 1(typdef, typ_a*{typ_a <- typ_a*}) = $subst_typ(theta, typ)
      -- if typdef <: polytypdef
      -- let `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ) = typdef as polytypdef
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- let theta = `{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', typ_a)*{tparam' <- tparam'*, typ_a <- typ_a*})

;; ../../../../spec/2c3-runtime-type-subst.watsup:375.1-375.57
def $specialize_funcdef(funcdef, typ*) : (functyp, tid*) =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:377.1-377.52
   clause 0(funcdef, typ*{typ <- typ*}) = (ft, [])
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft) = funcdef as monofuncdef
      -- if typ*{typ <- typ*} matches []

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:379.1-382.30
   clause 1(funcdef, typ_a*{typ_a <- typ_a*}) = ($subst_functyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', typ_a)*{tparam' <- tparam'*, typ_a <- typ_a*}), ft), [])
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ft) = funcdef as polyfuncdef
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- if (|tparam'*{tparam' <- tparam'*}| = |typ_a*{typ_a <- typ_a*}|)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:384.1-389.45
   clause 2(funcdef, typ_a*{typ_a <- typ_a*}) = ($subst_functyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', `VarT%`_abstyp(tid_fresh) as typ)*{tid_fresh <- tid_fresh*, tparam' <- tparam'*}), ft), tid_fresh*{tid_fresh <- tid_fresh*})
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ft) = funcdef as polyfuncdef
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- if ((|typ_a*{typ_a <- typ_a*}| = 0) /\ (|tparam'*{tparam' <- tparam'*}| > 0))
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $fresh_tids(|tparam'*{tparam' <- tparam'*}|)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:391.1-398.46
   clause 3(funcdef, typ_a*{typ_a <- typ_a*}) = ($subst_functyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', typ_a')*{tparam' <- tparam'*, typ_a' <- typ_a'*}), ft), tid_fresh*{tid_fresh <- tid_fresh*})
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ft) = funcdef as polyfuncdef
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- if (((|typ_a*{typ_a <- typ_a*}| > 0) /\ (|tparam*{tparam <- tparam*}| = |typ_a*{typ_a <- typ_a*}|)) /\ (|tparam_hidden*{tparam_hidden <- tparam_hidden*}| > 0))
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $fresh_tids(|tparam_hidden*{tparam_hidden <- tparam_hidden*}|)
      -- let typ_a'*{typ_a' <- typ_a'*} = typ_a*{typ_a <- typ_a*} ++ `VarT%`_abstyp(tid_fresh) as typ*{tid_fresh <- tid_fresh*}

;; ../../../../spec/2c3-runtime-type-subst.watsup:404.1-404.57
def $specialize_consdef(consdef, typ*) : (constyp, tid*) =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:406.1-409.30
   clause 0(`ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ct), typ_a*{typ_a <- typ_a*}) = ($subst_constyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', typ_a)*{tparam' <- tparam'*, typ_a <- typ_a*}), ct), [])
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- if (|tparam'*{tparam' <- tparam'*}| = |typ_a*{typ_a <- typ_a*}|)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:411.1-416.45
   clause 1(`ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ct), typ_a*{typ_a <- typ_a*}) = ($subst_constyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', `VarT%`_abstyp(tid_fresh) as typ)*{tid_fresh <- tid_fresh*, tparam' <- tparam'*}), ct), tid_fresh*{tid_fresh <- tid_fresh*})
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- if ((|typ_a*{typ_a <- typ_a*}| = 0) /\ (|tparam'*{tparam' <- tparam'*}| > 0))
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $fresh_tids(|tparam'*{tparam' <- tparam'*}|)

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:418.1-425.46
   clause 2(`ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ct), typ_a*{typ_a <- typ_a*}) = ($subst_constyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', typ_a')*{tparam' <- tparam'*, typ_a' <- typ_a'*}), ct), tid_fresh*{tid_fresh <- tid_fresh*})
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- if (((|typ_a*{typ_a <- typ_a*}| > 0) /\ (|tparam*{tparam <- tparam*}| = |typ_a*{typ_a <- typ_a*}|)) /\ (|tparam_hidden*{tparam_hidden <- tparam_hidden*}| > 0))
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $fresh_tids(|tparam_hidden*{tparam_hidden <- tparam_hidden*}|)
      -- let typ_a'*{typ_a' <- typ_a'*} = typ_a*{typ_a <- typ_a*} ++ `VarT%`_abstyp(tid_fresh) as typ*{tid_fresh <- tid_fresh*}

;; ../../../../spec/2c3-runtime-type-subst.watsup:431.1-431.26
def $canon_typ(typ) : typ =

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:433.1-434.46
   clause 0(typ') = $canon_typ(typ)
      -- if typ' <: abstyp
      -- let abstyp = typ' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd, typ_a*{typ_a <- typ_a*}) = abstyp
      -- let typ = $specialize_typdef(ptd as typdef, typ_a*{typ_a <- typ_a*})

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:435.1-435.45
   clause 1(typ') = $canon_typ(typ)
      -- if typ' <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ) = typ' as aliastyp

   ;; ../../../../spec/2c3-runtime-type-subst.watsup:436.1-437.15
   clause 2(typ) = typ
      -- otherwise

;; ../../../../spec/2c4-runtime-type-util.watsup:7.1-7.28
def $is_nominal(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:10.1-10.53
   clause 0(typ) = $is_nominal'($canon_typ(typ))

;; ../../../../spec/2c4-runtime-type-util.watsup:8.1-8.29
def $is_nominal'(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:11.1-11.34
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:12.1-12.35
   clause 1(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:13.1-13.38
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:14.1-14.37
   clause 3(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:15.1-15.37
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:16.1-16.36
   clause 5(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:17.1-17.37
   clause 6(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, _map<fid, funcdef>) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:18.1-18.36
   clause 7(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(_id, _typ) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:19.1-20.15
   clause 8(typ) = false
      -- otherwise

;; ../../../../spec/2c4-runtime-type-util.watsup:24.1-24.29
def $is_deftable(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:27.1-27.55
   clause 0(typ) = $is_deftable'($canon_typ(typ))

;; ../../../../spec/2c4-runtime-type-util.watsup:25.1-25.30
def $is_deftable'(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:28.1-28.31
   clause 0(typ) = true
      -- if (typ = `ErrT`_primtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:29.1-29.31
   clause 1(typ) = true
      -- if (typ = `StrT`_primtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:30.1-30.32
   clause 2(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:31.1-31.31
   clause 3(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:32.1-32.34
   clause 4(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:33.1-33.34
   clause 5(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:34.1-34.34
   clause 6(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `VBitT%`
      -- let `VBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:35.1-35.52
   clause 7(typ) = $is_deftable(typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ') = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:36.1-36.36
   clause 8(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:37.1-37.56
   clause 9(typ) = $is_deftable(typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ', _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:38.1-39.28
   clause 10(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ'*{typ' <- typ'*}) = datatyp
      -- (if $is_deftable(typ'))*{typ' <- typ'*}

   ;; ../../../../spec/2c4-runtime-type-util.watsup:40.1-40.52
   clause 11(typ') = $is_deftable(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, _int) = datatyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:41.1-42.28
   clause 12(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ')*{_member <- _member*, typ' <- typ'*}) = datatyp
      -- (if $is_deftable(typ'))*{typ' <- typ'*}

   ;; ../../../../spec/2c4-runtime-type-util.watsup:43.1-44.28
   clause 13(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ')*{_member <- _member*, typ' <- typ'*}) = datatyp
      -- (if $is_deftable(typ'))*{typ' <- typ'*}

   ;; ../../../../spec/2c4-runtime-type-util.watsup:45.1-46.28
   clause 14(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, (_member, typ')*{_member <- _member*, typ' <- typ'*}) = datatyp
      -- (if $is_deftable(typ'))*{typ' <- typ'*}

   ;; ../../../../spec/2c4-runtime-type-util.watsup:47.1-48.15
   clause 15(typ) = false
      -- otherwise

;; ../../../../spec/2c4-runtime-type-util.watsup:52.1-52.30
def $is_equalable(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:55.1-55.57
   clause 0(typ) = $is_equalable'($canon_typ(typ))

;; ../../../../spec/2c4-runtime-type-util.watsup:53.1-53.31
def $is_equalable'(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:56.1-56.34
   clause 0(typ) = false
      -- if (typ = `VoidT`_primtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:57.1-57.35
   clause 1(typ) = false
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:58.1-58.40
   clause 2(typ) = false
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, _map<fid, funcdef>) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:59.1-59.40
   clause 3(typ) = false
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:60.1-60.41
   clause 4(typ) = false
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:61.1-61.41
   clause 5(typ) = false
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, _typ*{_typ <- _typ*}) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:62.1-62.39
   clause 6(typ) = false
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(_id, _typ) = objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:63.1-63.75
   clause 7(typ) = ($is_seqt(synthtyp as typ) \/ $is_recordt(synthtyp as typ))
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:64.1-65.15
   clause 8(typ) = true
      -- otherwise

;; ../../../../spec/2c4-runtime-type-util.watsup:69.1-69.31
def $is_assignable(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:72.1-72.59
   clause 0(typ) = $is_assignable'($canon_typ(typ))

;; ../../../../spec/2c4-runtime-type-util.watsup:70.1-70.32
def $is_assignable'(typ) : bool =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:73.1-73.35
   clause 0(typ) = false
      -- if (typ = `VoidT`_primtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:74.1-74.34
   clause 1(typ) = false
      -- if (typ = `StrT`_primtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:75.1-75.34
   clause 2(typ) = false
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2c4-runtime-type-util.watsup:76.1-76.36
   clause 3(typ) = false
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:77.1-77.38
   clause 4(typ) = false
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:78.1-79.15
   clause 5(typ) = true
      -- otherwise

;; ../../../../spec/2c4-runtime-type-util.watsup:85.1-85.26
def $get_width(typ) : nat =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:88.1-88.51
   clause 0(typ) = $get_width'($canon_typ(typ))

;; ../../../../spec/2c4-runtime-type-util.watsup:86.1-86.27
def $get_width'(typ) : nat =

   ;; ../../../../spec/2c4-runtime-type-util.watsup:89.1-89.29
   clause 0(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:90.1-90.29
   clause 1(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:91.1-91.29
   clause 2(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `VBitT%`
      -- let `VBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2c4-runtime-type-util.watsup:92.1-92.46
   clause 3(typ') = $get_width(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

;; ../../../../spec/2c5-runtime-type-alpha.watsup:5.1-7.20
relation Type_alpha: `%~~%`(typ, typ)

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:29.1-30.21
   rule basetyp: `%~~%`(typ, typ')
      -- if typ <: basetyp
      -- let basetyp = typ as basetyp
      -- if typ' <: basetyp
      -- let basetyp' = typ' as basetyp
      -- if (basetyp = basetyp')

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:32.1-33.25
   rule vart: `%~~%`(typ, typ')
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(id) = abstyp
      -- if typ' <: abstyp
      -- let abstyp' = typ' as abstyp
      -- if abstyp' matches `VarT%`
      -- let `VarT%`_abstyp(id') = abstyp'
      -- if (id = id')

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:35.1-44.35
   rule spect-nominal: `%~~%`(typ, typ')
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_a, typ_a*{typ_a <- typ_a*}) = abstyp
      -- if typ' <: abstyp
      -- let abstyp' = typ' as abstyp
      -- if abstyp' matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_b, typ_b*{typ_b <- typ_b*}) = abstyp'
      -- let typ_a' = $specialize_typdef(ptd_a as typdef, typ_a*{typ_a <- typ_a*})
      -- let typ_b' = $specialize_typdef(ptd_b as typdef, typ_b*{typ_b <- typ_b*})
      -- if Type_alpha: `%~~%`(typ_a', typ_b') holds
      -- if ($is_nominal(typ_a') /\ $is_nominal(typ_b'))
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:46.1-54.53
   rule spect-structural: `%~~%`(typ, typ')
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_a, typ_a*{typ_a <- typ_a*}) = abstyp
      -- if typ' <: abstyp
      -- let abstyp' = typ' as abstyp
      -- if abstyp' matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_b, typ_b*{typ_b <- typ_b*}) = abstyp'
      -- let typ_a' = $specialize_typdef(ptd_a as typdef, typ_a*{typ_a <- typ_a*})
      -- let typ_b' = $specialize_typdef(ptd_b as typdef, typ_b*{typ_b <- typ_b*})
      -- if Type_alpha: `%~~%`(typ_a', typ_b') holds
      -- if (~$is_nominal(typ_a') /\ ~$is_nominal(typ_b'))

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:56.1-58.32
   rule deft-left: `%~~%`(typ, typ_b)
      -- if typ <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ_a) = typ as aliastyp
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:60.1-62.32
   rule deft-right: `%~~%`(typ_a, typ)
      -- if typ <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ_b) = typ as aliastyp
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:64.1-66.32
   rule newt: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(id, typ_a) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `NewT%%`
      -- let `NewT%%`_datatyp(id', typ_b) = datatyp'
      -- if (id = id')
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:68.1-69.43
   rule enumt: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(id, member*{member <- member*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `EnumT%%`
      -- let `EnumT%%`_datatyp(id', member'*{member' <- member'*}) = datatyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:71.1-74.25
   rule senumt: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id, typ_a, (member, val_a)*{member <- member*, val_a <- val_a*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id', typ_b, (member', val_b)*{member' <- member'*, val_b <- val_b*}) = datatyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds
      -- (if (val_a = val_b))*{val_a <- val_a*, val_b <- val_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:76.1-78.32
   rule listt: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ_a) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `ListT%`
      -- let `ListT%`_datatyp(typ_b) = datatyp'
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:80.1-82.35
   rule tuplet: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_a*{typ_a <- typ_a*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_b*{typ_b <- typ_b*}) = datatyp'
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:84.1-86.32
   rule stackt: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_a, i_size) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b, i_size') = datatyp'
      -- if (i_size = i_size')
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:88.1-90.35
   rule structt: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, (member, typ_a)*{member <- member*, typ_a <- typ_a*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `StructT%%`
      -- let `StructT%%`_datatyp(id', (member', typ_b)*{member' <- member'*, typ_b <- typ_b*}) = datatyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:92.1-94.35
   rule headert: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member, typ_a)*{member <- member*, typ_a <- typ_a*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id', (member', typ_b)*{member' <- member'*, typ_b <- typ_b*}) = datatyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:96.1-98.35
   rule uniont: `%~~%`(typ, typ')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id, (member, typ_a)*{member <- member*, typ_a <- typ_a*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id', (member', typ_b)*{member' <- member'*, typ_b <- typ_b*}) = datatyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:100.1-109.38
   rule externt: `%~~%`(typ, typ')
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id, fmap_a) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id', fmap_b) = objtyp'
      -- if (id = id')
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid_a, fd_a)*{fd_a <- fd_a*, fid_a <- fid_a*}) = fmap_a
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid_b, fd_b)*{fd_b <- fd_b*, fid_b <- fid_b*}) = fmap_b
      -- if $eq_set<fid>(`{%}`_set<fid>(fid_a*{fid_a <- fid_a*}), `{%}`_set<fid>(fid_b*{fid_b <- fid_b*}))
      -- (let funcdef?{funcdef <- funcdef?} = $find_map<fid, funcdef>(fmap_a, fid_a))*{fid_a <- fid_a*, funcdef? <- funcdef?*}
      -- (if funcdef?{funcdef <- funcdef?} matches (_))*{funcdef? <- funcdef?*}
      -- (let ?(fd_a') = funcdef?{funcdef <- funcdef?})*{fd_a' <- fd_a'*, funcdef? <- funcdef?*}
      -- (let funcdef'?{funcdef' <- funcdef'?} = $find_map<fid, funcdef>(fmap_b, fid_a))*{fid_a <- fid_a*, funcdef'? <- funcdef'?*}
      -- (if funcdef'?{funcdef' <- funcdef'?} matches (_))*{funcdef'? <- funcdef'?*}
      -- (let ?(fd_b') = funcdef'?{funcdef' <- funcdef'?})*{fd_b' <- fd_b'*, funcdef'? <- funcdef'?*}
      -- (if FuncDef_alpha: `%~~%`(fd_a', fd_b') holds)*{fd_a' <- fd_a'*, fd_b' <- fd_b'*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:111.1-117.35
   rule parsert: `%~~%`(typ, typ')
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, pt_a*{pt_a <- pt_a*}) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id', pt_b*{pt_b <- pt_b*}) = objtyp'
      -- (let `%%%%`_paramtyp(_id'', dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id'' <- _id''*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id''', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id''' <- _id'''*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:119.1-125.35
   rule controlt: `%~~%`(typ, typ')
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, pt_a*{pt_a <- pt_a*}) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id', pt_b*{pt_b <- pt_b*}) = objtyp'
      -- (let `%%%%`_paramtyp(_id'', dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id'' <- _id''*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id''', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id''' <- _id'''*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:127.1-129.35
   rule packaget: `%~~%`(typ, typ')
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, typ_a*{typ_a <- typ_a*}) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id', typ_b*{typ_b <- typ_b*}) = objtyp'
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:131.1-133.32
   rule tablet: `%~~%`(typ, typ')
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(id, typ_a) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `TableT%%`
      -- let `TableT%%`_objtyp(id', typ_b) = objtyp'
      -- if (id = id')
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:135.1-136.23
   rule defaultt: `%~~%`(typ, typ')
      -- if (typ = `DefaultT`_synthtyp() as typ)
      -- if (typ' = `DefaultT`_synthtyp() as typ)

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:138.1-140.35
   rule seqt: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_b*{typ_b <- typ_b*}) = synthtyp'
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:142.1-144.35
   rule seqdefaultt: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_b*{typ_b <- typ_b*}) = synthtyp'
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:146.1-148.35
   rule recordt: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member, typ_a)*{member <- member*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `RecordT%`
      -- let `RecordT%`_synthtyp((member', typ_b)*{member' <- member'*, typ_b <- typ_b*}) = synthtyp'
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:150.1-152.35
   rule recorddefaultt: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member, typ_a)*{member <- member*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member', typ_b)*{member' <- member'*, typ_b <- typ_b*}) = synthtyp'
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:154.1-155.23
   rule invalidt: `%~~%`(typ, typ')
      -- if (typ = `InvalidT`_synthtyp() as typ)
      -- if (typ' = `InvalidT`_synthtyp() as typ)

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:157.1-159.32
   rule sett: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ_a) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `SetT%`
      -- let `SetT%`_synthtyp(typ_b) = synthtyp'
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:161.1-162.19
   rule statet: `%~~%`(typ, typ')
      -- if (typ = `StateT`_synthtyp() as typ)
      -- if (typ' = `StateT`_synthtyp() as typ)

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:164.1-165.53
   rule tableenumt: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableEnumT%%`
      -- let `TableEnumT%%`_synthtyp(id, member*{member <- member*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `TableEnumT%%`
      -- let `TableEnumT%%`_synthtyp(id', member'*{member' <- member'*}) = synthtyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:167.1-169.35
   rule tablestructt: `%~~%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(id, (member, typ_a)*{member <- member*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(id', (member', typ_b)*{member' <- member'*, typ_b <- typ_b*}) = synthtyp'
      -- if (id = id')
      -- (if (member = member'))*{member <- member*, member' <- member'*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:171.1-172.15
   rule anyt: `%~~%`(typ, typ')
      -- if (typ = `AnyT`_synthtyp() as typ)
      -- if (typ' = `AnyT`_synthtyp() as typ)

;; ../../../../spec/2c5-runtime-type-alpha.watsup:9.1-11.20
relation FuncType_alpha: `%~~%`(functyp, functyp)

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:178.1-185.38
   rule builtinmethodt: `%~~%`(functyp, functyp')
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt_a*{pt_a <- pt_a*}, typ_r_a) = functyp
      -- if functyp' matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt_b*{pt_b <- pt_b*}, typ_r_b) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}
      -- if Type_alpha: `%~~%`(typ_r_a, typ_r_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:187.1-193.35
   rule actiont: `%~~%`(functyp, functyp')
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt_a*{pt_a <- pt_a*}) = functyp
      -- if functyp' matches `ActionT%`
      -- let `ActionT%`_functyp(pt_b*{pt_b <- pt_b*}) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:195.1-201.35
   rule parserapplymethodt: `%~~%`(functyp, functyp')
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt_a*{pt_a <- pt_a*}) = functyp
      -- if functyp' matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt_b*{pt_b <- pt_b*}) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:203.1-209.35
   rule controlapplymethodt: `%~~%`(functyp, functyp')
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt_a*{pt_a <- pt_a*}) = functyp
      -- if functyp' matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt_b*{pt_b <- pt_b*}) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:211.1-213.34
   rule tableapplymethodt: `%~~%`(functyp, functyp')
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ_a) = functyp
      -- if functyp' matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ_b) = functyp'
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:215.1-222.38
   rule externfunctiont: `%~~%`(functyp, functyp')
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt_a*{pt_a <- pt_a*}, typ_r_a) = functyp
      -- if functyp' matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt_b*{pt_b <- pt_b*}, typ_r_b) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}
      -- if Type_alpha: `%~~%`(typ_r_a, typ_r_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:224.1-231.38
   rule functiont: `%~~%`(functyp, functyp')
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt_a*{pt_a <- pt_a*}, typ_r_a) = functyp
      -- if functyp' matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt_b*{pt_b <- pt_b*}, typ_r_b) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}
      -- if Type_alpha: `%~~%`(typ_r_a, typ_r_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:233.1-240.38
   rule externmethodt: `%~~%`(functyp, functyp')
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt_a*{pt_a <- pt_a*}, typ_r_a) = functyp
      -- if functyp' matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt_b*{pt_b <- pt_b*}, typ_r_b) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}
      -- if Type_alpha: `%~~%`(typ_r_a, typ_r_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:242.1-250.38
   rule externabstractmethodt: `%~~%`(functyp, functyp')
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt_a*{pt_a <- pt_a*}, typ_r_a) = functyp
      -- if functyp' matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt_b*{pt_b <- pt_b*}, typ_r_b) = functyp'
      -- (let `%%%%`_paramtyp(_id, dir_a, typ_a, _exprIL?{_exprIL <- _exprIL?}) = pt_a)*{_exprIL? <- _exprIL?*, _id <- _id*, dir_a <- dir_a*, pt_a <- pt_a*, typ_a <- typ_a*}
      -- (let `%%%%`_paramtyp(_id', dir_b, typ_b, _exprIL'?{_exprIL' <- _exprIL'?}) = pt_b)*{_exprIL'? <- _exprIL'?*, _id' <- _id'*, dir_b <- dir_b*, pt_b <- pt_b*, typ_b <- typ_b*}
      -- (if (dir_a = dir_b))*{dir_a <- dir_a*, dir_b <- dir_b*}
      -- (if Type_alpha: `%~~%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}
      -- if Type_alpha: `%~~%`(typ_r_a, typ_r_b) holds

;; ../../../../spec/2c5-runtime-type-alpha.watsup:13.1-15.20
relation FuncType_alpha_relaxed: `%~~%`(functyp, functyp)

;; ../../../../spec/2c5-runtime-type-alpha.watsup:17.1-19.20
relation FuncDef_alpha: `%~~%`(funcdef, funcdef)

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:256.1-258.34
   rule monofd: `%~~%`(funcdef, funcdef')
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft_a) = funcdef as monofuncdef
      -- if funcdef' <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft_b) = funcdef' as monofuncdef
      -- if FuncType_alpha: `%~~%`(ft_a, ft_b) holds

   ;; ../../../../spec/2c5-runtime-type-alpha.watsup:260.1-273.36
   rule polyfd: `%~~%`(funcdef, funcdef')
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam_a*{tparam_a <- tparam_a*}, tparam_hidden_a*{tparam_hidden_a <- tparam_hidden_a*}), ft_a) = funcdef as polyfuncdef
      -- if funcdef' <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam_b*{tparam_b <- tparam_b*}, tparam_hidden_b*{tparam_hidden_b <- tparam_hidden_b*}), ft_b) = funcdef' as polyfuncdef
      -- if (|tparam_a*{tparam_a <- tparam_a*}| = |tparam_b*{tparam_b <- tparam_b*}|)
      -- if (|tparam_hidden_a*{tparam_hidden_a <- tparam_hidden_a*}| = |tparam_hidden_b*{tparam_hidden_b <- tparam_hidden_b*}|)
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $fresh_tids(|tparam_a*{tparam_a <- tparam_a*} ++ tparam_hidden_a*{tparam_hidden_a <- tparam_hidden_a*}|)
      -- let tparam_a'*{tparam_a' <- tparam_a'*} = tparam_a*{tparam_a <- tparam_a*} ++ tparam_hidden_a*{tparam_hidden_a <- tparam_hidden_a*}
      -- let ft_a' = $subst_functyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam_a', `VarT%`_abstyp(tid_fresh) as typ)*{tid_fresh <- tid_fresh*, tparam_a' <- tparam_a'*}), ft_a)
      -- let tparam_b'*{tparam_b' <- tparam_b'*} = tparam_b*{tparam_b <- tparam_b*} ++ tparam_hidden_b*{tparam_hidden_b <- tparam_hidden_b*}
      -- let ft_b' = $subst_functyp(`{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam_b', `VarT%`_abstyp(tid_fresh) as typ)*{tid_fresh <- tid_fresh*, tparam_b' <- tparam_b'*}), ft_b)
      -- if FuncType_alpha: `%~~%`(ft_a', ft_b') holds

;; ../../../../spec/2c5-runtime-type-alpha.watsup:21.1-23.20
relation FuncDef_alpha_relaxed: `%~~%`(funcdef, funcdef)

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:5.1-5.39
relation Type_wf: `%|-%`(tidset, typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:25.1-26.20
   rule baset: `%|-%`(tidset, typ)
      -- if typ <: basetyp
      -- let basetyp = typ as basetyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:28.1-30.34
   rule vart: `%|-%`(tidset, typ)
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(tid) = abstyp
      -- if $in_set<tid>(tid, tidset)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:32.1-35.28
   rule spect: `%|-%`(tidset, typ')
      -- if typ' <: abstyp
      -- let abstyp = typ' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd, typ_a*{typ_a <- typ_a*}) = abstyp
      -- let typ = $specialize_typdef(ptd as typdef, typ_a*{typ_a <- typ_a*})
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:48.1-51.28
   rule deft: `%|-%`(tidset, typ')
      -- if typ' <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ) = typ' as aliastyp
      -- if $nestable_deft(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:65.1-68.28
   rule newt: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp
      -- if $nestable_newt(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:70.1-72.36
   rule enumt: `%|-%`(tidset, typ)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, member*{member <- member*}) = datatyp
      -- if $distinct_<member>(member*{member <- member*})

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:95.1-99.28
   rule senumt: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ, (member, val)*{member <- member*, val <- val*}) = datatyp
      -- if $distinct_<member>(member*{member <- member*})
      -- if $nestable_senumt(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:110.1-113.28
   rule listt: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ) = datatyp
      -- if $nestable_listt(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:127.1-130.31
   rule tuplet: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp
      -- (if $nestable_tuplet(typ))*{typ <- typ*}
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:142.1-146.28
   rule stackt: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, i_size) = datatyp
      -- if (i_size >= 0 as int)
      -- if $nestable_stackt(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:160.1-164.31
   rule structt: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp
      -- if $distinct_<member>(member*{member <- member*})
      -- (if $nestable_structt(typ))*{typ <- typ*}
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:194.1-198.31
   rule headert: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp
      -- if $distinct_<member>(member*{member <- member*})
      -- (if $nestable_headert(typ))*{typ <- typ*}
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:210.1-214.31
   rule uniont: `%|-%`(tidset, typ')
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp
      -- if $distinct_<member>(member*{member <- member*})
      -- (if $nestable_uniont(typ))*{typ <- typ*}
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:216.1-219.38
   rule externt: `%|-%`(tidset, typ)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, fmap) = objtyp
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid, funcdef)*{fid <- fid*, funcdef <- funcdef*}) = fmap
      -- (if FuncDef_wf: `%|-%`(tidset, funcdef) holds)*{funcdef <- funcdef*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:221.1-223.34
   rule parsert: `%|-%`(tidset, typ)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, pt*{pt <- pt*}) = objtyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:225.1-227.34
   rule controlt: `%|-%`(tidset, typ)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, pt*{pt <- pt*}) = objtyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:229.1-231.31
   rule packaget: `%|-%`(tidset, typ')
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, typ*{typ <- typ*}) = objtyp
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:233.1-237.28
   rule tablet: `%|-%`(tidset, typ'')
      -- if typ'' <: objtyp
      -- let objtyp = typ'' as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(_id, typ) = objtyp
      -- let typ' = $canon_typ(typ)
      -- if $is_table_structt(typ')
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:239.1-240.21
   rule defaultt: `%|-%`(tidset, typ)
      -- if (typ = `DefaultT`_synthtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:242.1-244.31
   rule seqt: `%|-%`(tidset, typ')
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ*{typ <- typ*}) = synthtyp
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:246.1-248.31
   rule seqdefaultt: `%|-%`(tidset, typ')
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ*{typ <- typ*}) = synthtyp
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:250.1-253.31
   rule recordt: `%|-%`(tidset, typ')
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member, typ)*{member <- member*, typ <- typ*}) = synthtyp
      -- if $distinct_<member>(member*{member <- member*})
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:255.1-258.31
   rule recorddefaultt: `%|-%`(tidset, typ')
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member, typ)*{member <- member*, typ <- typ*}) = synthtyp
      -- if $distinct_<member>(member*{member <- member*})
      -- (if Type_wf: `%|-%`(tidset, typ) holds)*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:260.1-261.21
   rule invalidt: `%|-%`(tidset, typ)
      -- if (typ = `InvalidT`_synthtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:314.1-318.28
   rule sett: `%|-%`(tidset, typ'')
      -- if typ'' <: synthtyp
      -- let synthtyp = typ'' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let typ' = $canon_typ(typ)
      -- if $nestable_sett(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:320.1-321.19
   rule statet: `%|-%`(tidset, typ)
      -- if (typ = `StateT`_synthtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:323.1-325.36
   rule tableenumt: `%|-%`(tidset, typ)
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableEnumT%%`
      -- let `TableEnumT%%`_synthtyp(_id, member*{member <- member*}) = synthtyp
      -- if $distinct_<member>(member*{member <- member*})

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:327.1-331.50
   rule tablestructt: `%|-%`(tidset, typ')
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(_id, (member, typ)*{member <- member*, typ <- typ*}) = synthtyp
      -- if (member*{member <- member*} = ["hit", "miss", "action_run"])
      -- let typ'''''*{typ''''' <- typ'''''*} = typ*{typ <- typ*}
      -- if typ'''''*{typ''''' <- typ'''''*} matches [ _/3 ]
      -- let [typ'', typ''', typ''''] = typ'''''*{typ''''' <- typ'''''*}
      -- if (typ'' = `BoolT`_primtyp() as typ)
      -- if (typ''' = `BoolT`_primtyp() as typ)
      -- if typ'''' <: synthtyp
      -- let synthtyp' = typ'''' as synthtyp
      -- if synthtyp' matches `TableEnumT%%`
      -- let `TableEnumT%%`_synthtyp(id_e, member_e*{member_e <- member_e*}) = synthtyp'
      -- if Type_wf: `%|-%`(tidset, `TableEnumT%%`_synthtyp(id_e, member_e*{member_e <- member_e*}) as typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:333.1-334.17
   rule anyt: `%|-%`(tidset, typ)
      -- if (typ = `AnyT`_synthtyp() as typ)

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:6.1-6.42
relation TypeDef_wf: `%|-%`(tidset, typdef)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:351.1-354.28
   rule monod: `%|-%`(tidset, typdef)
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef
      -- if $nestable_monod(typ)
      -- if Type_wf: `%|-%`(tidset, typ) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:370.1-375.29
   rule polyd: `%|-%`(tidset, typdef)
      -- if typdef <: polytypdef
      -- let `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ) = typdef as polytypdef
      -- if $nestable_polyd(typ)
      -- if $distinct_<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*})
      -- let tidset' = $union_set<tid>(tidset, `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}))
      -- if Type_wf: `%|-%`(tidset', typ) holds

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:8.1-8.44
relation ParamType_wf: `%|-%`(tidset, paramtyp)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:381.1-384.51
   rule none: `%|-%`(tidset, `%%%%`_paramtyp(_id, dir, typ, exprIL?{exprIL <- exprIL?}))
      -- if exprIL?{exprIL <- exprIL?} matches ()
      -- if Type_wf: `%|-%`(tidset, typ) holds
      -- if ($is_externt($canon_typ(typ)) => (dir = `NO`_dir()))

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:386.1-390.29
   rule some: `%|-%`(tidset, `%%%%`_paramtyp(_id, dir, typ, exprIL'?{exprIL' <- exprIL'?}))
      -- if exprIL'?{exprIL' <- exprIL'?} matches (_)
      -- let ?(exprIL) = exprIL'?{exprIL' <- exprIL'?}
      -- if Type_wf: `%|-%`(tidset, typ) holds
      -- if ($is_externt($canon_typ(typ)) => (dir = `NO`_dir()))
      -- if ((dir = `IN`_dir()) \/ (dir = `NO`_dir()))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:9.1-9.45
relation ParamTypes_wf: `%|-%`(tidset, paramtyp*)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:392.1-396.35
   rule : `%|-%`(tidset, pt*{pt <- pt*})
      -- (let `%%%%`_paramtyp(id, _dir, _typ, _exprIL?{_exprIL <- _exprIL?}) = pt)*{_dir <- _dir*, _exprIL? <- _exprIL?*, _typ <- _typ*, id <- id*, pt <- pt*}
      -- if $distinct_<id>(id*{id <- id*})
      -- (if ParamType_wf: `%|-%`(tidset, pt) holds)*{pt <- pt*}

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:11.1-11.43
relation FuncType_wf: `%|-%`(tidset, functyp)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:402.1-405.30
   rule builtinmethodt: `%|-%`(tidset, functyp)
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- if Type_wf: `%|-%`(tidset, typ_r) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:417.1-426.46
   rule actiont: `%|-%`(tidset, functyp)
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt*{pt <- pt*}) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- if $is_trailing_action(dir*{dir <- dir*})
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}
      -- (if ((((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~$is_intt(typ')) /\ ~$is_obj(typ')) /\ (~$is_strt(typ') \/ (dir = `NO`_dir()))))*{dir <- dir*, typ' <- typ'*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:428.1-437.30
   rule parserapplymethodt: `%|-%`(tidset, functyp)
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}
      -- (if (((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~($is_obj(typ') /\ ~$is_externt(typ'))) /\ (~($is_strt(typ') \/ $is_intt(typ')) \/ (dir = `NO`_dir()))))*{dir <- dir*, typ' <- typ'*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:439.1-444.7
   rule controlapplymethodt: `%|-%`(tidset, functyp)
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:450.1-451.49
   rule tableapplymethodt: `%|-%`(tidset, functyp)
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ) = functyp
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = synthtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:453.1-464.30
   rule externfunctiont: `%|-%`(tidset, functyp)
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}
      -- (if (((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~($is_obj(typ') /\ ~$is_externt(typ'))) /\ (~($is_strt(typ') \/ $is_intt(typ')) \/ (dir = `NO`_dir()))))*{dir <- dir*, typ' <- typ'*}
      -- if Type_wf: `%|-%`(tidset, typ_r) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:466.1-476.30
   rule functiont: `%|-%`(tidset, functyp)
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}
      -- (if (((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~$is_obj(typ')) /\ (~($is_strt(typ') \/ $is_intt(typ')) \/ (dir = `NO`_dir()))))*{dir <- dir*, typ' <- typ'*}
      -- if Type_wf: `%|-%`(tidset, typ_r) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:478.1-489.30
   rule externmethodt: `%|-%`(tidset, functyp)
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}
      -- (if (((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~($is_obj(typ') /\ ~$is_externt(typ'))) /\ (~($is_strt(typ') \/ $is_intt(typ')) \/ (dir = `NO`_dir()))))*{dir <- dir*, typ' <- typ'*}
      -- if Type_wf: `%|-%`(tidset, typ_r) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:491.1-502.30
   rule externabstractmethodt: `%|-%`(tidset, functyp)
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- if ParamTypes_wf: `%|-%`(tidset, pt*{pt <- pt*}) holds
      -- (let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt)*{dir <- dir*, exprIL? <- exprIL?*, id <- id*, pt <- pt*, typ <- typ*}
      -- (let typ' = $canon_typ(typ))*{typ <- typ*, typ' <- typ'*}
      -- (if (((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~($is_obj(typ') /\ ~$is_externt(typ'))) /\ (~($is_strt(typ') \/ $is_intt(typ')) \/ (dir = `NO`_dir()))))*{dir <- dir*, typ' <- typ'*}
      -- if Type_wf: `%|-%`(tidset, typ_r) holds

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:12.1-12.43
relation FuncDef_wf: `%|-%`(tidset, funcdef)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:508.1-516.31
   rule monofd: `%|-%`(tidset, funcdef)
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(ft) = funcdef as monofuncdef
      -- if (((($is_builtinmethodt(ft) \/ $is_actiont(ft)) \/ $is_parserapplymethodt(ft)) \/ $is_controlapplymethodt(ft)) \/ $is_tableapplymethodt(ft))
      -- if FuncType_wf: `%|-%`(tidset, ft) holds

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:518.1-527.32
   rule polyfd: `%|-%`(tidset, funcdef)
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), ft) = funcdef as polyfuncdef
      -- if ((($is_externfunct(ft) \/ $is_funct(ft)) \/ $is_externmethodt(ft)) \/ $is_externabstractmethodt(ft))
      -- if $distinct_<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*})
      -- let tidset' = $union_set<tid>(tidset, `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}))
      -- if FuncType_wf: `%|-%`(tidset', ft) holds

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:14.19-14.27
syntax consctxt = 
   | `CONSCTXT`()

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:15.1-15.53
relation CParamType_wf: `%%|-%`(tidset, consctxt, paramtyp)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:533.1-535.28
   rule : `%%|-%`(tidset, consctxt, `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}))
      -- if dir matches `NO`
      -- if Type_wf: `%|-%`(tidset, typ) holds

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:16.1-16.54
relation CParamTypes_wf: `%%|-%`(tidset, consctxt, paramtyp*)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:537.1-541.45
   rule : `%%|-%`(tidset, consctxt, pt*{pt <- pt*})
      -- (let `%%%%`_paramtyp(id, _dir, _typ, _exprIL?{_exprIL <- _exprIL?}) = pt)*{_dir <- _dir*, _exprIL? <- _exprIL?*, _typ <- _typ*, id <- id*, pt <- pt*}
      -- if $distinct_<id>(id*{id <- id*})
      -- (if CParamType_wf: `%%|-%`(tidset, consctxt, pt) holds)*{pt <- pt*}

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:18.1-18.43
relation ConsType_wf: `%|-%`(tidset, constyp)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:547.1-557.53
   rule externt: `%|-%`(tidset, `ConsT%%`_constyp(pt*{pt <- pt*}, typ))
      -- if CParamTypes_wf: `%%|-%`(tidset, `CONSCTXT`_consctxt(), pt*{pt <- pt*}) holds
      -- if Type_wf: `%|-%`(tidset, typ) holds
      -- let typ'' = $canon_typ(typ)
      -- if typ'' <: objtyp
      -- let objtyp = typ'' as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id, fmap) = objtyp
      -- (let `%%%%`_paramtyp(_id, _dir, typ_p, _exprIL?{_exprIL <- _exprIL?}) = pt)*{_dir <- _dir*, _exprIL? <- _exprIL?*, _id <- _id*, pt <- pt*, typ_p <- typ_p*}
      -- (let typ' = $canon_typ(typ_p))*{typ' <- typ'*, typ_p <- typ_p*}
      -- (if ((~$is_deft(typ') /\ ~$is_spect(typ')) /\ ~($is_obj(typ') /\ ~$is_externt(typ'))))*{typ' <- typ'*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:559.1-569.84
   rule parsert: `%|-%`(tidset, `ConsT%%`_constyp(pt*{pt <- pt*}, typ))
      -- if CParamTypes_wf: `%%|-%`(tidset, `CONSCTXT`_consctxt(), pt*{pt <- pt*}) holds
      -- if Type_wf: `%|-%`(tidset, typ) holds
      -- let typ' = $canon_typ(typ)
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp
      -- (let `%%%%`_paramtyp(_id', _dir, typ_p, exprIL?{exprIL <- exprIL?}) = pt)*{_dir <- _dir*, _id' <- _id'*, exprIL? <- exprIL?*, pt <- pt*, typ_p <- typ_p*}
      -- (let typ_p' = $canon_typ(typ_p))*{typ_p <- typ_p*, typ_p' <- typ_p'*}
      -- (if ((((~$is_deft(typ_p') /\ ~$is_spect(typ_p')) /\ ~$is_controlt(typ_p')) /\ ~$is_packaget(typ_p')) /\ ~$is_tablet(typ_p')))*{typ_p' <- typ_p'*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:571.1-581.83
   rule controlt: `%|-%`(tidset, `ConsT%%`_constyp(pt*{pt <- pt*}, typ))
      -- if CParamTypes_wf: `%%|-%`(tidset, `CONSCTXT`_consctxt(), pt*{pt <- pt*}) holds
      -- if Type_wf: `%|-%`(tidset, typ) holds
      -- let typ' = $canon_typ(typ)
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp
      -- (let `%%%%`_paramtyp(_id', _dir, typ_p, exprIL?{exprIL <- exprIL?}) = pt)*{_dir <- _dir*, _id' <- _id'*, exprIL? <- exprIL?*, pt <- pt*, typ_p <- typ_p*}
      -- (let typ_p' = $canon_typ(typ_p))*{typ_p <- typ_p*, typ_p' <- typ_p'*}
      -- (if ((((~$is_deft(typ_p') /\ ~$is_spect(typ_p')) /\ ~$is_parsert(typ_p')) /\ ~$is_packaget(typ_p')) /\ ~$is_tablet(typ_p')))*{typ_p' <- typ_p'*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:583.1-592.74
   rule packaget: `%|-%`(tidset, `ConsT%%`_constyp(pt*{pt <- pt*}, typ))
      -- if CParamTypes_wf: `%%|-%`(tidset, `CONSCTXT`_consctxt(), pt*{pt <- pt*}) holds
      -- if Type_wf: `%|-%`(tidset, typ) holds
      -- let typ' = $canon_typ(typ)
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, _typ*{_typ <- _typ*}) = objtyp
      -- (let `%%%%`_paramtyp(_id', _dir, typ_p, exprIL?{exprIL <- exprIL?}) = pt)*{_dir <- _dir*, _id' <- _id'*, exprIL? <- exprIL?*, pt <- pt*, typ_p <- typ_p*}
      -- (let typ_p' = $canon_typ(typ_p))*{typ_p <- typ_p*, typ_p' <- typ_p'*}
      -- (if ((~$is_deft(typ_p') /\ ~$is_spect(typ_p')) /\ ~$is_tablet(typ_p')))*{typ_p' <- typ_p'*}

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:19.1-19.43
relation ConsDef_wf: `%|-%`(tidset, consdef)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:598.1-610.37
   rule : `%|-%`(tidset, `ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), constyp))
      -- let `ConsT%%`_constyp(_paramtyp*{_paramtyp <- _paramtyp*}, typ_r) = constyp
      -- let typ_r' = $canon_typ(typ_r)
      -- if ((($is_externt(typ_r') \/ $is_parsert(typ_r')) \/ $is_controlt(typ_r')) \/ $is_packaget(typ_r'))
      -- if $distinct_<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*})
      -- let tidset' = $union_set<tid>(tidset, `{%}`_set<tid>(tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}))
      -- if ConsType_wf: `%|-%`(tidset', constyp) holds

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:37.1-37.31
def $nestable_deft(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:40.1-40.59
   clause 0(typ) = $nestable'_deft($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:38.1-38.32
def $nestable'_deft(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:41.1-41.79
   clause 0(typ) = (~$is_voidt(basetyp as typ) /\ ~$is_matchkindt(basetyp as typ))
      -- if typ <: basetyp
      -- let basetyp = typ as basetyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:42.1-42.35
   clause 1(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:43.1-43.36
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:44.1-44.50
   clause 3(typ) = ~$is_tablet(objtyp as typ)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:45.1-46.15
   clause 4(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:53.1-53.31
def $nestable_newt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:56.1-56.59
   clause 0(typ) = $nestable'_newt($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:54.1-54.32
def $nestable'_newt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:57.1-57.34
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:58.1-58.36
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:59.1-59.36
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:60.1-60.35
   clause 3(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:61.1-61.37
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:62.1-63.15
   clause 5(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:74.1-74.33
def $nestable_senumt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:79.1-79.63
   clause 0(typ) = $nestable'_senumt($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:75.1-75.34
def $nestable'_senumt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:80.1-80.38
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:81.1-81.38
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:82.1-82.37
   clause 2(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:83.1-83.66
   clause 3(typ') = $nestable_newt_in_senumt(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:84.1-85.15
   clause 4(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:76.1-76.41
def $nestable_newt_in_senumt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:87.1-87.79
   clause 0(typ) = $nestable_newt_in_senumt'($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:77.1-77.42
def $nestable_newt_in_senumt'(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:88.1-88.46
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:89.1-89.46
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:90.1-90.45
   clause 2(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:91.1-91.47
   clause 3(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:92.1-93.15
   clause 4(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:101.1-101.32
def $nestable_listt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:104.1-104.61
   clause 0(typ) = $nestable'_listt($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:102.1-102.33
def $nestable'_listt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:105.1-105.52
   clause 0(typ) = ~$is_voidt(basetyp as typ)
      -- if typ <: basetyp
      -- let basetyp = typ as basetyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:106.1-106.36
   clause 1(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:107.1-107.37
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:108.1-108.47
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:115.1-115.33
def $nestable_tuplet(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:118.1-118.63
   clause 0(typ) = $nestable'_tuplet($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:116.1-116.34
def $nestable'_tuplet(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:119.1-119.35
   clause 0(typ) = true
      -- if (typ = `ErrT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:120.1-120.36
   clause 1(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:121.1-121.50
   clause 2(typ) = ~$is_intt(numtyp as typ)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:122.1-122.37
   clause 3(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:123.1-123.53
   clause 4(typ) = ~$is_listt(datatyp as typ)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:124.1-125.15
   clause 5(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:132.1-132.33
def $nestable_stackt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:135.1-135.63
   clause 0(typ) = $nestable'_stackt($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:133.1-133.34
def $nestable'_stackt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:136.1-136.39
   clause 0(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(tid) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:137.1-137.42
   clause 1(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:138.1-138.41
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:139.1-140.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:148.1-148.34
def $nestable_structt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:151.1-151.65
   clause 0(typ) = $nestable'_structt($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:149.1-149.35
def $nestable'_structt(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:152.1-152.36
   clause 0(typ) = true
      -- if (typ = `ErrT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:153.1-153.37
   clause 1(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:154.1-154.51
   clause 2(typ) = ~$is_intt(numtyp as typ)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:155.1-155.38
   clause 3(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:156.1-156.54
   clause 4(typ) = ~$is_listt(datatyp as typ)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:157.1-158.15
   clause 5(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:166.1-166.34
def $nestable_headert(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:171.1-171.65
   clause 0(typ) = $nestable'_headert($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:167.1-167.35
def $nestable'_headert(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:172.1-172.37
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:173.1-173.51
   clause 1(typ) = ~$is_intt(numtyp as typ)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:174.1-174.38
   clause 2(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:175.1-175.40
   clause 3(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:176.1-176.44
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:177.1-178.43
   clause 5(typ') = true
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp
      -- (if $nestable_structt_in_headert(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:179.1-180.15
   clause 6(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:168.1-168.45
def $nestable_structt_in_headert(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:182.1-182.87
   clause 0(typ) = $nestable'_structt_in_headert($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:169.1-169.46
def $nestable'_structt_in_headert(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:183.1-183.48
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:184.1-184.50
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:185.1-185.50
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:186.1-186.49
   clause 3(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:187.1-187.51
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:188.1-188.55
   clause 5(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:189.1-190.43
   clause 6(typ') = true
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp
      -- (if $nestable_structt_in_headert(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:191.1-192.15
   clause 7(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:200.1-200.33
def $nestable_uniont(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:203.1-203.63
   clause 0(typ) = $nestable'_uniont($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:201.1-201.34
def $nestable'_uniont(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:204.1-204.37
   clause 0(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:205.1-205.39
   clause 1(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:206.1-206.42
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:207.1-208.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:263.1-263.31
def $nestable_sett(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:270.1-270.59
   clause 0(typ) = $nestable'_sett($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:264.1-264.32
def $nestable'_sett(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:271.1-271.33
   clause 0(typ) = true
      -- if (typ = `ErrT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:272.1-272.34
   clause 1(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:273.1-273.36
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:274.1-274.36
   clause 3(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:275.1-275.35
   clause 4(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:276.1-276.37
   clause 5(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:277.1-277.38
   clause 6(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:278.1-278.41
   clause 7(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:279.1-280.39
   clause 8(typ') = true
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp
      -- (if $nestable_tuplet_in_sett(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:281.1-282.37
   clause 9(typ') = true
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ*{typ <- typ*}) = synthtyp
      -- (if $nestable_seqt_in_sett(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:283.1-284.15
   clause 10(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:265.1-265.41
def $nestable_tuplet_in_sett(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:286.1-286.79
   clause 0(typ) = $nestable'_tuplet_in_sett($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:266.1-266.42
def $nestable'_tuplet_in_sett(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:287.1-287.44
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:288.1-288.46
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:289.1-289.46
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:290.1-290.45
   clause 3(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:291.1-291.47
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:292.1-292.48
   clause 5(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:293.1-293.51
   clause 6(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:294.1-295.39
   clause 7(typ') = true
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp
      -- (if $nestable_tuplet_in_sett(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:296.1-297.15
   clause 8(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:267.1-267.39
def $nestable_seqt_in_sett(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:299.1-299.75
   clause 0(typ) = $nestable'_seqt_in_sett($canon_typ(typ))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:268.1-268.40
def $nestable'_seqt_in_sett(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:300.1-300.42
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:301.1-301.44
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:302.1-302.44
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:303.1-303.43
   clause 3(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:304.1-304.45
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:305.1-305.46
   clause 5(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:306.1-306.49
   clause 6(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:307.1-308.37
   clause 7(typ') = true
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp
      -- (if $nestable_seqt_in_sett(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:309.1-310.37
   clause 8(typ') = true
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ*{typ <- typ*}) = synthtyp
      -- (if $nestable_seqt_in_sett(typ))*{typ <- typ*}

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:311.1-312.15
   clause 9(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:340.1-340.32
def $nestable_monod(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:342.1-342.35
   clause 0(typ) = true
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(_id) = abstyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:343.1-343.37
   clause 1(typ) = true
      -- if typ <: aliastyp
      -- let `DefT%%`_aliastyp(_id, _typ) = typ as aliastyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:344.1-344.37
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, _typ) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:345.1-345.38
   clause 3(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(_id, _member*{_member <- _member*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:346.1-346.41
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, _typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:347.1-347.39
   clause 5(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(_id, _typ) = objtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:348.1-349.15
   clause 6(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:356.1-356.32
def $nestable_polyd(typ) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:358.1-358.37
   clause 0(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(_typ*{_typ <- _typ*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:359.1-359.39
   clause 1(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(_typ, _int) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:360.1-360.40
   clause 2(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:361.1-361.40
   clause 3(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:362.1-362.39
   clause 4(typ) = true
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:363.1-363.40
   clause 5(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, _map<fid, funcdef>) = objtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:364.1-364.40
   clause 6(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:365.1-365.41
   clause 7(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, _paramtyp*{_paramtyp <- _paramtyp*}) = objtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:366.1-366.41
   clause 8(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, _typ*{_typ <- _typ*}) = objtyp

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:367.1-368.15
   clause 9(typ) = false
      -- otherwise

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:407.1-407.37
def $is_trailing_action(dir*) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:410.1-410.77
   clause 0(dir*{dir <- dir*}) = $is_trailing_action'(true, $rev_<dir>(dir*{dir <- dir*}))

;; ../../../../spec/2c6-runtime-type-wellformed.watsup:408.1-408.44
def $is_trailing_action'(bool, dir*) : bool =

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:411.1-411.40
   clause 0(_bool, dir*{dir <- dir*}) = true
      -- if dir*{dir <- dir*} matches []

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:412.1-412.82
   clause 1(bool, dir'*{dir' <- dir'*}) = $is_trailing_action'(true, dir_t*{dir_t <- dir_t*})
      -- if (bool = true)
      -- if dir'*{dir' <- dir'*} matches _ :: _
      -- let dir :: dir_t*{dir_t <- dir_t*} = dir'*{dir' <- dir'*}
      -- if dir matches `NO`

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:413.1-413.54
   clause 2(bool, dir'*{dir' <- dir'*}) = false
      -- if (bool = false)
      -- if dir'*{dir' <- dir'*} matches _ :: _
      -- let dir :: dir_t*{dir_t <- dir_t*} = dir'*{dir' <- dir'*}
      -- if dir matches `NO`

   ;; ../../../../spec/2c6-runtime-type-wellformed.watsup:414.1-415.21
   clause 3(_bool, dir*{dir <- dir*}) = $is_trailing_action'(false, dir_t*{dir_t <- dir_t*})
      -- if dir*{dir <- dir*} matches _ :: _
      -- let dir_h :: dir_t*{dir_t <- dir_t*} = dir*{dir <- dir*}
      -- if (dir_h =/= `NO`_dir())

;; ../../../../spec/2d1-runtime-numerics.watsup:5.1-5.21
def $pow2(nat) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:7.1-7.25
def $shl(int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:8.1-8.25
def $shr(int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:9.1-9.36
def $shr_arith(int, int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:11.1-11.21
def $bneg(int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:12.1-12.26
def $band(int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:13.1-13.26
def $bxor(int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:14.1-14.25
def $bor(int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:16.1-16.33
def $bitacc(int, int, int) : int =

;; ../../../../spec/2d1-runtime-numerics.watsup:22.1-22.28
def $un_op(unop, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:31.1-31.38
   clause 0(unop, val) = $un_bnot(val)
      -- if unop matches `BNOT`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:39.1-39.38
   clause 1(unop, val) = $un_lnot(val)
      -- if unop matches `LNOT`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:49.1-49.39
   clause 2(unop, val) = $un_plus(val)
      -- if unop matches `UPLUS`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:63.1-63.41
   clause 3(unop, val) = $un_minus(val)
      -- if unop matches `UMINUS`

;; ../../../../spec/2d1-runtime-numerics.watsup:26.1-26.24
def $un_bnot(val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:28.1-29.22
   clause 0(val) = `FBitV%%`_val(w, $to_bitstr(w as int, $bneg(bs)))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs) = val
      -- let i = $bneg(bs)

;; ../../../../spec/2d1-runtime-numerics.watsup:35.1-35.24
def $un_lnot(val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:37.1-37.35
   clause 0(val) = `BoolV%`_val(~b)
      -- if val matches `BoolV%`
      -- let `BoolV%`_val(b) = val

;; ../../../../spec/2d1-runtime-numerics.watsup:43.1-43.24
def $un_plus(val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:45.1-45.30
   clause 0(val) = `IntV%`_val(i)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:46.1-46.38
   clause 1(val) = `FIntV%%`_val(w, bs)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:47.1-47.38
   clause 2(val) = `FBitV%%`_val(w, bs)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs) = val

;; ../../../../spec/2d1-runtime-numerics.watsup:53.1-53.25
def $un_minus(val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:55.1-55.34
   clause 0(val) = `IntV%`_val(-i)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:56.1-58.45
   clause 1(val) = `FIntV%%`_val(w, bs')
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs) = val
      -- let bs' = $to_bitstr(w as int, $to_int(w as int, -bs))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:59.1-61.31
   clause 2(val) = `FBitV%%`_val(w, bs')
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs) = val
      -- let bs' = ($pow2(w) - bs)

;; ../../../../spec/2d1-runtime-numerics.watsup:69.1-69.35
def $bin_op(binop, val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:85.1-85.58
   clause 0(binop, val_l, val_r) = $bin_plus(val_l, val_r)
      -- if binop matches `PLUS`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:103.1-103.60
   clause 1(binop, val_l, val_r) = $bin_minus(val_l, val_r)
      -- if binop matches `MINUS`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:121.1-121.56
   clause 2(binop, val_l, val_r) = $bin_mul(val_l, val_r)
      -- if binop matches `MUL`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:129.1-129.56
   clause 3(binop, val_l, val_r) = $bin_div(val_l, val_r)
      -- if binop matches `DIV`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:137.1-137.56
   clause 4(binop, val_l, val_r) = $bin_mod(val_l, val_r)
      -- if binop matches `MOD`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:170.1-170.56
   clause 5(binop, val_l, val_r) = $bin_shl(val_l, val_r)
      -- if binop matches `SHL`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:223.1-223.56
   clause 6(binop, val_l, val_r) = $bin_shr(val_l, val_r)
      -- if binop matches `SHR`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:235.1-235.60
   clause 7(binop, val_l, val_r) = `BoolV%`_val($bin_le(val_l, val_r))
      -- if binop matches `LE`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:247.1-247.60
   clause 8(binop, val_l, val_r) = `BoolV%`_val($bin_ge(val_l, val_r))
      -- if binop matches `GE`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:259.1-259.60
   clause 9(binop, val_l, val_r) = `BoolV%`_val($bin_lt(val_l, val_r))
      -- if binop matches `LT`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:271.1-271.60
   clause 10(binop, val_l, val_r) = `BoolV%`_val($bin_gt(val_l, val_r))
      -- if binop matches `GT`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:315.1-315.60
   clause 11(binop, val_l, val_r) = `BoolV%`_val($bin_eq(val_l, val_r))
      -- if binop matches `EQ`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:319.1-319.63
   clause 12(binop, val_l, val_r) = `BoolV%`_val(~$bin_eq(val_l, val_r))
      -- if binop matches `NE`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:335.1-335.58
   clause 13(binop, val_l, val_r) = $bin_band(val_l, val_r)
      -- if binop matches `BAND`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:351.1-351.58
   clause 14(binop, val_l, val_r) = $bin_bxor(val_l, val_r)
      -- if binop matches `BXOR`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:367.1-367.56
   clause 15(binop, val_l, val_r) = $bin_bor(val_l, val_r)
      -- if binop matches `BOR`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:396.1-396.62
   clause 16(binop, val_l, val_r) = $bin_concat(val_l, val_r)
      -- if binop matches `CONCAT`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:404.1-404.58
   clause 17(binop, val_l, val_r) = $bin_land(val_l, val_r)
      -- if binop matches `LAND`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:412.1-412.56
   clause 18(binop, val_l, val_r) = $bin_lor(val_l, val_r)
      -- if binop matches `LOR`

;; ../../../../spec/2d1-runtime-numerics.watsup:73.1-73.30
def $bin_plus(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:75.1-75.54
   clause 0(val, val') = `IntV%`_val((i_l + i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:76.1-79.41
   clause 1(val, val') = `FIntV%%`_val(w, bs)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let bs = $to_bitstr(w as int, (i_l + i_r))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:80.1-83.41
   clause 2(val, val') = `FBitV%%`_val(w, bs)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let bs = $to_bitstr(w as int, (i_l + i_r))

;; ../../../../spec/2d1-runtime-numerics.watsup:91.1-91.31
def $bin_minus(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:93.1-93.55
   clause 0(val, val') = `IntV%`_val((i_l - i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:94.1-97.41
   clause 1(val, val') = `FIntV%%`_val(w, bs)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let bs = $to_bitstr(w as int, (i_l - i_r))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:98.1-101.41
   clause 2(val, val') = `FBitV%%`_val(w, bs)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let bs = $to_bitstr(w as int, (i_l - i_r))

;; ../../../../spec/2d1-runtime-numerics.watsup:109.1-109.29
def $bin_mul(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:111.1-111.53
   clause 0(val, val') = `IntV%`_val((i_l * i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:112.1-115.41
   clause 1(val, val') = `FIntV%%`_val(w, bs)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let bs = $to_bitstr(w as int, (i_l * i_r))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:116.1-119.41
   clause 2(val, val') = `FBitV%%`_val(w, bs)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let bs = $to_bitstr(w as int, (i_l * i_r))

;; ../../../../spec/2d1-runtime-numerics.watsup:125.1-125.29
def $bin_div(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:127.1-127.53
   clause 0(val, val') = `IntV%`_val((i_l / i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

;; ../../../../spec/2d1-runtime-numerics.watsup:133.1-133.29
def $bin_mod(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:135.1-135.53
   clause 0(val, val') = `IntV%`_val((i_l \ i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

;; ../../../../spec/2d1-runtime-numerics.watsup:141.1-141.29
def $bin_shl(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:143.1-143.55
   clause 0(val, val') = `IntV%`_val($shl(i_l, i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:144.1-145.33
   clause 1(val, val') = `IntV%`_val($shl(i_l, i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_r = $to_int(w_r as int, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:146.1-146.62
   clause 2(val, val') = `IntV%`_val($shl(i_l, bs_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:147.1-149.46
   clause 3(val, val') = $bin_shl(`FIntV%%`_val(w_l, bs_l), val_r)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'
      -- let val_r = `FIntV%%`_val(w_l, $to_int(w_l as int, i_r))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:150.1-154.27
   clause 4(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- let i_r = $to_int(w_r as int, bs_r)
      -- let i = $shl(i_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:155.1-158.28
   clause 5(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- let i = $shl(i_l, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:159.1-161.46
   clause 6(val, val') = $bin_shl(`FBitV%%`_val(w_l, bs_l), val_r)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'
      -- let val_r = `FBitV%%`_val(w_l, $to_int(w_l as int, i_r))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:162.1-165.28
   clause 7(val, val') = `FBitV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_r = $to_int(w_r as int, bs_r)
      -- let i = $shl(bs_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:166.1-168.29
   clause 8(val, val') = `FBitV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i = $shl(bs_l, bs_r)

;; ../../../../spec/2d1-runtime-numerics.watsup:174.1-174.29
def $bin_shr(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:176.1-176.55
   clause 0(val, val') = `IntV%`_val($shr(i_l, i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:177.1-178.33
   clause 1(val, val') = `IntV%`_val($shr(i_l, i_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_r = $to_int(w_r as int, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:179.1-179.62
   clause 2(val, val') = `IntV%`_val($shr(i_l, bs_r))
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:180.1-184.53
   clause 3(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- if (i_l < 0 as int)
      -- let i = $shr_arith(bs_l, i_r, ($pow2(w_l) - 1 as int))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:185.1-189.28
   clause 4(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- if (i_l >= 0 as int)
      -- let i = $shr(bs_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:190.1-195.53
   clause 5(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- let i_r = $to_int(w_r as int, bs_r)
      -- if (i_l < 0 as int)
      -- let i = $shr_arith(bs_l, i_r, ($pow2(w_l) - 1 as int))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:196.1-201.28
   clause 6(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- let i_r = $to_int(w_r as int, bs_r)
      -- if (i_l >= 0 as int)
      -- let i = $shr(bs_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:202.1-206.54
   clause 7(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- if (i_l < 0 as int)
      -- let i = $shr_arith(bs_l, bs_r, ($pow2(w_l) - 1 as int))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:207.1-211.29
   clause 8(val, val') = `FIntV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- if (i_l >= 0 as int)
      -- let i = $shr(bs_l, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:212.1-214.46
   clause 9(val, val') = $bin_shr(`FBitV%%`_val(w_l, bs_l), val_r)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'
      -- let val_r = `FBitV%%`_val(w_l, $to_int(w_l as int, i_r))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:215.1-218.28
   clause 10(val, val') = `FBitV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_r = $to_int(w_r as int, bs_r)
      -- let i = $shr(bs_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:219.1-221.29
   clause 11(val, val') = `FBitV%%`_val(w_l, $to_bitstr(w_l as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i = $shr(bs_l, bs_r)

;; ../../../../spec/2d1-runtime-numerics.watsup:227.1-227.29
def $bin_le(val, val) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:229.1-229.48
   clause 0(val, val') = (i_l <= i_r)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:230.1-232.31
   clause 1(val, val') = (i_l <= i_r)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:233.1-233.58
   clause 2(val, val') = (bs_l <= bs_r)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')

;; ../../../../spec/2d1-runtime-numerics.watsup:239.1-239.29
def $bin_ge(val, val) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:241.1-241.48
   clause 0(val, val') = (i_l >= i_r)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:242.1-244.31
   clause 1(val, val') = (i_l >= i_r)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:245.1-245.58
   clause 2(val, val') = (bs_l >= bs_r)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')

;; ../../../../spec/2d1-runtime-numerics.watsup:251.1-251.29
def $bin_lt(val, val) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:253.1-253.47
   clause 0(val, val') = (i_l < i_r)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:254.1-256.31
   clause 1(val, val') = (i_l < i_r)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:257.1-257.57
   clause 2(val, val') = (bs_l < bs_r)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')

;; ../../../../spec/2d1-runtime-numerics.watsup:263.1-263.29
def $bin_gt(val, val) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:265.1-265.47
   clause 0(val, val') = (i_l > i_r)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_l) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_r) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:266.1-268.31
   clause 1(val, val') = (i_l > i_r)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:269.1-269.57
   clause 2(val, val') = (bs_l > bs_r)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')

;; ../../../../spec/2d1-runtime-numerics.watsup:275.1-275.29
def $bin_eq(val, val) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:279.1-279.66
   clause 0(val, val') = (member_a = member_b)
      -- if val matches `ErrV%`
      -- let `ErrV%`_val(member_a) = val
      -- if val' matches `ErrV%`
      -- let `ErrV%`_val(member_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:280.1-280.78
   clause 1(val, val') = (member_a = member_b)
      -- if val matches `MatchKindV%`
      -- let `MatchKindV%`_val(member_a) = val
      -- if val' matches `MatchKindV%`
      -- let `MatchKindV%`_val(member_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:281.1-281.58
   clause 2(val, val') = (text_a = text_b)
      -- if val matches `StrV%`
      -- let `StrV%`_val(text_a) = val
      -- if val' matches `StrV%`
      -- let `StrV%`_val(text_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:282.1-282.48
   clause 3(val, val') = (b_a = b_b)
      -- if val matches `BoolV%`
      -- let `BoolV%`_val(b_a) = val
      -- if val' matches `BoolV%`
      -- let `BoolV%`_val(b_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:283.1-283.46
   clause 4(val, val') = (i_a = i_b)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i_a) = val
      -- if val' matches `IntV%`
      -- let `IntV%`_val(i_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:284.1-284.56
   clause 5(val, val') = (bs_a = bs_b)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_a) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_b) = val'
      -- if (w = w')

   ;; ../../../../spec/2d1-runtime-numerics.watsup:285.1-285.56
   clause 6(val, val') = (bs_a = bs_b)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_a) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_b) = val'
      -- if (w = w')

   ;; ../../../../spec/2d1-runtime-numerics.watsup:286.1-286.60
   clause 7(val, val') = (bs_a = bs_b)
      -- if val matches `VBitV%%%`
      -- let `VBitV%%%`_val(w, _width, bs_a) = val
      -- if val' matches `VBitV%%%`
      -- let `VBitV%%%`_val(w', _width', bs_b) = val'
      -- if (w = w')

   ;; ../../../../spec/2d1-runtime-numerics.watsup:287.1-288.47
   clause 8(val, val') = ((id_a = id_b) /\ (member_a = member_b))
      -- if val matches `EnumFieldV%%`
      -- let `EnumFieldV%%`_val(id_a, member_a) = val
      -- if val' matches `EnumFieldV%%`
      -- let `EnumFieldV%%`_val(id_b, member_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:289.1-290.72
   clause 9(val, val') = (((id_a = id_b) /\ (member_a = member_b)) /\ $bin_eq(val_a, val_b))
      -- if val matches `SEnumFieldV%%%`
      -- let `SEnumFieldV%%%`_val(id_a, member_a, val_a) = val
      -- if val' matches `SEnumFieldV%%%`
      -- let `SEnumFieldV%%%`_val(id_b, member_b, val_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:291.1-291.67
   clause 10(val, val') = $bin_eqs(val_a*{val_a <- val_a*}, val_b*{val_b <- val_b*})
      -- if val matches `ListV%`
      -- let `ListV%`_val(val_a*{val_a <- val_a*}) = val
      -- if val' matches `ListV%`
      -- let `ListV%`_val(val_b*{val_b <- val_b*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:292.1-292.69
   clause 11(val, val') = $bin_eqs(val_a*{val_a <- val_a*}, val_b*{val_b <- val_b*})
      -- if val matches `TupleV%`
      -- let `TupleV%`_val(val_a*{val_a <- val_a*}) = val
      -- if val' matches `TupleV%`
      -- let `TupleV%`_val(val_b*{val_b <- val_b*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:293.1-294.58
   clause 12(val, val') = ($bin_eqs(val_a*{val_a <- val_a*}, val_b*{val_b <- val_b*}) /\ (i_size_a = i_size_b))
      -- if val matches `StackV%%%`
      -- let `StackV%%%`_val(val_a*{val_a <- val_a*}, _int, i_size_a) = val
      -- if val' matches `StackV%%%`
      -- let `StackV%%%`_val(val_b*{val_b <- val_b*}, _int', i_size_b) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:295.1-296.75
   clause 13(val, val') = ((id_a = id_b) /\ $bin_eqs_((member_a, val_a)*{member_a <- member_a*, val_a <- val_a*}, (member_b, val_b)*{member_b <- member_b*, val_b <- val_b*}))
      -- if val matches `StructV%%`
      -- let `StructV%%`_val(id_a, (member_a, val_a)*{member_a <- member_a*, val_a <- val_a*}) = val
      -- if val' matches `StructV%%`
      -- let `StructV%%`_val(id_b, (member_b, val_b)*{member_b <- member_b*, val_b <- val_b*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:297.1-298.90
   clause 14(val, val') = (((id_a = id_b) /\ (b_a = b_b)) /\ $bin_eqs_((member_a, val_a)*{member_a <- member_a*, val_a <- val_a*}, (member_b, val_b)*{member_b <- member_b*, val_b <- val_b*}))
      -- if val matches `HeaderV%%%`
      -- let `HeaderV%%%`_val(id_a, b_a, (member_a, val_a)*{member_a <- member_a*, val_a <- val_a*}) = val
      -- if val' matches `HeaderV%%%`
      -- let `HeaderV%%%`_val(id_b, b_b, (member_b, val_b)*{member_b <- member_b*, val_b <- val_b*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:299.1-300.75
   clause 15(val, val') = ((id_a = id_b) /\ $bin_eqs_((member_a, val_a)*{member_a <- member_a*, val_a <- val_a*}, (member_b, val_b)*{member_b <- member_b*, val_b <- val_b*}))
      -- if val matches `UnionV%%`
      -- let `UnionV%%`_val(id_a, (member_a, val_a)*{member_a <- member_a*, val_a <- val_a*}) = val
      -- if val' matches `UnionV%%`
      -- let `UnionV%%`_val(id_b, (member_b, val_b)*{member_b <- member_b*, val_b <- val_b*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:301.1-301.39
   clause 16(val, val') = true
      -- if val matches `InvalidV`
      -- if val' matches `InvalidV`

;; ../../../../spec/2d1-runtime-numerics.watsup:276.1-276.32
def $bin_eqs(val*, val*) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:303.1-303.30
   clause 0(val*{val <- val*}, val'*{val' <- val'*}) = true
      -- if val*{val <- val*} matches []
      -- if val'*{val' <- val'*} matches []

   ;; ../../../../spec/2d1-runtime-numerics.watsup:304.1-304.34
   clause 1(val*{val <- val*}, val'*{val' <- val'*}) = false
      -- if val*{val <- val*} matches []
      -- if val'*{val' <- val'*} matches _ :: _
      -- let _val :: _val'*{_val' <- _val'*} = val'*{val' <- val'*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:305.1-305.34
   clause 2(val*{val <- val*}, val'*{val' <- val'*}) = false
      -- if val*{val <- val*} matches _ :: _
      -- let _val :: _val'*{_val' <- _val'*} = val*{val <- val*}
      -- if val'*{val' <- val'*} matches []

   ;; ../../../../spec/2d1-runtime-numerics.watsup:306.1-307.60
   clause 3(val*{val <- val*}, val'*{val' <- val'*}) = ($bin_eq(val_ah, val_bh) /\ $bin_eqs(val_at*{val_at <- val_at*}, val_bt*{val_bt <- val_bt*}))
      -- if val*{val <- val*} matches _ :: _
      -- let val_ah :: val_at*{val_at <- val_at*} = val*{val <- val*}
      -- if val'*{val' <- val'*} matches _ :: _
      -- let val_bh :: val_bt*{val_bt <- val_bt*} = val'*{val' <- val'*}

;; ../../../../spec/2d1-runtime-numerics.watsup:277.1-277.53
def $bin_eqs_((member, val)*, (member, val)*) : bool =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:309.1-309.31
   clause 0((member, val)*{(member, val) <- (member, val)*}, (member, val)'*{(member, val)' <- (member, val)'*}) = true
      -- if (member, val)*{(member, val) <- (member, val)*} matches []
      -- if (member, val)'*{(member, val)' <- (member, val)'*} matches []

   ;; ../../../../spec/2d1-runtime-numerics.watsup:310.1-310.35
   clause 1((member, val)*{(member, val) <- (member, val)*}, (member, val)'*{(member, val)' <- (member, val)'*}) = false
      -- if (member, val)*{(member, val) <- (member, val)*} matches []
      -- if (member, val)'*{(member, val)' <- (member, val)'*} matches _ :: _
      -- let _(member, val) :: _(member, val)'*{_(member, val)' <- _(member, val)'*} = (member, val)'*{(member, val)' <- (member, val)'*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:311.1-311.35
   clause 2((member, val)*{(member, val) <- (member, val)*}, (member, val)'*{(member, val)' <- (member, val)'*}) = false
      -- if (member, val)*{(member, val) <- (member, val)*} matches _ :: _
      -- let _(member, val) :: _(member, val)'*{_(member, val)' <- _(member, val)'*} = (member, val)*{(member, val) <- (member, val)*}
      -- if (member, val)'*{(member, val)' <- (member, val)'*} matches []

   ;; ../../../../spec/2d1-runtime-numerics.watsup:312.1-313.85
   clause 3((member, val)*{(member, val) <- (member, val)*}, (member, val)'*{(member, val)' <- (member, val)'*}) = ($bin_eq(val_a, val_b) /\ $bin_eqs_((member_at, val_at)*{member_at <- member_at*, val_at <- val_at*}, (member_bt, val_bt)*{member_bt <- member_bt*, val_bt <- val_bt*}))
      -- if (member, val)*{(member, val) <- (member, val)*} matches _ :: _
      -- let (member, val_a) :: (member_at, val_at)*{member_at <- member_at*, val_at <- val_at*} = (member, val)*{(member, val) <- (member, val)*}
      -- if (member, val)'*{(member, val)' <- (member, val)'*} matches _ :: _
      -- let (member', val_b) :: (member_bt, val_bt)*{member_bt <- member_bt*, val_bt <- val_bt*} = (member, val)'*{(member, val)' <- (member, val)'*}
      -- if (member = member')

;; ../../../../spec/2d1-runtime-numerics.watsup:323.1-323.30
def $bin_band(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:325.1-329.28
   clause 0(val, val') = `FIntV%%`_val(w, $to_bitstr(w as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let i = $band(i_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:331.1-333.30
   clause 1(val, val') = `FBitV%%`_val(w, $to_bitstr(w as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i = $band(bs_l, bs_r)

;; ../../../../spec/2d1-runtime-numerics.watsup:339.1-339.30
def $bin_bxor(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:341.1-345.28
   clause 0(val, val') = `FIntV%%`_val(w, $to_bitstr(w as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let i = $bxor(i_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:347.1-349.30
   clause 1(val, val') = `FBitV%%`_val(w, $to_bitstr(w as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i = $bxor(bs_l, bs_r)

;; ../../../../spec/2d1-runtime-numerics.watsup:355.1-355.29
def $bin_bor(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:357.1-361.27
   clause 0(val, val') = `FIntV%%`_val(w, $to_bitstr(w as int, i))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i_l = $to_int(w as int, bs_l)
      -- let i_r = $to_int(w as int, bs_r)
      -- let i = $bor(i_l, i_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:363.1-365.29
   clause 1(val, val') = `FBitV%%`_val(w, $to_bitstr(w as int, i))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w', bs_r) = val'
      -- if (w = w')
      -- let i = $bor(bs_l, bs_r)

;; ../../../../spec/2d1-runtime-numerics.watsup:371.1-371.32
def $bin_concat(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:373.1-378.25
   clause 0(val, val') = `FIntV%%`_val(w, $to_bitstr(w as int, i_l''))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- let i_l' = $shl(i_l, w_r as int)
      -- let i_l'' = (i_l' + bs_r)
      -- let w = (w_l + w_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:379.1-384.25
   clause 1(val, val') = `FIntV%%`_val(w, $to_bitstr(w as int, i_l''))
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i_l = $to_int(w_l as int, bs_l)
      -- let i_l' = $shl(i_l, w_r as int)
      -- let i_l'' = (i_l' + bs_r)
      -- let w = (w_l + w_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:385.1-389.25
   clause 2(val, val') = `FBitV%%`_val(w, $to_bitstr(w as int, i_l'))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `FIntV%%`
      -- let `FIntV%%`_val(w_r, bs_r) = val'
      -- let i_l = $shl(bs_l, w_r as int)
      -- let i_l' = (i_l + bs_r)
      -- let w = (w_l + w_r)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:390.1-394.25
   clause 3(val, val') = `FBitV%%`_val(w, $to_bitstr(w as int, i_l'))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w_l, bs_l) = val
      -- if val' matches `FBitV%%`
      -- let `FBitV%%`_val(w_r, bs_r) = val'
      -- let i_l = $shl(bs_l, w_r as int)
      -- let i_l' = (i_l + bs_r)
      -- let w = (w_l + w_r)

;; ../../../../spec/2d1-runtime-numerics.watsup:400.1-400.30
def $bin_land(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:402.1-402.57
   clause 0(val, val') = `BoolV%`_val((b_l /\ b_r))
      -- if val matches `BoolV%`
      -- let `BoolV%`_val(b_l) = val
      -- if val' matches `BoolV%`
      -- let `BoolV%`_val(b_r) = val'

;; ../../../../spec/2d1-runtime-numerics.watsup:408.1-408.29
def $bin_lor(val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:410.1-410.56
   clause 0(val, val') = `BoolV%`_val((b_l \/ b_r))
      -- if val matches `BoolV%`
      -- let `BoolV%`_val(b_l) = val
      -- if val' matches `BoolV%`
      -- let `BoolV%`_val(b_r) = val'

;; ../../../../spec/2d1-runtime-numerics.watsup:418.1-418.29
def $cast_op(typ, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:435.1-435.48
   clause 0(typ, val) = $cast_bool(typ, b)
      -- if val matches `BoolV%`
      -- let `BoolV%`_val(b) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:452.1-452.46
   clause 1(typ, val) = $cast_int(typ, i)
      -- if val matches `IntV%`
      -- let `IntV%`_val(i) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:470.1-470.55
   clause 2(typ, val) = $cast_fint(typ, w, bs)
      -- if val matches `FIntV%%`
      -- let `FIntV%%`_val(w, bs) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:489.1-489.55
   clause 3(typ, val) = $cast_fbit(typ, w, bs)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bs) = val

   ;; ../../../../spec/2d1-runtime-numerics.watsup:493.1-493.60
   clause 4(typ, val') = $cast_op(typ, val)
      -- if val' matches `SEnumFieldV%%%`
      -- let `SEnumFieldV%%%`_val(_id, _member, val) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:506.1-506.85
   clause 5(typ, val') = $cast_struct(typ, id, (member, val)*{member <- member*, val <- val*})
      -- if val' matches `StructV%%`
      -- let `StructV%%`_val(id, (member, val)*{member <- member*, val <- val*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:519.1-519.90
   clause 6(typ, val') = $cast_header(typ, id, b, (member, val)*{member <- member*, val <- val*})
      -- if val' matches `HeaderV%%%`
      -- let `HeaderV%%%`_val(id, b, (member, val)*{member <- member*, val <- val*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:544.1-544.52
   clause 7(typ, val') = $cast_seq(typ, val*{val <- val*})
      -- if val' matches `SeqV%`
      -- let `SeqV%`_val(val*{val <- val*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:566.1-566.78
   clause 8(typ, val') = $cast_record(typ, (member, val)*{member <- member*, val <- val*})
      -- if val' matches `RecordV%`
      -- let `RecordV%`_val((member, val)*{member <- member*, val <- val*}) = val'

   ;; ../../../../spec/2d1-runtime-numerics.watsup:572.1-572.44
   clause 9(typ, val) = $default(typ)
      -- if val matches `DefaultV`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:587.1-587.49
   clause 10(typ, val) = $cast_invalid(typ)
      -- if val matches `InvalidV`

   ;; ../../../../spec/2d1-runtime-numerics.watsup:619.1-619.75
   clause 11(typ, val') = $cast_set_singleton(typ, val)
      -- if val' matches `SetV%`
      -- let `SetV%`_val(setval) = val'
      -- if setval matches `SingletonSet%`
      -- let `SingletonSet%`_setval(val) = setval

   ;; ../../../../spec/2d1-runtime-numerics.watsup:620.1-620.82
   clause 12(typ, val) = $cast_set_mask(typ, val_b, val_m)
      -- if val matches `SetV%`
      -- let `SetV%`_val(setval) = val
      -- if setval matches `MaskSet%%`
      -- let `MaskSet%%`_setval(val_b, val_m) = setval

   ;; ../../../../spec/2d1-runtime-numerics.watsup:621.1-621.84
   clause 13(typ, val) = $cast_set_range(typ, val_l, val_u)
      -- if val matches `SetV%`
      -- let `SetV%`_val(setval) = val
      -- if setval matches `RangeSet%%`
      -- let `RangeSet%%`_setval(val_l, val_u) = setval

;; ../../../../spec/2d1-runtime-numerics.watsup:420.1-420.24
def $default(typ) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:628.1-628.47
   clause 0(typ) = $default'($canon_typ(typ))

;; ../../../../spec/2d1-runtime-numerics.watsup:421.1-421.25
def $default'(typ) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:629.1-629.37
   clause 0(typ) = `ErrV%`_val("NoError")
      -- if (typ = `ErrT`_primtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:630.1-630.30
   clause 1(typ) = `StrV%`_val("")
      -- if (typ = `StrT`_primtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:631.1-631.35
   clause 2(typ) = `BoolV%`_val(false)
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:632.1-632.29
   clause 3(typ) = `IntV%`_val(0 as int)
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:633.1-633.35
   clause 4(typ) = `FIntV%%`_val(w, 0 as bitstr)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:634.1-634.35
   clause 5(typ) = `FBitV%%`_val(w, 0 as bitstr)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:635.1-635.37
   clause 6(typ) = `VBitV%%%`_val(w, 0, 0 as bitstr)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `VBitT%`
      -- let `VBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:636.1-636.65
   clause 7(typ) = `EnumFieldV%%`_val(id, member_h)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(id, member*{member <- member*}) = datatyp
      -- if member*{member <- member*} matches _ :: _
      -- let member_h :: _member*{_member <- _member*} = member*{member <- member*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:637.1-640.69
   clause 8(typ') = `SEnumFieldV%%%`_val(id, member_zero, val_zero)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id, typ, (member, val)*{member <- member*, val <- val*}) = datatyp
      -- let val_zero = $cast_int(typ, 0 as int)
      -- let member'?{member' <- member'?} = $assoc_<val, member>(val_zero, (val, member)*{member <- member*, val <- val*})
      -- if member'?{member' <- member'?} matches (_)
      -- let ?(member_zero) = member'?{member' <- member'?}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:641.1-644.61
   clause 9(typ') = `SEnumFieldV%%%`_val(id, "__UNSPECIFIED", val_zero)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id, typ, (member, val)*{member <- member*, val <- val*}) = datatyp
      -- let val_zero = $cast_int(typ, 0 as int)
      -- if (?() = $assoc_<val, member>(val_zero, (val, member)*{member <- member*, val <- val*}))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:645.1-645.53
   clause 10(typ') = `TupleV%`_val($default(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:646.1-648.49
   clause 11(typ') = `StackV%%%`_val(val*{val <- val*}, 0 as int, n_s as int)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, int) = datatyp
      -- if int <: nat
      -- let n_s = int as nat
      -- let val*{val <- val*} = $repeat_<val>($default(typ), n_s)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:649.1-650.40
   clause 12(typ') = `StructV%%`_val(id, (member, $default(typ))*{member <- member*, typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:651.1-652.46
   clause 13(typ') = `HeaderV%%%`_val(id, false, (member, $default(typ))*{member <- member*, typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:653.1-654.39
   clause 14(typ') = `UnionV%%`_val(id, (member, $default(typ))*{member <- member*, typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp

;; ../../../../spec/2d1-runtime-numerics.watsup:425.1-425.32
def $cast_bool(typ, bool) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:428.1-428.57
   clause 0(typ, b) = $cast_bool'($canon_typ(typ), b)

;; ../../../../spec/2d1-runtime-numerics.watsup:426.1-426.33
def $cast_bool'(typ, bool) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:430.1-430.36
   clause 0(typ, b) = `BoolV%`_val(b)
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:431.1-431.43
   clause 1(typ, bool) = `FBitV%%`_val(w, 1 as bitstr)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if (bool = true)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:432.1-432.44
   clause 2(typ, bool) = `FBitV%%`_val(w, 0 as bitstr)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if (bool = false)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:433.1-433.52
   clause 3(typ', b) = $cast_bool(typ, b)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

;; ../../../../spec/2d1-runtime-numerics.watsup:439.1-439.30
def $cast_int(typ, int) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:442.1-442.55
   clause 0(typ, i) = $cast_int'($canon_typ(typ), i)

;; ../../../../spec/2d1-runtime-numerics.watsup:440.1-440.31
def $cast_int'(typ, int) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:444.1-444.41
   clause 0(typ, i) = `BoolV%`_val((i = 0 as int))
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:445.1-445.33
   clause 1(typ, i) = `IntV%`_val(i)
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:446.1-446.56
   clause 2(typ, i) = `FIntV%%`_val(w, $to_bitstr(w as int, i))
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:447.1-447.56
   clause 3(typ, i) = `FBitV%%`_val(w, $to_bitstr(w as int, i))
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:448.1-448.50
   clause 4(typ', i) = $cast_int(typ, i)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:449.1-450.32
   clause 5(typ', i) = `SetV%`_val(`SingletonSet%`_setval(val))
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let val = $cast_int(typ, i)

;; ../../../../spec/2d1-runtime-numerics.watsup:456.1-456.41
def $cast_fint(typ, width, bitstr) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:459.1-459.65
   clause 0(typ, w, bs) = $cast_fint'($canon_typ(typ), w, bs)

;; ../../../../spec/2d1-runtime-numerics.watsup:457.1-457.42
def $cast_fint'(typ, width, bitstr) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:461.1-461.53
   clause 0(typ, w, bs) = `IntV%`_val($to_int(w as int, bs))
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:462.1-463.52
   clause 1(typ, w_from, bs) = `FIntV%%`_val(w_to, bs')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w_to) = numtyp
      -- let bs' = $to_bitstr(w_to as int, $to_int(w_from as int, bs))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:464.1-465.52
   clause 2(typ, w_from, bs) = `FBitV%%`_val(w_to, bs')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w_to) = numtyp
      -- let bs' = $to_bitstr(w_to as int, $to_int(w_from as int, bs))

   ;; ../../../../spec/2d1-runtime-numerics.watsup:466.1-466.60
   clause 3(typ', w, bs) = $cast_fint(typ, w, bs)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:467.1-468.37
   clause 4(typ', w, bs) = `SetV%`_val(`SingletonSet%`_setval(val))
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let val = $cast_fint(typ, w, bs)

;; ../../../../spec/2d1-runtime-numerics.watsup:474.1-474.41
def $cast_fbit(typ, width, bitstr) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:477.1-477.65
   clause 0(typ, w, bs) = $cast_fbit'($canon_typ(typ), w, bs)

;; ../../../../spec/2d1-runtime-numerics.watsup:475.1-475.42
def $cast_fbit'(typ, width, bitstr) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:479.1-479.47
   clause 0(typ, w, bs) = `BoolV%`_val((bs = 1 as bitstr))
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:480.1-480.39
   clause 1(typ, _width, bs) = `IntV%`_val(bs)
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:481.1-482.35
   clause 2(typ, _width, bs) = `FIntV%%`_val(w_to, bs')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w_to) = numtyp
      -- let bs' = $to_bitstr(w_to as int, bs)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:483.1-484.35
   clause 3(typ, _width, bs) = `FBitV%%`_val(w_to, bs')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w_to) = numtyp
      -- let bs' = $to_bitstr(w_to as int, bs)

   ;; ../../../../spec/2d1-runtime-numerics.watsup:485.1-485.60
   clause 4(typ', w, bs) = $cast_fbit(typ, w, bs)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:486.1-487.37
   clause 5(typ', w, bs) = `SetV%`_val(`SingletonSet%`_setval(val))
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let val = $cast_fbit(typ, w, bs)

;; ../../../../spec/2d1-runtime-numerics.watsup:497.1-497.48
def $cast_struct(typ, id, (member, val)*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:500.1-501.57
   clause 0(typ, id, (member, val)*{member <- member*, val <- val*}) = $cast_struct'($canon_typ(typ), id, (member, val)*{member <- member*, val <- val*})

;; ../../../../spec/2d1-runtime-numerics.watsup:498.1-498.49
def $cast_struct'(typ, id, (member, val)*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:503.1-504.30
   clause 0(typ, id', (member, val)*{member <- member*, val <- val*}) = `StructV%%`_val(id, (member, val)*{member <- member*, val <- val*})
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp
      -- if (id = id')

;; ../../../../spec/2d1-runtime-numerics.watsup:510.1-510.54
def $cast_header(typ, id, bool, (member, val)*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:513.1-514.60
   clause 0(typ, id, b, (member, val)*{member <- member*, val <- val*}) = $cast_header'($canon_typ(typ), id, b, (member, val)*{member <- member*, val <- val*})

;; ../../../../spec/2d1-runtime-numerics.watsup:511.1-511.55
def $cast_header'(typ, id, bool, (member, val)*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:516.1-517.32
   clause 0(typ, id', b, (member, val)*{member <- member*, val <- val*}) = `HeaderV%%%`_val(id, b, (member, val)*{member <- member*, val <- val*})
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp
      -- if (id = id')

;; ../../../../spec/2d1-runtime-numerics.watsup:523.1-523.31
def $cast_seq(typ, val*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:526.1-526.61
   clause 0(typ, val*{val <- val*}) = $cast_seq'($canon_typ(typ), val*{val <- val*})

;; ../../../../spec/2d1-runtime-numerics.watsup:524.1-524.32
def $cast_seq'(typ, val*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:528.1-529.37
   clause 0(typ', val*{val <- val*}) = `ListV%`_val(val'*{val' <- val'*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ) = datatyp
      -- (let val' = $cast_op(typ, val))*{val <- val*, val' <- val'*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:531.1-532.37
   clause 1(typ', val*{val <- val*}) = `TupleV%`_val(val'*{val' <- val'*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp
      -- (let val' = $cast_op(typ, val))*{typ <- typ*, val <- val*, val' <- val'*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:534.1-536.23
   clause 2(typ', val*{val <- val*}) = `StackV%%%`_val(val'*{val' <- val'*}, i_idx, i_size)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, i_size) = datatyp
      -- (let val' = $cast_op(typ, val))*{val <- val*, val' <- val'*}
      -- let i_idx = |val*{val <- val*}| as int

   ;; ../../../../spec/2d1-runtime-numerics.watsup:538.1-539.37
   clause 3(typ', val*{val <- val*}) = `StructV%%`_val(id, (member, val')*{member <- member*, val' <- val'*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp
      -- (let val' = $cast_op(typ, val))*{typ <- typ*, val <- val*, val' <- val'*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:541.1-542.37
   clause 4(typ', val*{val <- val*}) = `HeaderV%%%`_val(id, true, (member, val')*{member <- member*, val' <- val'*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member, typ)*{member <- member*, typ <- typ*}) = datatyp
      -- (let val' = $cast_op(typ, val))*{typ <- typ*, val <- val*, val' <- val'*}

;; ../../../../spec/2d1-runtime-numerics.watsup:550.1-550.44
def $cast_record(typ, (member, val)*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:553.1-554.53
   clause 0(typ, (member, val)*{member <- member*, val <- val*}) = $cast_record'($canon_typ(typ), (member, val)*{member <- member*, val <- val*})

;; ../../../../spec/2d1-runtime-numerics.watsup:551.1-551.45
def $cast_record'(typ, (member, val)*) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:556.1-559.39
   clause 0(typ', (member, val)*{member <- member*, val <- val*}) = `StructV%%`_val(id, (member_t, val'')*{member_t <- member_t*, val'' <- val''*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, (member_t, typ)*{member_t <- member_t*, typ <- typ*}) = datatyp
      -- (let val'''?{val''' <- val'''?} = $find_map<member, val>(`{%}`_set<pair<member, val>>(`%->%`_pair<member, val>(member, val)*{member <- member*, val <- val*}), member_t))*{member_t <- member_t*, val'''? <- val'''?*}
      -- (if val'''?{val''' <- val'''?} matches (_))*{val'''? <- val'''?*}
      -- (let ?(val') = val'''?{val''' <- val'''?})*{val' <- val'*, val'''? <- val'''?*}
      -- (let val'' = $cast_op(typ, val'))*{typ <- typ*, val' <- val'*, val'' <- val''*}

   ;; ../../../../spec/2d1-runtime-numerics.watsup:561.1-564.39
   clause 1(typ', (member, val)*{member <- member*, val <- val*}) = `HeaderV%%%`_val(id, true, (member_t, val'')*{member_t <- member_t*, val'' <- val''*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member_t, typ)*{member_t <- member_t*, typ <- typ*}) = datatyp
      -- (let val'''?{val''' <- val'''?} = $find_map<member, val>(`{%}`_set<pair<member, val>>(`%->%`_pair<member, val>(member, val)*{member <- member*, val <- val*}), member_t))*{member_t <- member_t*, val'''? <- val'''?*}
      -- (if val'''?{val''' <- val'''?} matches (_))*{val'''? <- val'''?*}
      -- (let ?(val') = val'''?{val''' <- val'''?})*{val' <- val'*, val'''? <- val'''?*}
      -- (let val'' = $cast_op(typ, val'))*{typ <- typ*, val' <- val'*, val'' <- val''*}

;; ../../../../spec/2d1-runtime-numerics.watsup:576.1-576.29
def $cast_invalid(typ) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:579.1-579.57
   clause 0(typ) = $cast_invalid'($canon_typ(typ))

;; ../../../../spec/2d1-runtime-numerics.watsup:577.1-577.30
def $cast_invalid'(typ) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:581.1-582.42
   clause 0(typ') = $default(`HeaderT%%`_datatyp(id, (member_t, typ)*{member_t <- member_t*, typ <- typ*}) as typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member_t, typ)*{member_t <- member_t*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d1-runtime-numerics.watsup:584.1-585.41
   clause 1(typ') = $default(`UnionT%%`_datatyp(id, (member_t, typ)*{member_t <- member_t*, typ <- typ*}) as typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id, (member_t, typ)*{member_t <- member_t*, typ <- typ*}) = datatyp

;; ../../../../spec/2d1-runtime-numerics.watsup:591.1-591.40
def $cast_set_singleton(typ, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:594.1-594.79
   clause 0(typ, val) = $cast_set_singleton'($canon_typ(typ), val)

;; ../../../../spec/2d1-runtime-numerics.watsup:592.1-592.41
def $cast_set_singleton'(typ, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:596.1-597.34
   clause 0(typ', val) = `SetV%`_val(`SingletonSet%`_setval(val'))
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let val' = $cast_op(typ, val)

;; ../../../../spec/2d1-runtime-numerics.watsup:599.1-599.40
def $cast_set_mask(typ, val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:602.1-602.87
   clause 0(typ, val_b, val_m) = $cast_set_mask'($canon_typ(typ), val_b, val_m)

;; ../../../../spec/2d1-runtime-numerics.watsup:600.1-600.41
def $cast_set_mask'(typ, val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:604.1-606.38
   clause 0(typ', val_b, val_m) = `SetV%`_val(`MaskSet%%`_setval(val_b', val_m'))
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let val_b' = $cast_op(typ, val_b)
      -- let val_m' = $cast_op(typ, val_m)

;; ../../../../spec/2d1-runtime-numerics.watsup:608.1-608.41
def $cast_set_range(typ, val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:611.1-612.54
   clause 0(typ, val_l, val_u) = $cast_set_range'($canon_typ(typ), val_l, val_u)

;; ../../../../spec/2d1-runtime-numerics.watsup:609.1-609.42
def $cast_set_range'(typ, val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:614.1-617.38
   clause 0(typ', val_l, val_u) = `SetV%`_val(`RangeSet%%`_setval(val_l', val_u'))
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let val_l' = $cast_op(typ, val_l)
      -- let val_u' = $cast_op(typ, val_u)

;; ../../../../spec/2d1-runtime-numerics.watsup:660.1-660.36
def $bitacc_op(val, val, val) : val =

   ;; ../../../../spec/2d1-runtime-numerics.watsup:662.1-667.35
   clause 0(val_b, val_h, val_l) = `FBitV%%`_val(w, i)
      -- let i_b = $get_num(val_b)
      -- let i_h = $get_num(val_h)
      -- let i_l = $get_num(val_l)
      -- let int = ((i_h + 1 as int) - i_l)
      -- if int <: nat
      -- let w = int as nat
      -- let i = $bitacc(i_b, i_h, i_l)

;; ../../../../spec/2d2-runtime-builtins.watsup:5.1-5.29
def $size(typ, member) : val =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:36.1-36.59
   clause 0(typ, text) = $size_minSizeInBits(typ)
      -- if (text = "minSizeInBits")

   ;; ../../../../spec/2d2-runtime-builtins.watsup:43.1-43.61
   clause 1(typ, text) = $size_minSizeInBytes(typ)
      -- if (text = "minSizeInBytes")

   ;; ../../../../spec/2d2-runtime-builtins.watsup:62.1-62.59
   clause 2(typ, text) = $size_maxSizeInBits(typ)
      -- if (text = "maxSizeInBits")

   ;; ../../../../spec/2d2-runtime-builtins.watsup:69.1-69.61
   clause 3(typ, text) = $size_maxSizeInBytes(typ)
      -- if (text = "maxSizeInBytes")

;; ../../../../spec/2d2-runtime-builtins.watsup:7.1-7.35
def $size_minSizeInBits(typ) : val =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:21.1-21.62
   clause 0(typ) = `IntV%`_val($size_minSizeInBits'(typ) as int)

;; ../../../../spec/2d2-runtime-builtins.watsup:8.1-8.36
def $size_minSizeInBits'(typ) : nat =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:22.1-22.71
   clause 0(typ) = $size_minSizeInBits''($canon_typ(typ))

;; ../../../../spec/2d2-runtime-builtins.watsup:9.1-9.37
def $size_minSizeInBits''(typ) : nat =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:24.1-24.37
   clause 0(typ) = 1
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2d2-runtime-builtins.watsup:25.1-25.39
   clause 1(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:26.1-26.39
   clause 2(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:27.1-27.39
   clause 3(typ) = 0
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `VBitT%`
      -- let `VBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:28.1-28.66
   clause 4(typ') = $size_minSizeInBits'(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:29.1-29.70
   clause 5(typ') = $size_minSizeInBits'(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:30.1-30.74
   clause 6(typ') = $sum($size_minSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:31.1-31.79
   clause 7(typ') = ($size_minSizeInBits'(typ) * n_s)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, int) = datatyp
      -- if int <: nat
      -- let n_s = int as nat

   ;; ../../../../spec/2d2-runtime-builtins.watsup:32.1-32.82
   clause 8(typ') = $sum($size_minSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:33.1-33.82
   clause 9(typ') = $sum($size_minSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:34.1-34.81
   clause 10(typ') = $min($size_minSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

;; ../../../../spec/2d2-runtime-builtins.watsup:11.1-11.36
def $size_minSizeInBytes(typ) : val =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:40.1-41.38
   clause 0(typ) = `IntV%`_val((n / 8) as int)
      -- let n = $size_minSizeInBits'(typ)

;; ../../../../spec/2d2-runtime-builtins.watsup:13.1-13.35
def $size_maxSizeInBits(typ) : val =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:47.1-47.62
   clause 0(typ) = `IntV%`_val($size_maxSizeInBits'(typ) as int)

;; ../../../../spec/2d2-runtime-builtins.watsup:14.1-14.36
def $size_maxSizeInBits'(typ) : nat =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:48.1-48.71
   clause 0(typ) = $size_maxSizeInBits''($canon_typ(typ))

;; ../../../../spec/2d2-runtime-builtins.watsup:15.1-15.37
def $size_maxSizeInBits''(typ) : nat =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:50.1-50.37
   clause 0(typ) = 1
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/2d2-runtime-builtins.watsup:51.1-51.39
   clause 1(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:52.1-52.39
   clause 2(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:53.1-53.39
   clause 3(typ) = w
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `VBitT%`
      -- let `VBitT%`_numtyp(w) = numtyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:54.1-54.66
   clause 4(typ') = $size_maxSizeInBits'(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:55.1-55.70
   clause 5(typ') = $size_maxSizeInBits'(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:56.1-56.74
   clause 6(typ') = $sum($size_maxSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ*{typ <- typ*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:57.1-57.79
   clause 7(typ') = ($size_maxSizeInBits'(typ) * n_s)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ, int) = datatyp
      -- if int <: nat
      -- let n_s = int as nat

   ;; ../../../../spec/2d2-runtime-builtins.watsup:58.1-58.82
   clause 8(typ') = $sum($size_maxSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:59.1-59.82
   clause 9(typ') = $sum($size_maxSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

   ;; ../../../../spec/2d2-runtime-builtins.watsup:60.1-60.81
   clause 10(typ') = $max($size_maxSizeInBits'(typ)*{typ <- typ*})
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, (_member, typ)*{_member <- _member*, typ <- typ*}) = datatyp

;; ../../../../spec/2d2-runtime-builtins.watsup:17.1-17.36
def $size_maxSizeInBytes(typ) : val =

   ;; ../../../../spec/2d2-runtime-builtins.watsup:66.1-67.38
   clause 0(typ) = `IntV%`_val((n / 8) as int)
      -- let n = $size_maxSizeInBits'(typ)

;; ../../../../spec/2e-runtime-env.watsup:11.15-11.31
syntax styp = 
   | `%%%%`(typ, dir, ctk, val?)

;; ../../../../spec/2e-runtime-env.watsup:18.16-18.29
syntax frame = map<id, styp>

;; ../../../../spec/2e-runtime-env.watsup:20.1-20.27
def $empty_frame : frame =

   ;; ../../../../spec/2e-runtime-env.watsup:21.1-21.42
   clause 0 = $empty_map<id, styp>

;; ../../../../spec/2e-runtime-env.watsup:24.16-24.32
syntax tdenv = map<tid, typdef>

;; ../../../../spec/2e-runtime-env.watsup:26.1-26.27
def $empty_tdenv : tdenv =

   ;; ../../../../spec/2e-runtime-env.watsup:27.1-27.45
   clause 0 = $empty_map<tid, typdef>

;; ../../../../spec/2e-runtime-env.watsup:30.16-30.33
syntax fdenv = map<fid, funcdef>

;; ../../../../spec/2e-runtime-env.watsup:32.1-32.27
def $empty_fdenv : fdenv =

   ;; ../../../../spec/2e-runtime-env.watsup:33.1-33.46
   clause 0 = $empty_map<fid, funcdef>

;; ../../../../spec/2e-runtime-env.watsup:36.16-36.33
syntax cdenv = map<fid, consdef>

;; ../../../../spec/2e-runtime-env.watsup:38.1-38.27
def $empty_cdenv : cdenv =

   ;; ../../../../spec/2e-runtime-env.watsup:39.1-39.46
   clause 0 = $empty_map<cid, consdef>

;; ../../../../spec/2e-runtime-env.watsup:45.1-45.36
def $check_func_name(id, id) : bool =

   ;; ../../../../spec/2e-runtime-env.watsup:46.1-46.47
   clause 0(id_l, id_r) = (id_l = id_r)

;; ../../../../spec/2e-runtime-env.watsup:48.1-48.42
def $check_arity_more(id?*, id*) : bool =

   ;; ../../../../spec/2e-runtime-env.watsup:49.1-49.62
   clause 0(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*}) = (|id_a?{id_a <- id_a?}*{id_a? <- id_a?*}| > |id_p*{id_p <- id_p*}|)

;; ../../../../spec/2e-runtime-env.watsup:51.1-51.37
def $check_arity(id?*, id*) : bool =

   ;; ../../../../spec/2e-runtime-env.watsup:52.1-52.57
   clause 0(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*}) = (|id_a?{id_a <- id_a?}*{id_a? <- id_a?*}| = |id_p*{id_p <- id_p*}|)

;; ../../../../spec/2e-runtime-env.watsup:54.1-54.42
def $check_arity_less(id?*, id*) : bool =

   ;; ../../../../spec/2e-runtime-env.watsup:55.1-55.62
   clause 0(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*}) = (|id_a?{id_a <- id_a?}*{id_a? <- id_a?*}| < |id_p*{id_p <- id_p*}|)

;; ../../../../spec/2e-runtime-env.watsup:57.1-57.54
def $get_params_missing_names((id, bool)*, id*) : id* =

   ;; ../../../../spec/2e-runtime-env.watsup:59.1-59.48
   clause 0((id, bool)*{(id, bool) <- (id, bool)*}, id_a*{id_a <- id_a*}) = []
      -- if (id, bool)*{(id, bool) <- (id, bool)*} matches []

   ;; ../../../../spec/2e-runtime-env.watsup:61.1-66.41
   clause 1((id, bool)*{(id, bool) <- (id, bool)*}, id_a*{id_a <- id_a*}) = id_p_h :: $get_params_missing_names((id_p_t, bool_p_t)*{bool_p_t <- bool_p_t*, id_p_t <- id_p_t*}, id_a*{id_a <- id_a*})
      -- if (id, bool)*{(id, bool) <- (id, bool)*} matches _ :: _
      -- let (id_p_h, bool) :: (id_p_t, bool_p_t)*{bool_p_t <- bool_p_t*, id_p_t <- id_p_t*} = (id, bool)*{(id, bool) <- (id, bool)*}
      -- if (bool = true)
      -- if ~$in_set<id>(id_p_h, `{%}`_set<id>(id_a*{id_a <- id_a*}))

   ;; ../../../../spec/2e-runtime-env.watsup:68.1-73.15
   clause 2((id, bool)*{(id, bool) <- (id, bool)*}, id_a*{id_a <- id_a*}) = $get_params_missing_names((id_p_t, bool_p_t)*{bool_p_t <- bool_p_t*, id_p_t <- id_p_t*}, id_a*{id_a <- id_a*})
      -- if (id, bool)*{(id, bool) <- (id, bool)*} matches _ :: _
      -- let (id_p_h, bool_p_h) :: (id_p_t, bool_p_t)*{bool_p_t <- bool_p_t*, id_p_t <- id_p_t*} = (id, bool)*{(id, bool) <- (id, bool)*}
      -- otherwise

;; ../../../../spec/2e-runtime-env.watsup:76.1-76.68
def $find_match_named<V>(fid, V, id*, (id, bool)*) : (fid, V, id*)? =

   ;; ../../../../spec/2e-runtime-env.watsup:78.1-79.44
   clause 0(fid, V, id_a*{id_a <- id_a*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = ?((fid, V, []))
      -- if $eq_set<id>(`{%}`_set<id>(id_a*{id_a <- id_a*}), `{%}`_set<id>(id_p*{id_p <- id_p*}))

   ;; ../../../../spec/2e-runtime-env.watsup:81.1-82.15
   clause 1(fid, V, id_a*{id_a <- id_a*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = ?()
      -- otherwise

;; ../../../../spec/2e-runtime-env.watsup:85.1-85.76
def $find_match_named_default<V>(fid, V, id*, (id, bool)*) : (fid, V, id*)? =

   ;; ../../../../spec/2e-runtime-env.watsup:87.1-89.81
   clause 0(fid, V, id_a*{id_a <- id_a*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = ?((fid, V, id_deft*{id_deft <- id_deft*}))
      -- let id_deft*{id_deft <- id_deft*} = $get_params_missing_names((id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}, id_a*{id_a <- id_a*})
      -- if ($find_match_named<V>(fid, V, id_a*{id_a <- id_a*} ++ id_deft*{id_deft <- id_deft*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) =/= ?())

   ;; ../../../../spec/2e-runtime-env.watsup:91.1-92.15
   clause 1(fid, V, id_a*{id_a <- id_a*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = ?()
      -- otherwise

;; ../../../../spec/2e-runtime-env.watsup:95.1-95.81
def $find_match_unnamed_default<V>(fid, V, id?*, (id, bool)*) : (fid, V, id*)? =

   ;; ../../../../spec/2e-runtime-env.watsup:97.1-98.95
   clause 0(fid, V, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = ?((fid, V, id_deft*{id_deft <- id_deft*}))
      -- let ((id, bool)*{bool <- bool*, id <- id*}, (id_deft, bool')*{bool' <- bool'*, id_deft <- id_deft*}) = $partition_<(id, bool)>((id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}, |id_a?{id_a <- id_a?}*{id_a? <- id_a?*}|)
      -- (if (bool' = true))*{bool' <- bool'*}

   ;; ../../../../spec/2e-runtime-env.watsup:100.1-101.15
   clause 1(fid, V, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = ?()
      -- otherwise

;; ../../../../spec/2e-runtime-env.watsup:104.1-104.69
def $find_matching_func<V>(id, id?*, id*, fid, V) : (fid, V, id*)? =

   ;; ../../../../spec/2e-runtime-env.watsup:107.1-108.39
   clause 0(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, `%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V) = ?()
      -- if ~$check_func_name(id_f, id_f')

   ;; ../../../../spec/2e-runtime-env.watsup:111.1-113.43
   clause 1(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, `%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V) = ?()
      -- if $check_func_name(id_f, id_f')
      -- if $check_arity_more(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*})

   ;; ../../../../spec/2e-runtime-env.watsup:116.1-120.38
   clause 2(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, `%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V) = $find_match_named<V>(`%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V, id_a'*{id_a' <- id_a'*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*})
      -- if (|id_a'*{id_a' <- id_a'*}| > 0)
      -- if $check_func_name(id_f, id_f')
      -- if $check_arity(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*})

   ;; ../../../../spec/2e-runtime-env.watsup:123.1-125.38
   clause 3(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id*{id <- id*}, `%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V) = ?((`%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V, []))
      -- if id*{id <- id*} matches []
      -- if $check_func_name(id_f, id_f')
      -- if $check_arity(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*})

   ;; ../../../../spec/2e-runtime-env.watsup:128.1-132.43
   clause 4(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, `%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V) = $find_match_named_default<V>(`%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V, id_a'*{id_a' <- id_a'*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*})
      -- if (|id_a'*{id_a' <- id_a'*}| > 0)
      -- if $check_func_name(id_f, id_f')
      -- if $check_arity_less(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*})

   ;; ../../../../spec/2e-runtime-env.watsup:135.1-138.43
   clause 5(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id*{id <- id*}, `%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V) = $find_match_unnamed_default<V>(`%%`_fid(id_f', (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}), V, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*})
      -- if id*{id <- id*} matches []
      -- if $check_func_name(id_f, id_f')
      -- if $check_arity_less(id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_p*{id_p <- id_p*})

;; ../../../../spec/2e-runtime-env.watsup:141.1-141.72
def $find_matching_funcs<V>(id, id?*, id*, fid*, V*) : (fid, V, id*)* =

   ;; ../../../../spec/2e-runtime-env.watsup:143.1-143.68
   clause 0(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid*{fid <- fid*}, V*{V <- V*}) = []
      -- if fid*{fid <- fid*} matches []
      -- if V*{V <- V*} matches []

   ;; ../../../../spec/2e-runtime-env.watsup:145.1-147.73
   clause 1(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid*{fid <- fid*}, V*{V <- V*}) = $find_matching_funcs<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid_t*{fid_t <- fid_t*}, V_t*{V_t <- V_t*})
      -- if fid*{fid <- fid*} matches _ :: _
      -- let fid_h :: fid_t*{fid_t <- fid_t*} = fid*{fid <- fid*}
      -- if V*{V <- V*} matches _ :: _
      -- let V_h :: V_t*{V_t <- V_t*} = V*{V <- V*}
      -- if ($find_matching_func<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid_h, V_h) = ?())

   ;; ../../../../spec/2e-runtime-env.watsup:149.1-151.88
   clause 2(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid'*{fid' <- fid'*}, V'*{V' <- V'*}) = (fid, V, id_deft*{id_deft <- id_deft*}) :: $find_matching_funcs<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid_t*{fid_t <- fid_t*}, V_t*{V_t <- V_t*})
      -- if fid'*{fid' <- fid'*} matches _ :: _
      -- let fid_h :: fid_t*{fid_t <- fid_t*} = fid'*{fid' <- fid'*}
      -- if V'*{V' <- V'*} matches _ :: _
      -- let V_h :: V_t*{V_t <- V_t*} = V'*{V' <- V'*}
      -- let (fid, V, id*)?{(fid, V, id*) <- (fid, V, id*)?} = $find_matching_func<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid_h, V_h)
      -- if (fid, V, id*)?{(fid, V, id*) <- (fid, V, id*)?} matches (_)
      -- let ?((fid, V, id_deft*{id_deft <- id_deft*})) = (fid, V, id*)?{(fid, V, id*) <- (fid, V, id*)?}

;; ../../../../spec/2e-runtime-env.watsup:154.1-154.60
def $find_func<V>(id, id?*, map<fid, V>) : (fid, V, id*)? =

   ;; ../../../../spec/2e-runtime-env.watsup:157.1-160.72
   clause 0(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, `{%}`_set<pair<fid, V>>(`%->%`_pair<fid, V>(fid, V)*{V <- V*, fid <- fid*})) = ?()
      -- if (|id_a?{id_a <- id_a?}*{id_a? <- id_a?*}| > 0)
      -- (let id?{id <- id?} = id_a?{id_a <- id_a?})*{id? <- id?*, id_a? <- id_a?*}
      -- (if id?{id <- id?} matches (_))*{id? <- id?*}
      -- (let ?(id_a') = id?{id <- id?})*{id? <- id?*, id_a' <- id_a'*}
      -- if ($find_matching_funcs<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid*{fid <- fid*}, V*{V <- V*}) = [])

   ;; ../../../../spec/2e-runtime-env.watsup:162.1-165.89
   clause 1(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, `{%}`_set<pair<fid, V>>(`%->%`_pair<fid, V>(fid, V)*{V <- V*, fid <- fid*})) = ?((fid', V', id_deft*{id_deft <- id_deft*}))
      -- if (|id_a?{id_a <- id_a?}*{id_a? <- id_a?*}| > 0)
      -- (let id?{id <- id?} = id_a?{id_a <- id_a?})*{id? <- id?*, id_a? <- id_a?*}
      -- (if id?{id <- id?} matches (_))*{id? <- id?*}
      -- (let ?(id_a') = id?{id <- id?})*{id? <- id?*, id_a' <- id_a'*}
      -- let (fid, V, id*)*{(fid, V, id*) <- (fid, V, id*)*} = $find_matching_funcs<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, id_a'*{id_a' <- id_a'*}, fid*{fid <- fid*}, V*{V <- V*})
      -- if (fid, V, id*)*{(fid, V, id*) <- (fid, V, id*)*} matches [ _/1 ]
      -- let [(fid', V', id_deft*{id_deft <- id_deft*})] = (fid, V, id*)*{(fid, V, id*) <- (fid, V, id*)*}

   ;; ../../../../spec/2e-runtime-env.watsup:168.1-170.69
   clause 2(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, `{%}`_set<pair<fid, V>>(`%->%`_pair<fid, V>(fid, V)*{V <- V*, fid <- fid*})) = ?()
      -- (if (id_a?{id_a <- id_a?} = ?()))*{id_a? <- id_a?*}
      -- if ($find_matching_funcs<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, [], fid*{fid <- fid*}, V*{V <- V*}) = [])

   ;; ../../../../spec/2e-runtime-env.watsup:172.1-174.86
   clause 3(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, `{%}`_set<pair<fid, V>>(`%->%`_pair<fid, V>(fid, V)*{V <- V*, fid <- fid*})) = ?((fid', V', id_deft*{id_deft <- id_deft*}))
      -- (if (id_a?{id_a <- id_a?} = ?()))*{id_a? <- id_a?*}
      -- let (fid, V, id*)*{(fid, V, id*) <- (fid, V, id*)*} = $find_matching_funcs<V>(id_f, id_a?{id_a <- id_a?}*{id_a? <- id_a?*}, [], fid*{fid <- fid*}, V*{V <- V*})
      -- if (fid, V, id*)*{(fid, V, id*) <- (fid, V, id*)*} matches [ _/1 ]
      -- let [(fid', V', id_deft*{id_deft <- id_deft*})] = (fid, V, id*)*{(fid, V, id*) <- (fid, V, id*)*}

;; ../../../../spec/2e-runtime-env.watsup:177.1-177.53
def $find_funcs_by_name<V>(id, fid*, V*) : (fid, V)* =

   ;; ../../../../spec/2e-runtime-env.watsup:179.1-179.49
   clause 0(id_f, fid*{fid <- fid*}, V*{V <- V*}) = []
      -- if fid*{fid <- fid*} matches []
      -- if V*{V <- V*} matches []

   ;; ../../../../spec/2e-runtime-env.watsup:180.1-182.20
   clause 1(id_f, fid*{fid <- fid*}, V*{V <- V*}) = (`%%`_fid(id_h, (id_p_h, bool_p_h)*{bool_p_h <- bool_p_h*, id_p_h <- id_p_h*}), V_h) :: $find_funcs_by_name<V>(id_f, fid_t*{fid_t <- fid_t*}, V_t*{V_t <- V_t*})
      -- if fid*{fid <- fid*} matches _ :: _
      -- let `%%`_fid(id_h, (id_p_h, bool_p_h)*{bool_p_h <- bool_p_h*, id_p_h <- id_p_h*}) :: fid_t*{fid_t <- fid_t*} = fid*{fid <- fid*}
      -- if V*{V <- V*} matches _ :: _
      -- let V_h :: V_t*{V_t <- V_t*} = V*{V <- V*}
      -- if (id_f = id_h)

   ;; ../../../../spec/2e-runtime-env.watsup:183.1-185.15
   clause 2(id_f, fid*{fid <- fid*}, V*{V <- V*}) = $find_funcs_by_name<V>(id_f, fid_t*{fid_t <- fid_t*}, V_t*{V_t <- V_t*})
      -- if fid*{fid <- fid*} matches _ :: _
      -- let _fid :: fid_t*{fid_t <- fid_t*} = fid*{fid <- fid*}
      -- if V*{V <- V*} matches _ :: _
      -- let _V :: V_t*{V_t <- V_t*} = V*{V <- V*}
      -- otherwise

;; ../../../../spec/2e-runtime-env.watsup:188.1-188.64
def $find_func_by_name(id, map<fid, funcdef>) : (fid, funcdef)? =

   ;; ../../../../spec/2e-runtime-env.watsup:190.1-191.60
   clause 0(id_f, `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid, fd)*{fd <- fd*, fid <- fid*})) = ?()
      -- if ([] = $find_funcs_by_name<funcdef>(id_f, fid*{fid <- fid*}, fd*{fd <- fd*}))

   ;; ../../../../spec/2e-runtime-env.watsup:192.1-193.70
   clause 1(id_f, `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid, fd)*{fd <- fd*, fid <- fid*})) = ?((fid_f, fd_f))
      -- let (fid, funcdef)*{(fid, funcdef) <- (fid, funcdef)*} = $find_funcs_by_name<funcdef>(id_f, fid*{fid <- fid*}, fd*{fd <- fd*})
      -- if (fid, funcdef)*{(fid, funcdef) <- (fid, funcdef)*} matches [ _/1 ]
      -- let [(fid_f, fd_f)] = (fid, funcdef)*{(fid, funcdef) <- (fid, funcdef)*}

;; ../../../../spec/2f-runtime-ctk.watsup:5.14-5.30
syntax ctk = 
   | `LCTK`()
   | `CTK`()
   | `DYN`()

;; ../../../../spec/2f-runtime-ctk.watsup:7.1-7.30
def $join_ctk(ctk, ctk) : ctk =

   ;; ../../../../spec/2f-runtime-ctk.watsup:9.1-9.33
   clause 0(ctk, ctk') = `LCTK`_ctk()
      -- if ctk matches `LCTK`
      -- if ctk' matches `LCTK`

   ;; ../../../../spec/2f-runtime-ctk.watsup:10.1-10.31
   clause 1(ctk, ctk') = `CTK`_ctk()
      -- if ctk matches `LCTK`
      -- if ctk' matches `CTK`

   ;; ../../../../spec/2f-runtime-ctk.watsup:11.1-11.31
   clause 2(ctk, ctk') = `CTK`_ctk()
      -- if ctk matches `CTK`
      -- if ctk' matches `LCTK`

   ;; ../../../../spec/2f-runtime-ctk.watsup:12.1-12.30
   clause 3(ctk, ctk') = `CTK`_ctk()
      -- if ctk matches `CTK`
      -- if ctk' matches `CTK`

   ;; ../../../../spec/2f-runtime-ctk.watsup:13.1-14.15
   clause 4(ctk_a, ctk_b) = `DYN`_ctk()
      -- otherwise

;; ../../../../spec/2f-runtime-ctk.watsup:16.1-16.27
def $joins_ctk(ctk*) : ctk =

   ;; ../../../../spec/2f-runtime-ctk.watsup:18.1-18.27
   clause 0(ctk*{ctk <- ctk*}) = `LCTK`_ctk()
      -- if ctk*{ctk <- ctk*} matches []

   ;; ../../../../spec/2f-runtime-ctk.watsup:19.1-19.26
   clause 1(ctk'*{ctk' <- ctk'*}) = ctk
      -- if ctk'*{ctk' <- ctk'*} matches [ _/1 ]
      -- let [ctk] = ctk'*{ctk' <- ctk'*}

   ;; ../../../../spec/2f-runtime-ctk.watsup:20.1-20.57
   clause 2(ctk'*{ctk' <- ctk'*}) = $join_ctk(ctk_a, ctk_b)
      -- if ctk'*{ctk' <- ctk'*} matches _ :: _
      -- let ctk_a :: ctk*{ctk <- ctk*} = ctk'*{ctk' <- ctk'*}
      -- if ctk*{ctk <- ctk*} matches [ _/1 ]
      -- let [ctk_b] = ctk*{ctk <- ctk*}

   ;; ../../../../spec/2f-runtime-ctk.watsup:21.1-22.40
   clause 3(ctk'*{ctk' <- ctk'*}) = $joins_ctk(ctk_d :: ctk_c*{ctk_c <- ctk_c*})
      -- if ctk'*{ctk' <- ctk'*} matches _ :: _
      -- let ctk_a :: ctk*{ctk <- ctk*} = ctk'*{ctk' <- ctk'*}
      -- if ctk*{ctk <- ctk*} matches _ :: _
      -- let ctk_b :: ctk_c*{ctk_c <- ctk_c*} = ctk*{ctk <- ctk*}
      -- let ctk_d = $join_ctk(ctk_a, ctk_b)

;; ../../../../spec/2g-runtime-flow.watsup:5.15-5.25
syntax flow = 
   | `CONT`()
   | `RET`()

;; ../../../../spec/2g-runtime-flow.watsup:9.1-9.34
def $join_flow(flow, flow) : flow =

   ;; ../../../../spec/2g-runtime-flow.watsup:11.1-11.31
   clause 0(flow, flow') = `RET`_flow()
      -- if flow matches `RET`
      -- if flow' matches `RET`

   ;; ../../../../spec/2g-runtime-flow.watsup:12.1-12.32
   clause 1(f_a, f_b) = `CONT`_flow()

;; ../../../../spec/3a-syntax-il.watsup:5.16-5.19
syntax numIL = num

;; ../../../../spec/3a-syntax-il.watsup:15.15-15.17
syntax idIL = id

;; ../../../../spec/3a-syntax-il.watsup:21.17-21.21
syntax nameIL = name

;; ../../../../spec/3a-syntax-il.watsup:27.19-27.23
syntax memberIL = idIL

;; ../../../../spec/3a-syntax-il.watsup:33.22-33.26
syntax matchkindIL = idIL

;; ../../../../spec/3a-syntax-il.watsup:39.23-39.27
syntax statelabelIL = idIL

;; ../../../../spec/3a-syntax-il.watsup:45.17-45.21
syntax unopIL = unop

;; ../../../../spec/3a-syntax-il.watsup:51.18-51.23
syntax binopIL = binop

;; ../../../../spec/3a-syntax-il.watsup:57.16-57.19
syntax dirIL = dir

;; ../../../../spec/3a-syntax-il.watsup:69.17-69.20
syntax typeIL = typ

;; ../../../../spec/3a-syntax-il.watsup:75.19-75.21
syntax tparamIL = id

;; ../../../../spec/3a-syntax-il.watsup:81.18-81.43
syntax paramIL = 
   | `%%%%`(idIL, dirIL, typeIL, exprIL?)

;; ../../../../spec/3a-syntax-il.watsup:87.19-87.26
syntax cparamIL = paramIL

;; ../../../../spec/3a-syntax-il.watsup:93.17-93.23
syntax targIL = typeIL

;; ../../../../spec/3a-syntax-il.watsup:100.1-102.9
syntax argIL = 
   | `ExprA%`(exprIL)
   | `NameA%%`(idIL, exprIL?)
   | `AnyA`()

;; ../../../../spec/3a-syntax-il.watsup:109.1-111.9
syntax keysetIL = 
   | `ExprK%`(exprIL)
   | `DefaultK`()
   | `AnyK`()

;; ../../../../spec/3a-syntax-il.watsup:117.23-117.45
syntax selectcaseIL = 
   | `%%`(keysetIL*, statelabelIL)

;; ../../../../spec/3a-syntax-il.watsup:123.18-123.29
syntax annotIL = 
   | `(%;%)`(typ, ctk)

;; ../../../../spec/3a-syntax-il.watsup:125.1-151.40
syntax exprIL = 
   | `ValueE%%`(val, annotIL)
   | `BoolE%%`(bool, annotIL)
   | `StrE%%`(text, annotIL)
   | `NumE%%`(num, annotIL)
   | `NameE%%`(nameIL, annotIL)
   | `SeqE%%`(exprIL*, annotIL)
   | `SeqDefaultE%%`(exprIL*, annotIL)
   | `RecordE%%`((memberIL, exprIL)*, annotIL)
   | `RecordDefaultE%%`((memberIL, exprIL)*, annotIL)
   | `DefaultE%`(annotIL)
   | `InvalidE%`(annotIL)
   | `UnE%%%`(unopIL, exprIL, annotIL)
   | `BinE%%%%`(binopIL, exprIL, exprIL, annotIL)
   | `TernE%%%%`(exprIL, exprIL, exprIL, annotIL)
   | `CastE%%%`(typeIL, exprIL, annotIL)
   | `MaskE%%%`(exprIL, exprIL, annotIL)
   | `RangeE%%%`(exprIL, exprIL, annotIL)
   | `SelectE%%%`(exprIL*, selectcaseIL*, annotIL)
   | `ArrAccE%%%`(exprIL, exprIL, annotIL)
   | `BitAccE%%%%`(exprIL, exprIL, exprIL, annotIL)
   | `ErrAccE%%`(memberIL, annotIL)
   | `TypeAccE%%%`(nameIL, memberIL, annotIL)
   | `ExprAccE%%%`(exprIL, memberIL, annotIL)
   | `CallFuncE%%%%`(nameIL, targIL*, argIL*, annotIL)
   | `CallMethodE%%%%%`(exprIL, memberIL, targIL*, argIL*, annotIL)
   | `CallTypeE%%%%%`(nameIL, memberIL, targIL*, argIL*, annotIL)
   | `InstE%%%%`(nameIL, targIL*, argIL*, annotIL)

;; ../../../../spec/3a-syntax-il.watsup:157.18-157.32
syntax blockIL = 
   | `BlockB%`(stmtIL*)

;; ../../../../spec/3a-syntax-il.watsup:164.1-175.17
syntax stmtIL = 
   | `EmptyS`()
   | `AssignS%%`(exprIL, exprIL)
   | `SwitchS%%`(exprIL, switchcaseIL*)
   | `IfS%%%`(exprIL, stmtIL, stmtIL)
   | `BlockS%`(blockIL)
   | `ExitS`()
   | `RetS%`(exprIL?)
   | `CallFuncS%%%`(nameIL, targIL*, argIL*)
   | `CallMethodS%%%%`(exprIL, memberIL, targIL*, argIL*)
   | `CallInstS%%%%`(typeIL, nameIL, targIL*, argIL*)
   | `TransS%`(exprIL)
   | `DeclS%`(declIL)

;; ../../../../spec/3a-syntax-il.watsup:182.1-183.13
syntax switchlabelIL = 
   | `ExprL%`(exprIL)
   | `DefaultL`()

;; ../../../../spec/3a-syntax-il.watsup:186.1-187.24
syntax switchcaseIL = 
   | `MatchC%%`(switchlabelIL, blockIL)
   | `FallC%`(switchlabelIL)

;; ../../../../spec/3a-syntax-il.watsup:193.24-193.44
syntax parserstateIL = 
   | `%%`(statelabelIL, blockIL)

;; ../../../../spec/3a-syntax-il.watsup:199.16-199.26
syntax tblIL = tblpropIL*

;; ../../../../spec/3a-syntax-il.watsup:205.19-205.37
syntax tblkeyIL = 
   | `%%`(exprIL, matchkindIL)

;; ../../../../spec/3a-syntax-il.watsup:206.23-206.32
syntax tblkeypropIL = tblkeyIL*

;; ../../../../spec/3a-syntax-il.watsup:212.22-212.53
syntax tblactionIL = 
   | `%%%%`(nameIL, argIL*, paramIL*, paramIL*)

;; ../../../../spec/3a-syntax-il.watsup:213.26-213.38
syntax tblactionpropIL = tblactionIL*

;; ../../../../spec/3a-syntax-il.watsup:219.21-219.52
syntax tblentryIL = 
   | `%%%%`(bool, keysetIL*, tblactionIL, val?)

;; ../../../../spec/3a-syntax-il.watsup:220.25-220.41
syntax tblentrypropIL = 
   | `%%`(bool, tblentryIL*)

;; ../../../../spec/3a-syntax-il.watsup:226.27-226.43
syntax tbldefaultpropIL = 
   | `%%`(bool, tblactionIL)

;; ../../../../spec/3a-syntax-il.watsup:232.26-232.46
syntax tblcustompropIL = 
   | `%%%`(bool, memberIL, exprIL)

;; ../../../../spec/3a-syntax-il.watsup:239.1-243.28
syntax tblpropIL = 
   | `KeyP%`(tblkeypropIL)
   | `ActionP%`(tblactionpropIL)
   | `EntryP%`(tblentrypropIL)
   | `DefaultP%`(tbldefaultpropIL)
   | `CustomP%`(tblcustompropIL)

;; ../../../../spec/3a-syntax-il.watsup:250.1-252.53
syntax methodIL = 
   | `ExternConsM%%%`(idIL, tparamIL*, cparamIL*)
   | `ExternAbstractM%%%%%`(idIL, typeIL, tparamIL*, tparamIL*, paramIL*)
   | `ExternM%%%%%`(idIL, typeIL, tparamIL*, tparamIL*, paramIL*)

;; ../../../../spec/3a-syntax-il.watsup:261.1-283.52
syntax declIL = 
   | `ConstD%%%`(idIL, typeIL, val)
   | `VarD%%%`(idIL, typeIL, exprIL?)
   | `ErrD%`(memberIL*)
   | `MatchKindD%`(memberIL*)
   | `InstD%%%%%%`(idIL, typeIL, nameIL, targIL*, argIL*, declIL*)
   | `StructD%%%%`(idIL, tparamIL*, tparamIL*, (memberIL, typeIL)*)
   | `HeaderD%%%%`(idIL, tparamIL*, tparamIL*, (memberIL, typeIL)*)
   | `UnionD%%%%`(idIL, tparamIL*, tparamIL*, (memberIL, typeIL)*)
   | `EnumD%%`(idIL, memberIL*)
   | `SEnumD%%%`(idIL, typeIL, (memberIL, val)*)
   | `NewTypeD%%`(idIL, typedefIL)
   | `TypeDefD%%`(idIL, typedefIL)
   | `ValueSetD%%%`(idIL, typeIL, exprIL)
   | `ParserTypeD%%%%`(idIL, tparamIL*, tparamIL*, paramIL*)
   | `ParserD%%%%%`(idIL, paramIL*, cparamIL*, declIL*, parserstateIL*)
   | `TableD%%%`(idIL, typeIL, tblIL)
   | `ControlTypeD%%%%`(idIL, tparamIL*, tparamIL*, paramIL*)
   | `ControlD%%%%%`(idIL, paramIL*, cparamIL*, declIL*, blockIL)
   | `ActionD%%%`(idIL, paramIL*, blockIL)
   | `FuncD%%%%%%`(idIL, typeIL, tparamIL*, tparamIL*, paramIL*, blockIL)
   | `ExternFuncD%%%%%`(idIL, typeIL, tparamIL*, tparamIL*, paramIL*)
   | `ExternObjectD%%%`(idIL, tparamIL*, methodIL*)
   | `PackageTypeD%%%%`(idIL, tparamIL*, tparamIL*, cparamIL*)

;; ../../../../spec/3a-syntax-il.watsup:286.1-287.17
syntax typedefIL = 
   | `TypeD%`(typeIL)
   | `DeclD%`(declIL)

;; ../../../../spec/3a-syntax-il.watsup:293.20-293.27
syntax programIL = declIL*

;; ../../../../spec/3b-syntax-il-aux.watsup:5.1-5.29
def $annot(exprIL) : annotIL =

   ;; ../../../../spec/3b-syntax-il-aux.watsup:7.1-7.39
   clause 0(exprIL) = annotIL
      -- if exprIL matches `ValueE%%`
      -- let `ValueE%%`_exprIL(_val, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:8.1-8.38
   clause 1(exprIL) = annotIL
      -- if exprIL matches `BoolE%%`
      -- let `BoolE%%`_exprIL(_bool, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:9.1-9.37
   clause 2(exprIL) = annotIL
      -- if exprIL matches `StrE%%`
      -- let `StrE%%`_exprIL(_text, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:10.1-10.37
   clause 3(exprIL) = annotIL
      -- if exprIL matches `NumE%%`
      -- let `NumE%%`_exprIL(_num, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:11.1-11.38
   clause 4(exprIL) = annotIL
      -- if exprIL matches `NameE%%`
      -- let `NameE%%`_exprIL(_nameIL, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:12.1-12.37
   clause 5(exprIL) = annotIL
      -- if exprIL matches `SeqE%%`
      -- let `SeqE%%`_exprIL(_exprIL*{_exprIL <- _exprIL*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:13.1-13.44
   clause 6(exprIL) = annotIL
      -- if exprIL matches `SeqDefaultE%%`
      -- let `SeqDefaultE%%`_exprIL(_exprIL*{_exprIL <- _exprIL*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:14.1-14.40
   clause 7(exprIL) = annotIL
      -- if exprIL matches `RecordE%%`
      -- let `RecordE%%`_exprIL(_(memberIL, exprIL)*{_(memberIL, exprIL) <- _(memberIL, exprIL)*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:15.1-15.47
   clause 8(exprIL) = annotIL
      -- if exprIL matches `RecordDefaultE%%`
      -- let `RecordDefaultE%%`_exprIL(_(memberIL, exprIL)*{_(memberIL, exprIL) <- _(memberIL, exprIL)*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:16.1-16.39
   clause 9(exprIL) = annotIL
      -- if exprIL matches `DefaultE%`
      -- let `DefaultE%`_exprIL(annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:17.1-17.39
   clause 10(exprIL) = annotIL
      -- if exprIL matches `InvalidE%`
      -- let `InvalidE%`_exprIL(annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:18.1-18.38
   clause 11(exprIL) = annotIL
      -- if exprIL matches `UnE%%%`
      -- let `UnE%%%`_exprIL(_unopIL, _exprIL, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:19.1-19.41
   clause 12(exprIL) = annotIL
      -- if exprIL matches `BinE%%%%`
      -- let `BinE%%%%`_exprIL(_binopIL, _exprIL, _exprIL', annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:20.1-20.42
   clause 13(exprIL) = annotIL
      -- if exprIL matches `TernE%%%%`
      -- let `TernE%%%%`_exprIL(_exprIL, _exprIL', _exprIL'', annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:21.1-21.40
   clause 14(exprIL) = annotIL
      -- if exprIL matches `CastE%%%`
      -- let `CastE%%%`_exprIL(_typeIL, _exprIL, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:22.1-22.40
   clause 15(exprIL) = annotIL
      -- if exprIL matches `MaskE%%%`
      -- let `MaskE%%%`_exprIL(_exprIL, _exprIL', annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:23.1-23.41
   clause 16(exprIL) = annotIL
      -- if exprIL matches `RangeE%%%`
      -- let `RangeE%%%`_exprIL(_exprIL, _exprIL', annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:24.1-24.42
   clause 17(exprIL) = annotIL
      -- if exprIL matches `SelectE%%%`
      -- let `SelectE%%%`_exprIL(_exprIL*{_exprIL <- _exprIL*}, _selectcaseIL*{_selectcaseIL <- _selectcaseIL*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:25.1-25.42
   clause 18(exprIL) = annotIL
      -- if exprIL matches `ArrAccE%%%`
      -- let `ArrAccE%%%`_exprIL(_exprIL, _exprIL', annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:26.1-26.44
   clause 19(exprIL) = annotIL
      -- if exprIL matches `BitAccE%%%%`
      -- let `BitAccE%%%%`_exprIL(_exprIL, _exprIL', _exprIL'', annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:27.1-27.40
   clause 20(exprIL) = annotIL
      -- if exprIL matches `ErrAccE%%`
      -- let `ErrAccE%%`_exprIL(_memberIL, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:28.1-28.43
   clause 21(exprIL) = annotIL
      -- if exprIL matches `TypeAccE%%%`
      -- let `TypeAccE%%%`_exprIL(_nameIL, _memberIL, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:29.1-29.43
   clause 22(exprIL) = annotIL
      -- if exprIL matches `ExprAccE%%%`
      -- let `ExprAccE%%%`_exprIL(_exprIL, _memberIL, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:30.1-30.46
   clause 23(exprIL) = annotIL
      -- if exprIL matches `CallFuncE%%%%`
      -- let `CallFuncE%%%%`_exprIL(_nameIL, _targIL*{_targIL <- _targIL*}, _argIL*{_argIL <- _argIL*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:31.1-31.50
   clause 24(exprIL) = annotIL
      -- if exprIL matches `CallMethodE%%%%%`
      -- let `CallMethodE%%%%%`_exprIL(_exprIL, _memberIL, _targIL*{_targIL <- _targIL*}, _argIL*{_argIL <- _argIL*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:32.1-32.48
   clause 25(exprIL) = annotIL
      -- if exprIL matches `CallTypeE%%%%%`
      -- let `CallTypeE%%%%%`_exprIL(_nameIL, _memberIL, _targIL*{_targIL <- _targIL*}, _argIL*{_argIL <- _argIL*}, annotIL) = exprIL

   ;; ../../../../spec/3b-syntax-il-aux.watsup:33.1-33.42
   clause 26(exprIL) = annotIL
      -- if exprIL matches `InstE%%%%`
      -- let `InstE%%%%`_exprIL(_nameIL, _targIL*{_targIL <- _targIL*}, _argIL*{_argIL <- _argIL*}, annotIL) = exprIL

;; ../../../../spec/4a1-typing-context.watsup:5.17-5.39
syntax cursor = 
   | `GLOBAL`()
   | `BLOCK`()
   | `LOCAL`()

;; ../../../../spec/4a1-typing-context.watsup:16.3-19.18
syntax glayer = {`CDENV%`(cdenv), `TDENV%`(tdenv), `FDENV%`(fdenv), `FRAME%`(frame)}

;; ../../../../spec/4a1-typing-context.watsup:23.16-23.59
syntax bkind = 
   | `EMPTY`()
   | `EXTERN`()
   | `PARSER`()
   | `CONTROL`()
   | `PACKAGE`()

;; ../../../../spec/4a1-typing-context.watsup:26.3-30.18
syntax blayer = {`ID%`(id), `KIND%`(bkind), `TDENV%`(tdenv), `FDENV%`(fdenv), `FRAME%`(frame)}

;; ../../../../spec/4a1-typing-context.watsup:35.1-43.21
syntax lkind = 
   | `EMPTY`()
   | `EXTERNFUNC`()
   | `FUNC%`(typ)
   | `ACTION`()
   | `EXTERNMETHOD`()
   | `EXTERNABSTRACTMETHOD%`(typ)
   | `PARSERSTATE`()
   | `CONTROLAPPLYMETHOD`()
   | `TABLEAPPLYMETHOD`()

;; ../../../../spec/4a1-typing-context.watsup:46.3-49.20
syntax llayer = {`ID%`(id), `KIND%`(lkind), `TDENV%`(tdenv), `FRAMES%`(frame*)}

;; ../../../../spec/4a1-typing-context.watsup:56.3-58.19
syntax context = {`GLOBAL%`(glayer), `BLOCK%`(blayer), `LOCAL%`(llayer)}

;; ../../../../spec/4a1-typing-context.watsup:66.1-66.29
def $empty_context : context =

   ;; ../../../../spec/4a1-typing-context.watsup:68.1-85.58
   clause 0 = C
      -- let glayer = {CDENV $empty_map<cid, consdef>, TDENV $empty_map<tid, typdef>, FDENV $empty_map<fid, funcdef>, FRAME $empty_map<id, styp>}
      -- let blayer = {ID "", KIND `EMPTY`_bkind(), TDENV $empty_map<tid, typdef>, FDENV $empty_map<fid, funcdef>, FRAME $empty_map<id, styp>}
      -- let llayer = {ID "", KIND `EMPTY`_lkind(), TDENV $empty_map<tid, typdef>, FRAMES [$empty_map<id, styp>]}
      -- let C = {GLOBAL glayer, BLOCK blayer, LOCAL llayer}

;; ../../../../spec/4a1-typing-context.watsup:91.1-91.30
def $enter(context) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:93.1-93.76
   clause 0(C) = C[LOCAL.FRAMES = $empty_map<id, styp> :: C.LOCAL.FRAMES]

;; ../../../../spec/4a1-typing-context.watsup:95.1-95.29
def $exit(context) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:97.1-98.45
   clause 0(C) = C[LOCAL.FRAMES = frame_t*{frame_t <- frame_t*}]
      -- let frame*{frame <- frame*} = C.LOCAL.FRAMES
      -- if frame*{frame <- frame*} matches _ :: _
      -- let frame_h :: frame_t*{frame_t <- frame_t*} = frame*{frame <- frame*}

;; ../../../../spec/4a1-typing-context.watsup:104.1-104.45
def $set_blockkind(context, bkind) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:106.1-106.56
   clause 0(C, bkind) = C[BLOCK.KIND = bkind]

;; ../../../../spec/4a1-typing-context.watsup:108.1-108.45
def $set_localkind(context, lkind) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:110.1-110.56
   clause 0(C, lkind) = C[LOCAL.KIND = lkind]

;; ../../../../spec/4a1-typing-context.watsup:112.1-112.46
def $set_blockframe(context, frame) : context =

;; ../../../../spec/4a1-typing-context.watsup:118.1-118.36
def $get_typ_ret_lkind(lkind) : typ =

   ;; ../../../../spec/4a1-typing-context.watsup:120.1-120.39
   clause 0(lkind) = typ
      -- if lkind matches `FUNC%`
      -- let `FUNC%`_lkind(typ) = lkind

   ;; ../../../../spec/4a1-typing-context.watsup:121.1-121.39
   clause 1(lkind) = `VoidT`_primtyp() as typ
      -- if lkind matches `ACTION`

   ;; ../../../../spec/4a1-typing-context.watsup:122.1-122.55
   clause 2(lkind) = typ
      -- if lkind matches `EXTERNABSTRACTMETHOD%`
      -- let `EXTERNABSTRACTMETHOD%`_lkind(typ) = lkind

   ;; ../../../../spec/4a1-typing-context.watsup:123.1-123.51
   clause 3(lkind) = `VoidT`_primtyp() as typ
      -- if lkind matches `CONTROLAPPLYMETHOD`

;; ../../../../spec/4a1-typing-context.watsup:129.1-129.42
def $bound_tids(cursor, context) : tidset =

   ;; ../../../../spec/4a1-typing-context.watsup:131.1-131.45
   clause 0(cursor, C) = $empty_set<tid>
      -- if cursor matches `GLOBAL`

   ;; ../../../../spec/4a1-typing-context.watsup:132.1-132.65
   clause 1(cursor, C) = $dom_map<tid, typdef>(C.BLOCK.TDENV)
      -- if cursor matches `BLOCK`

   ;; ../../../../spec/4a1-typing-context.watsup:133.1-133.105
   clause 2(cursor, C) = $union_set<tid>($dom_map<tid, typdef>(C.LOCAL.TDENV), $bound_tids(`BLOCK`_cursor(), C))
      -- if cursor matches `LOCAL`

;; ../../../../spec/4a1-typing-context.watsup:141.1-141.51
def $add_styp(cursor, context, id, styp) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:143.1-148.61
   clause 0(cursor, C, id, styp) = C[GLOBAL.FRAME = frame]
      -- if cursor matches `GLOBAL`
      -- if (id = "main")
      -- if ~$in_set<id>(id, $dom_map<id, styp>(C.GLOBAL.FRAME))
      -- let `%%%%`_styp(typ, _dir, _ctk, _val?{_val <- _val?}) = styp
      -- if $is_packaget($canon_typ(typ))
      -- let frame = $add_map<id, styp>(C.GLOBAL.FRAME, id, styp)

   ;; ../../../../spec/4a1-typing-context.watsup:149.1-152.61
   clause 1(cursor, C, id, styp) = C[GLOBAL.FRAME = frame]
      -- if cursor matches `GLOBAL`
      -- if (id =/= "main")
      -- if ~$in_set<id>(id, $dom_map<id, styp>(C.GLOBAL.FRAME))
      -- let frame = $add_map<id, styp>(C.GLOBAL.FRAME, id, styp)

   ;; ../../../../spec/4a1-typing-context.watsup:153.1-156.60
   clause 2(cursor, C, id, styp) = C[BLOCK.FRAME = frame]
      -- if cursor matches `BLOCK`
      -- if (id =/= "main")
      -- if ~$in_set<id>(id, $dom_map<id, styp>(C.BLOCK.FRAME))
      -- let frame = $add_map<id, styp>(C.BLOCK.FRAME, id, styp)

   ;; ../../../../spec/4a1-typing-context.watsup:157.1-162.38
   clause 3(cursor, C, id, styp) = C[LOCAL.FRAMES = frame*{frame <- frame*}]
      -- if cursor matches `LOCAL`
      -- if (id =/= "main")
      -- let frame'*{frame' <- frame'*} = C.LOCAL.FRAMES
      -- if frame'*{frame' <- frame'*} matches _ :: _
      -- let frame_h :: frame_t*{frame_t <- frame_t*} = frame'*{frame' <- frame'*}
      -- if ~$in_set<id>(id, $dom_map<id, styp>(frame_h))
      -- let frame_h' = $add_map<id, styp>(frame_h, id, styp)
      -- let frame*{frame <- frame*} = frame_h' :: frame_t*{frame_t <- frame_t*}

;; ../../../../spec/4a1-typing-context.watsup:164.1-164.54
def $add_styps(cursor, context, id*, styp*) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:166.1-166.40
   clause 0(cursor, C, id*{id <- id*}, styp*{styp <- styp*}) = C
      -- if id*{id <- id*} matches []
      -- if styp*{styp <- styp*} matches []

   ;; ../../../../spec/4a1-typing-context.watsup:167.1-169.55
   clause 1(cursor, C, id*{id <- id*}, styp*{styp <- styp*}) = C''
      -- if id*{id <- id*} matches _ :: _
      -- let id_h :: id_t*{id_t <- id_t*} = id*{id <- id*}
      -- if styp*{styp <- styp*} matches _ :: _
      -- let styp_h :: styp_t*{styp_t <- styp_t*} = styp*{styp <- styp*}
      -- let C' = $add_styp(cursor, C, id_h, styp_h)
      -- let C'' = $add_styps(cursor, C', id_t*{id_t <- id_t*}, styp_t*{styp_t <- styp_t*})

;; ../../../../spec/4a1-typing-context.watsup:173.1-173.52
def $add_param(cursor, context, paramtyp) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:175.1-177.51
   clause 0(p, C, pt) = C'
      -- let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt
      -- if dir matches `NO`
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ, `NO`_dir(), `CTK`_ctk(), ?()))

   ;; ../../../../spec/4a1-typing-context.watsup:178.1-181.52
   clause 1(p, C, pt) = C'
      -- let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt
      -- if (((dir = `IN`_dir()) \/ (dir = `OUT`_dir())) \/ (dir = `INOUT`_dir()))
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ, dir, `DYN`_ctk(), ?()))

;; ../../../../spec/4a1-typing-context.watsup:183.1-183.54
def $add_params(cursor, context, paramtyp*) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:185.1-185.31
   clause 0(p, C, paramtyp*{paramtyp <- paramtyp*}) = C
      -- if paramtyp*{paramtyp <- paramtyp*} matches []

   ;; ../../../../spec/4a1-typing-context.watsup:186.1-188.42
   clause 1(p, C, paramtyp*{paramtyp <- paramtyp*}) = C''
      -- if paramtyp*{paramtyp <- paramtyp*} matches _ :: _
      -- let pt_h :: pt_t*{pt_t <- pt_t*} = paramtyp*{paramtyp <- paramtyp*}
      -- let C' = $add_param(p, C, pt_h)
      -- let C'' = $add_params(p, C', pt_t*{pt_t <- pt_t*})

;; ../../../../spec/4a1-typing-context.watsup:192.1-192.56
def $add_typdef(cursor, context, tid, typdef) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:194.1-196.63
   clause 0(cursor, C, tid, td) = C[GLOBAL.TDENV = tdenv]
      -- if cursor matches `GLOBAL`
      -- if ~$in_set<tid>(tid, $dom_map<tid, typdef>(C.GLOBAL.TDENV))
      -- let tdenv = $add_map<tid, typdef>(C.GLOBAL.TDENV, tid, td)

   ;; ../../../../spec/4a1-typing-context.watsup:197.1-199.62
   clause 1(cursor, C, tid, td) = C[BLOCK.TDENV = tdenv]
      -- if cursor matches `BLOCK`
      -- if ~$in_set<tid>(tid, $dom_map<tid, typdef>(C.BLOCK.TDENV))
      -- let tdenv = $add_map<tid, typdef>(C.BLOCK.TDENV, tid, td)

   ;; ../../../../spec/4a1-typing-context.watsup:200.1-202.62
   clause 2(cursor, C, tid, td) = C[LOCAL.TDENV = tdenv]
      -- if cursor matches `LOCAL`
      -- if ~$in_set<tid>(tid, $dom_map<tid, typdef>(C.LOCAL.TDENV))
      -- let tdenv = $add_map<tid, typdef>(C.LOCAL.TDENV, tid, td)

;; ../../../../spec/4a1-typing-context.watsup:204.1-204.59
def $add_typdefs(cursor, context, tid*, typdef*) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:206.1-206.37
   clause 0(p, C, tid*{tid <- tid*}, typdef*{typdef <- typdef*}) = C
      -- if tid*{tid <- tid*} matches []
      -- if typdef*{typdef <- typdef*} matches []

   ;; ../../../../spec/4a1-typing-context.watsup:207.1-209.51
   clause 1(p, C, tid*{tid <- tid*}, typdef*{typdef <- typdef*}) = C''
      -- if tid*{tid <- tid*} matches _ :: _
      -- let tid_h :: tid_t*{tid_t <- tid_t*} = tid*{tid <- tid*}
      -- if typdef*{typdef <- typdef*} matches _ :: _
      -- let td_h :: td_t*{td_t <- td_t*} = typdef*{typdef <- typdef*}
      -- let C' = $add_typdef(p, C, tid_h, td_h)
      -- let C'' = $add_typdefs(p, C', tid_t*{tid_t <- tid_t*}, td_t*{td_t <- td_t*})

;; ../../../../spec/4a1-typing-context.watsup:213.1-213.51
def $add_tparam(cursor, context, tparam) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:215.1-218.65
   clause 0(cursor, C, tparam) = C[BLOCK.TDENV = tdenv]
      -- if cursor matches `BLOCK`
      -- let td = `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef
      -- if ~$in_set<tid>(tparam, $dom_map<tid, typdef>(C.BLOCK.TDENV))
      -- let tdenv = $add_map<tid, typdef>(C.BLOCK.TDENV, tparam, td)

   ;; ../../../../spec/4a1-typing-context.watsup:219.1-222.65
   clause 1(cursor, C, tparam) = C[LOCAL.TDENV = tdenv]
      -- if cursor matches `LOCAL`
      -- let td = `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef
      -- if ~$in_set<tid>(tparam, $dom_map<tid, typdef>(C.LOCAL.TDENV))
      -- let tdenv = $add_map<tid, typdef>(C.LOCAL.TDENV, tparam, td)

;; ../../../../spec/4a1-typing-context.watsup:224.1-224.53
def $add_tparams(cursor, context, tparam*) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:226.1-226.32
   clause 0(p, C, tparam*{tparam <- tparam*}) = C
      -- if tparam*{tparam <- tparam*} matches []

   ;; ../../../../spec/4a1-typing-context.watsup:227.1-229.47
   clause 1(p, C, tparam*{tparam <- tparam*}) = C''
      -- if tparam*{tparam <- tparam*} matches _ :: _
      -- let tparam_h :: tparam_t*{tparam_t <- tparam_t*} = tparam*{tparam <- tparam*}
      -- let C' = $add_tparam(p, C, tparam_h)
      -- let C'' = $add_tparams(p, C', tparam_t*{tparam_t <- tparam_t*})

;; ../../../../spec/4a1-typing-context.watsup:233.1-233.58
def $add_funcdef(cursor, context, fid, funcdef) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:235.1-237.64
   clause 0(cursor, C, fid, fd) = C[GLOBAL.FDENV = fdenv]
      -- if cursor matches `GLOBAL`
      -- if ~$in_set<fid>(fid, $dom_map<fid, funcdef>(C.GLOBAL.FDENV))
      -- let fdenv = $add_map<fid, funcdef>(C.GLOBAL.FDENV, fid, fd)

   ;; ../../../../spec/4a1-typing-context.watsup:238.1-240.63
   clause 1(cursor, C, fid, fd) = C[BLOCK.FDENV = fdenv]
      -- if cursor matches `BLOCK`
      -- if ~$in_set<fid>(fid, $dom_map<fid, funcdef>(C.BLOCK.FDENV))
      -- let fdenv = $add_map<fid, funcdef>(C.BLOCK.FDENV, fid, fd)

;; ../../../../spec/4a1-typing-context.watsup:242.1-242.71
def $add_funcdef_non_overload(cursor, context, fid, funcdef) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:244.1-248.64
   clause 0(cursor, C, fid, fd) = C[GLOBAL.FDENV = fdenv]
      -- if cursor matches `GLOBAL`
      -- let `{%}`_set<fid>(`%%`_fid(id_k, _(id, bool)*{_(id, bool) <- _(id, bool)*})*{_(id, bool)* <- _(id, bool)**, id_k <- id_k*}) = $dom_map<fid, funcdef>(C.GLOBAL.FDENV)
      -- let `%%`_fid(id, _(id, bool)'*{_(id, bool)' <- _(id, bool)'*}) = fid
      -- if ~id <- id_k*{id_k <- id_k*}
      -- let fdenv = $add_map<fid, funcdef>(C.GLOBAL.FDENV, fid, fd)

   ;; ../../../../spec/4a1-typing-context.watsup:249.1-253.63
   clause 1(cursor, C, fid, fd) = C[BLOCK.FDENV = fdenv]
      -- if cursor matches `BLOCK`
      -- let `{%}`_set<fid>(`%%`_fid(id_k, _(id, bool)*{_(id, bool) <- _(id, bool)*})*{_(id, bool)* <- _(id, bool)**, id_k <- id_k*}) = $dom_map<fid, funcdef>(C.BLOCK.FDENV)
      -- let `%%`_fid(id, _(id, bool)'*{_(id, bool)' <- _(id, bool)'*}) = fid
      -- if ~id <- id_k*{id_k <- id_k*}
      -- let fdenv = $add_map<fid, funcdef>(C.BLOCK.FDENV, fid, fd)

;; ../../../../spec/4a1-typing-context.watsup:257.1-257.58
def $add_consdef(cursor, context, fid, consdef) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:259.1-261.64
   clause 0(cursor, C, cid, cd) = C[GLOBAL.CDENV = cdenv]
      -- if cursor matches `GLOBAL`
      -- if ~$in_set<cid>(cid, $dom_map<cid, consdef>(C.GLOBAL.CDENV))
      -- let cdenv = $add_map<cid, consdef>(C.GLOBAL.CDENV, cid, cd)

;; ../../../../spec/4a1-typing-context.watsup:263.1-263.61
def $add_consdefs(cursor, context, cid*, consdef*) : context =

   ;; ../../../../spec/4a1-typing-context.watsup:265.1-265.38
   clause 0(p, C, cid*{cid <- cid*}, consdef*{consdef <- consdef*}) = C
      -- if cid*{cid <- cid*} matches []
      -- if consdef*{consdef <- consdef*} matches []

   ;; ../../../../spec/4a1-typing-context.watsup:266.1-268.52
   clause 1(p, C, cid*{cid <- cid*}, consdef*{consdef <- consdef*}) = C''
      -- if cid*{cid <- cid*} matches _ :: _
      -- let cid_h :: cid_t*{cid_t <- cid_t*} = cid*{cid <- cid*}
      -- if consdef*{consdef <- consdef*} matches _ :: _
      -- let cd_h :: cd_t*{cd_t <- cd_t*} = consdef*{consdef <- consdef*}
      -- let C' = $add_consdef(p, C, cid_h, cd_h)
      -- let C'' = $add_consdefs(p, C', cid_t*{cid_t <- cid_t*}, cd_t*{cd_t <- cd_t*})

;; ../../../../spec/4a1-typing-context.watsup:276.1-276.46
def $find_styp(cursor, context, name) : styp? =

   ;; ../../../../spec/4a1-typing-context.watsup:278.1-278.71
   clause 0(p, C, name) = $find_map<id, styp>(C.GLOBAL.FRAME, id)
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:279.1-279.80
   clause 1(cursor, C, name) = $find_map<id, styp>(C.GLOBAL.FRAME, id)
      -- if cursor matches `GLOBAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:280.1-281.54
   clause 2(cursor, C, name) = ?(styp)
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let styp'?{styp' <- styp'?} = $find_map<id, styp>(C.BLOCK.FRAME, id)
      -- if styp'?{styp' <- styp'?} matches (_)
      -- let ?(styp) = styp'?{styp' <- styp'?}

   ;; ../../../../spec/4a1-typing-context.watsup:282.1-283.53
   clause 3(cursor, C, name) = $find_styp(`GLOBAL`_cursor(), C, `CURRENT%`_name(id))
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- if (?() = $find_map<id, styp>(C.BLOCK.FRAME, id))

   ;; ../../../../spec/4a1-typing-context.watsup:284.1-285.56
   clause 4(cursor, C, name) = ?(styp)
      -- if cursor matches `LOCAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let styp'?{styp' <- styp'?} = $find_maps<id, styp>(C.LOCAL.FRAMES, id)
      -- if styp'?{styp' <- styp'?} matches (_)
      -- let ?(styp) = styp'?{styp' <- styp'?}

   ;; ../../../../spec/4a1-typing-context.watsup:286.1-287.55
   clause 5(cursor, C, name) = $find_styp(`BLOCK`_cursor(), C, `CURRENT%`_name(id))
      -- if cursor matches `LOCAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- if (?() = $find_maps<id, styp>(C.LOCAL.FRAMES, id))

;; ../../../../spec/4a1-typing-context.watsup:291.1-291.44
def $find_val(cursor, context, name) : val? =

   ;; ../../../../spec/4a1-typing-context.watsup:293.1-294.49
   clause 0(p, C, name) = ?(val)
      -- let styp?{styp <- styp?} = $find_styp(p, C, name)
      -- if styp?{styp <- styp?} matches (_)
      -- let ?(`%%%%`_styp(typ, dir, ctk, val'?{val' <- val'?})) = styp?{styp <- styp?}
      -- if val'?{val' <- val'?} matches (_)
      -- let ?(val) = val'?{val' <- val'?}

;; ../../../../spec/4a1-typing-context.watsup:298.1-298.50
def $find_typdef(cursor, context, name) : typdef? =

   ;; ../../../../spec/4a1-typing-context.watsup:300.1-300.76
   clause 0(p, C, name) = $find_map<tid, typdef>(C.GLOBAL.TDENV, id)
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:301.1-301.85
   clause 1(cursor, C, name) = $find_map<tid, typdef>(C.GLOBAL.TDENV, id)
      -- if cursor matches `GLOBAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:302.1-303.55
   clause 2(cursor, C, name) = ?(td)
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let typdef?{typdef <- typdef?} = $find_map<tid, typdef>(C.BLOCK.TDENV, id)
      -- if typdef?{typdef <- typdef?} matches (_)
      -- let ?(td) = typdef?{typdef <- typdef?}

   ;; ../../../../spec/4a1-typing-context.watsup:304.1-305.56
   clause 3(cursor, C, name) = $find_typdef(`GLOBAL`_cursor(), C, `CURRENT%`_name(id))
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- if (?() = $find_map<tid, typdef>(C.BLOCK.TDENV, id))

   ;; ../../../../spec/4a1-typing-context.watsup:306.1-307.55
   clause 4(cursor, C, name) = ?(td)
      -- if cursor matches `LOCAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let typdef?{typdef <- typdef?} = $find_map<tid, typdef>(C.LOCAL.TDENV, id)
      -- if typdef?{typdef <- typdef?} matches (_)
      -- let ?(td) = typdef?{typdef <- typdef?}

   ;; ../../../../spec/4a1-typing-context.watsup:308.1-309.56
   clause 5(cursor, C, name) = $find_typdef(`BLOCK`_cursor(), C, `CURRENT%`_name(id))
      -- if cursor matches `LOCAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- if (?() = $find_map<tid, typdef>(C.LOCAL.TDENV, id))

;; ../../../../spec/4a1-typing-context.watsup:313.1-313.28
def $to_fkey(arg*) : id?* =

   ;; ../../../../spec/4a1-typing-context.watsup:315.1-315.24
   clause 0(arg*{arg <- arg*}) = []
      -- if arg*{arg <- arg*} matches []

   ;; ../../../../spec/4a1-typing-context.watsup:316.1-317.27
   clause 1(arg*{arg <- arg*}) = ?(id) :: $to_fkey(arg_t*{arg_t <- arg_t*})
      -- if arg*{arg <- arg*} matches _ :: _
      -- let arg_h :: arg_t*{arg_t <- arg_t*} = arg*{arg <- arg*}
      -- let arg' = arg_h
      -- if arg' matches `NameA%%`
      -- let `NameA%%`_arg(id, _expr?{_expr <- _expr?}) = arg'

   ;; ../../../../spec/4a1-typing-context.watsup:318.1-319.15
   clause 2(arg*{arg <- arg*}) = ?() :: $to_fkey(arg_t*{arg_t <- arg_t*})
      -- if arg*{arg <- arg*} matches _ :: _
      -- let arg_h :: arg_t*{arg_t <- arg_t*} = arg*{arg <- arg*}
      -- otherwise

;; ../../../../spec/4a1-typing-context.watsup:321.1-321.70
def $find_funcdef(cursor, context, name, arg*) : (fid, funcdef, id*)? =

   ;; ../../../../spec/4a1-typing-context.watsup:323.1-323.96
   clause 0(p, C, name, arg*{arg <- arg*}) = $find_func<funcdef>(id, $to_fkey(arg*{arg <- arg*}), C.GLOBAL.FDENV)
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:324.1-324.105
   clause 1(cursor, C, name, arg*{arg <- arg*}) = $find_func<funcdef>(id, $to_fkey(arg*{arg <- arg*}), C.GLOBAL.FDENV)
      -- if cursor matches `GLOBAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:325.1-326.85
   clause 2(cursor, C, name, arg*{arg <- arg*}) = ?((fid, fd, id_deft*{id_deft <- id_deft*}))
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} = $find_func<funcdef>(id, $to_fkey(arg*{arg <- arg*}), C.BLOCK.FDENV)
      -- if (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} matches (_)
      -- let ?((fid, fd, id_deft*{id_deft <- id_deft*})) = (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?}

   ;; ../../../../spec/4a1-typing-context.watsup:327.1-328.69
   clause 3(cursor, C, name, arg*{arg <- arg*}) = $find_funcdef(`GLOBAL`_cursor(), C, `CURRENT%`_name(id), arg*{arg <- arg*})
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- if (?() = $find_func<funcdef>(id, $to_fkey(arg*{arg <- arg*}), C.BLOCK.FDENV))

   ;; ../../../../spec/4a1-typing-context.watsup:329.1-329.90
   clause 4(cursor, C, name, arg*{arg <- arg*}) = $find_funcdef(`BLOCK`_cursor(), C, `CURRENT%`_name(id), arg*{arg <- arg*})
      -- if cursor matches `LOCAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

;; ../../../../spec/4a1-typing-context.watsup:331.1-331.59
def $find_funcdef_by_name(cursor, context, name) : funcdef =

   ;; ../../../../spec/4a1-typing-context.watsup:333.1-334.57
   clause 0(p, C, name) = fd
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name
      -- let (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} = $find_func_by_name(id, C.GLOBAL.FDENV)
      -- if (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} matches (_)
      -- let ?((_fid, fd)) = (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?}

   ;; ../../../../spec/4a1-typing-context.watsup:335.1-336.57
   clause 1(cursor, C, name) = fd
      -- if cursor matches `GLOBAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} = $find_func_by_name(id, C.GLOBAL.FDENV)
      -- if (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} matches (_)
      -- let ?((_fid, fd)) = (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?}

   ;; ../../../../spec/4a1-typing-context.watsup:337.1-338.56
   clause 2(cursor, C, name) = fd
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} = $find_func_by_name(id, C.BLOCK.FDENV)
      -- if (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} matches (_)
      -- let ?((_fid, fd)) = (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?}

   ;; ../../../../spec/4a1-typing-context.watsup:339.1-340.52
   clause 3(cursor, C, name) = $find_funcdef_by_name(`GLOBAL`_cursor(), C, `CURRENT%`_name(id))
      -- if cursor matches `BLOCK`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- if (?() = $find_func_by_name(id, C.BLOCK.FDENV))

   ;; ../../../../spec/4a1-typing-context.watsup:341.1-341.94
   clause 4(cursor, C, name) = $find_funcdef_by_name(`BLOCK`_cursor(), C, `CURRENT%`_name(id))
      -- if cursor matches `LOCAL`
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

;; ../../../../spec/4a1-typing-context.watsup:345.1-345.62
def $find_consdef(context, name, arg*) : (cid, consdef, id*)? =

   ;; ../../../../spec/4a1-typing-context.watsup:347.1-347.93
   clause 0(C, name, arg*{arg <- arg*}) = $find_func<consdef>(id, $to_fkey(arg*{arg <- arg*}), C.GLOBAL.CDENV)
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name

   ;; ../../../../spec/4a1-typing-context.watsup:348.1-348.97
   clause 1(C, name, arg*{arg <- arg*}) = $find_func<consdef>(id, $to_fkey(arg*{arg <- arg*}), C.GLOBAL.CDENV)
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name

;; ../../../../spec/4a1-typing-context.watsup:350.1-350.60
def $find_consdefs_by_name(context, name) : (cid, consdef)* =

   ;; ../../../../spec/4a1-typing-context.watsup:352.1-353.43
   clause 0(C, name) = $find_funcs_by_name<consdef>(id, cid*{cid <- cid*}, cd*{cd <- cd*})
      -- if name matches `TOP%`
      -- let `TOP%`_name(id) = name
      -- let `{%}`_set<pair<fid, consdef>>(`%->%`_pair<fid, consdef>(cid, cd)*{cd <- cd*, cid <- cid*}) = C.GLOBAL.CDENV

   ;; ../../../../spec/4a1-typing-context.watsup:354.1-355.43
   clause 1(C, name) = $find_funcs_by_name<consdef>(id, cid*{cid <- cid*}, cd*{cd <- cd*})
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id) = name
      -- let `{%}`_set<pair<fid, consdef>>(`%->%`_pair<fid, consdef>(cid, cd)*{cd <- cd*, cid <- cid*}) = C.GLOBAL.CDENV

;; ../../../../spec/4a2-typing-tblctx.watsup:6.1-9.11
syntax mode = 
   | `NOPRI`()
   | `NOPRILPM%`(nat)
   | `PRI`()
   | `PRILPM`()

;; ../../../../spec/4a2-typing-tblctx.watsup:12.3-15.24
syntax priority = {`VALUES%`(int*), `INIT%`(bool), `DELTA%`(int), `LARGEST_WINS%`(bool)}

;; ../../../../spec/4a2-typing-tblctx.watsup:18.3-19.17
syntax entry = {`SIZE%`(int), `CONST%`(bool)}

;; ../../../../spec/4a2-typing-tblctx.watsup:24.14-24.30
syntax key = (typ, matchkind)

;; ../../../../spec/4a2-typing-tblctx.watsup:25.17-25.42
syntax action = (name, paramtyp*, argIL*)

;; ../../../../spec/4a2-typing-tblctx.watsup:28.3-32.16
syntax tblctx = {`KEYS%`(key*), `ACTIONS%`(action*), `PRIORITIES%`(priority), `ENTRIES%`(entry), `MODE%`(mode)}

;; ../../../../spec/4a2-typing-tblctx.watsup:39.1-40.10
syntax tblstate = 
   | `LPM%`(nat)
   | `NOLPM`()

;; ../../../../spec/4a2-typing-tblctx.watsup:46.1-46.26
def $empty_pt : priority =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:47.1-51.24
   clause 0 = {VALUES [], INIT false, DELTA 1 as int, LARGEST_WINS true}

;; ../../../../spec/4a2-typing-tblctx.watsup:53.1-53.23
def $empty_et : entry =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:54.1-56.17
   clause 0 = {SIZE 0 as int, CONST true}

;; ../../../../spec/4a2-typing-tblctx.watsup:58.1-58.28
def $empty_tblctx : tblctx =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:59.1-64.17
   clause 0 = {KEYS [], ACTIONS [], PRIORITIES $empty_pt, ENTRIES $empty_et, MODE `NOPRI`_mode()}

;; ../../../../spec/4a2-typing-tblctx.watsup:70.1-70.35
def $add_key(key, tblctx) : tblctx =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:72.1-72.69
   clause 0(key, tblctx) = tblctx[KEYS = tblctx.KEYS ++ [key]]

;; ../../../../spec/4a2-typing-tblctx.watsup:74.1-74.41
def $add_action(action, tblctx) : tblctx =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:76.1-76.84
   clause 0(action, tblctx) = tblctx[ACTIONS = tblctx.ACTIONS ++ [action]]

;; ../../../../spec/4a2-typing-tblctx.watsup:78.1-78.40
def $add_priority(int, tblctx) : tblctx =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:80.1-81.69
   clause 0(i, tblctx) = tblctx[PRIORITIES.VALUES = tblctx.PRIORITIES.VALUES ++ [i]]

;; ../../../../spec/4a2-typing-tblctx.watsup:87.1-87.36
def $get_lpm_prefix(val) : tblstate =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:90.1-90.56
   clause 0(val) = `LPM%`_tblstate($get_lpm_prefix'(val, 0))

;; ../../../../spec/4a2-typing-tblctx.watsup:88.1-88.37
def $get_lpm_prefix'(val, nat) : nat =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:91.1-91.53
   clause 0(val, n_prefix) = n_prefix
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(nat, _bitstr) = val
      -- if (nat = 0)

   ;; ../../../../spec/4a2-typing-tblctx.watsup:92.1-96.45
   clause 1(val, n_prefix) = $get_lpm_prefix'(val', (n_prefix + 1))
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bitstr) = val
      -- if bitstr <: nat
      -- let n = bitstr as nat
      -- if (w > 0)
      -- if ((n \ 2) =/= 0)
      -- let val' = `FBitV%%`_val((w - 1), ((n - 1) / 2) as bitstr)

   ;; ../../../../spec/4a2-typing-tblctx.watsup:97.1-101.39
   clause 2(val, nat) = $get_lpm_prefix'(val', 0)
      -- if val matches `FBitV%%`
      -- let `FBitV%%`_val(w, bitstr) = val
      -- if bitstr <: nat
      -- let n = bitstr as nat
      -- if (nat = 0)
      -- if (w > 0)
      -- if ((n \ 2) = 0)
      -- let val' = `FBitV%%`_val((w - 1), (n / 2) as bitstr)

;; ../../../../spec/4a2-typing-tblctx.watsup:107.1-107.45
def $update_mode(text, typ, tblctx) : tblctx =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:109.1-111.28
   clause 0(text, typ, tblctx) = tblctx[MODE = `NOPRILPM%`_mode(w)]
      -- if (text = "lpm")
      -- if (tblctx.MODE = `NOPRI`_mode())
      -- let w = $get_width(typ)

   ;; ../../../../spec/4a2-typing-tblctx.watsup:112.1-113.26
   clause 1(text, _typ, tblctx) = tblctx[MODE = `PRILPM`_mode()]
      -- if (text = "lpm")
      -- if (tblctx.MODE = `PRI`_mode())

   ;; ../../../../spec/4a2-typing-tblctx.watsup:114.1-115.28
   clause 2(text, _typ, tblctx) = tblctx[MODE = `PRI`_mode()]
      -- if (text = "range")
      -- if (tblctx.MODE = `NOPRI`_mode())

   ;; ../../../../spec/4a2-typing-tblctx.watsup:116.1-117.28
   clause 3(text, _typ, tblctx) = tblctx[MODE = `PRI`_mode()]
      -- if (text = "ternary")
      -- if (tblctx.MODE = `NOPRI`_mode())

   ;; ../../../../spec/4a2-typing-tblctx.watsup:118.1-119.28
   clause 4(text, _typ, tblctx) = tblctx[MODE = `PRI`_mode()]
      -- if (text = "optional")
      -- if (tblctx.MODE = `NOPRI`_mode())

   ;; ../../../../spec/4a2-typing-tblctx.watsup:120.1-121.33
   clause 5(text, _typ, tblctx) = tblctx[MODE = `PRILPM`_mode()]
      -- if (text = "range")
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(_nat) = mode

   ;; ../../../../spec/4a2-typing-tblctx.watsup:122.1-123.33
   clause 6(text, _typ, tblctx) = tblctx[MODE = `PRILPM`_mode()]
      -- if (text = "ternary")
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(_nat) = mode

   ;; ../../../../spec/4a2-typing-tblctx.watsup:124.1-125.33
   clause 7(text, _typ, tblctx) = tblctx[MODE = `PRILPM`_mode()]
      -- if (text = "optional")
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(_nat) = mode

   ;; ../../../../spec/4a2-typing-tblctx.watsup:126.1-127.15
   clause 8(_text, _typ, tblctx) = tblctx
      -- otherwise

;; ../../../../spec/4a2-typing-tblctx.watsup:129.1-129.49
def $update_state(tblstate, tblstate) : tblstate =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:131.1-131.44
   clause 0(tblstate, tblstate') = `LPM%`_tblstate(nat)
      -- if tblstate matches `NOLPM`
      -- if tblstate' matches `LPM%`
      -- let `LPM%`_tblstate(nat) = tblstate'

   ;; ../../../../spec/4a2-typing-tblctx.watsup:132.1-132.44
   clause 1(tblstate, tblstate') = `LPM%`_tblstate(nat)
      -- if tblstate matches `LPM%`
      -- let `LPM%`_tblstate(nat) = tblstate
      -- if tblstate' matches `NOLPM`

   ;; ../../../../spec/4a2-typing-tblctx.watsup:133.1-133.40
   clause 2(tblstate, tblstate') = `NOLPM`_tblstate()
      -- if tblstate matches `NOLPM`
      -- if tblstate' matches `NOLPM`

;; ../../../../spec/4a2-typing-tblctx.watsup:139.1-139.54
def $find_action(tblctx, name) : (paramtyp*, argIL*)? =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:141.1-143.52
   clause 0(tblctx, name) = $assoc_<name, (paramtyp*, argIL*)>(name, (name_a, (pt_a*{pt_a <- pt_a*}, argIL_a*{argIL_a <- argIL_a*}))*{argIL_a* <- argIL_a**, name_a <- name_a*, pt_a* <- pt_a**})
      -- let (name_a, pt_a*{pt_a <- pt_a*}, argIL_a*{argIL_a <- argIL_a*})*{argIL_a* <- argIL_a**, name_a <- name_a*, pt_a* <- pt_a**} = tblctx.ACTIONS

;; ../../../../spec/4a2-typing-tblctx.watsup:145.1-145.38
def $find_last_priority(tblctx) : int =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:147.1-148.42
   clause 0(tblctx) = i_pri*{i_pri <- i_pri*}[(|i_pri*{i_pri <- i_pri*}| - 1)]
      -- let i_pri*{i_pri <- i_pri*} = tblctx.PRIORITIES.VALUES

;; ../../../../spec/4a2-typing-tblctx.watsup:154.1-154.38
def $keys_of_table(tbl) : tblkeyprop* =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:156.1-156.30
   clause 0(tblprop*{tblprop <- tblprop*}) = []
      -- if tblprop*{tblprop <- tblprop*} matches []

   ;; ../../../../spec/4a2-typing-tblctx.watsup:157.1-157.95
   clause 1(tblprop'*{tblprop' <- tblprop'*}) = tblkeyprop :: $keys_of_table(tblprop_t*{tblprop_t <- tblprop_t*})
      -- if tblprop'*{tblprop' <- tblprop'*} matches _ :: _
      -- let tblprop :: tblprop_t*{tblprop_t <- tblprop_t*} = tblprop'*{tblprop' <- tblprop'*}
      -- if tblprop matches `KeyP%`
      -- let `KeyP%`_tblprop(tblkeyprop) = tblprop

   ;; ../../../../spec/4a2-typing-tblctx.watsup:158.1-159.15
   clause 2(tblprop*{tblprop <- tblprop*}) = $keys_of_table(tblprop_t*{tblprop_t <- tblprop_t*})
      -- if tblprop*{tblprop <- tblprop*} matches _ :: _
      -- let tblprop_h :: tblprop_t*{tblprop_t <- tblprop_t*} = tblprop*{tblprop <- tblprop*}
      -- otherwise

;; ../../../../spec/4a2-typing-tblctx.watsup:161.1-161.44
def $actions_of_table(tbl) : tblactionprop* =

   ;; ../../../../spec/4a2-typing-tblctx.watsup:163.1-163.33
   clause 0(tblprop*{tblprop <- tblprop*}) = []
      -- if tblprop*{tblprop <- tblprop*} matches []

   ;; ../../../../spec/4a2-typing-tblctx.watsup:164.1-164.110
   clause 1(tblprop'*{tblprop' <- tblprop'*}) = tblactionprop :: $actions_of_table(tblprop_t*{tblprop_t <- tblprop_t*})
      -- if tblprop'*{tblprop' <- tblprop'*} matches _ :: _
      -- let tblprop :: tblprop_t*{tblprop_t <- tblprop_t*} = tblprop'*{tblprop' <- tblprop'*}
      -- if tblprop matches `ActionP%`
      -- let `ActionP%`_tblprop(tblactionprop) = tblprop

   ;; ../../../../spec/4a2-typing-tblctx.watsup:165.1-166.15
   clause 2(tblprop*{tblprop <- tblprop*}) = $actions_of_table(tblprop_t*{tblprop_t <- tblprop_t*})
      -- if tblprop*{tblprop <- tblprop*} matches _ :: _
      -- let tblprop_h :: tblprop_t*{tblprop_t <- tblprop_t*} = tblprop*{tblprop <- tblprop*}
      -- otherwise

;; ../../../../spec/4b-typing-relation.watsup:6.1-8.23
relation Eval_static: `%%|-%~>%`(cursor, context, exprIL, val)

   ;; ../../../../spec/4c-typing-static-eval.watsup:9.1-10.29
   rule valuee: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `ValueE%%`
      -- let `ValueE%%`_exprIL(val, _annotIL) = exprIL

   ;; ../../../../spec/4c-typing-static-eval.watsup:16.1-17.30
   rule boole: `%%|-%~>%`(p, C, exprIL, `BoolV%`_val(b))
      -- if exprIL matches `BoolE%%`
      -- let `BoolE%%`_exprIL(b, _annotIL) = exprIL

   ;; ../../../../spec/4c-typing-static-eval.watsup:23.1-24.28
   rule stre: `%%|-%~>%`(p, C, exprIL, `StrV%`_val(t))
      -- if exprIL matches `StrE%%`
      -- let `StrE%%`_exprIL(t, _annotIL) = exprIL

   ;; ../../../../spec/4c-typing-static-eval.watsup:30.1-31.34
   rule nume-intt: `%%|-%~>%`(p, C, exprIL, `IntV%`_val(i))
      -- if exprIL matches `NumE%%`
      -- let `NumE%%`_exprIL(num, _annotIL) = exprIL
      -- if num matches `INT%`
      -- let `INT%`_num(i) = num

   ;; ../../../../spec/4c-typing-static-eval.watsup:33.1-35.30
   rule nume-fintt: `%%|-%~>%`(p, C, exprIL, `FIntV%%`_val(w, bs))
      -- if exprIL matches `NumE%%`
      -- let `NumE%%`_exprIL(num, _annotIL) = exprIL
      -- if num matches `FINT%%`
      -- let `FINT%%`_num(w, i) = num
      -- let bs = $to_bitstr(w as int, i)

   ;; ../../../../spec/4c-typing-static-eval.watsup:37.1-39.30
   rule nume-fbitt: `%%|-%~>%`(p, C, exprIL, `FBitV%%`_val(w, bs))
      -- if exprIL matches `NumE%%`
      -- let `NumE%%`_exprIL(num, _annotIL) = exprIL
      -- if num matches `FBIT%%`
      -- let `FBIT%%`_num(w, i) = num
      -- let bs = $to_bitstr(w as int, i)

   ;; ../../../../spec/4c-typing-static-eval.watsup:45.1-47.36
   rule namee: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `NameE%%`
      -- let `NameE%%`_exprIL(name, _annotIL) = exprIL
      -- let val'?{val' <- val'?} = $find_val(p, C, name)
      -- if val'?{val' <- val'?} matches (_)
      -- let ?(val) = val'?{val' <- val'?}

   ;; ../../../../spec/4c-typing-static-eval.watsup:53.1-55.42
   rule seqe: `%%|-%~>%`(p, C, exprIL', `SeqV%`_val(val*{val <- val*}))
      -- if exprIL' matches `SeqE%%`
      -- let `SeqE%%`_exprIL(exprIL*{exprIL <- exprIL*}, _annotIL) = exprIL'
      -- (Eval_static: `%%|-%~>%`(p, C, exprIL, val))*{exprIL <- exprIL*, val <- val*}

   ;; ../../../../spec/4c-typing-static-eval.watsup:57.1-59.42
   rule seqdefaulte: `%%|-%~>%`(p, C, exprIL', `SeqDefaultV%`_val(val*{val <- val*}))
      -- if exprIL' matches `SeqDefaultE%%`
      -- let `SeqDefaultE%%`_exprIL(exprIL*{exprIL <- exprIL*}, _annotIL) = exprIL'
      -- (Eval_static: `%%|-%~>%`(p, C, exprIL, val))*{exprIL <- exprIL*, val <- val*}

   ;; ../../../../spec/4c-typing-static-eval.watsup:65.1-67.42
   rule recorde: `%%|-%~>%`(p, C, exprIL', `RecordV%`_val((member, val)*{member <- member*, val <- val*}))
      -- if exprIL' matches `RecordE%%`
      -- let `RecordE%%`_exprIL((member, exprIL)*{exprIL <- exprIL*, member <- member*}, _annotIL) = exprIL'
      -- (Eval_static: `%%|-%~>%`(p, C, exprIL, val))*{exprIL <- exprIL*, val <- val*}

   ;; ../../../../spec/4c-typing-static-eval.watsup:69.1-71.42
   rule recorddefaulte: `%%|-%~>%`(p, C, exprIL', `RecordDefaultV%`_val((member, val)*{member <- member*, val <- val*}))
      -- if exprIL' matches `RecordDefaultE%%`
      -- let `RecordDefaultE%%`_exprIL((member, exprIL)*{exprIL <- exprIL*, member <- member*}, _annotIL) = exprIL'
      -- (Eval_static: `%%|-%~>%`(p, C, exprIL, val))*{exprIL <- exprIL*, val <- val*}

   ;; ../../../../spec/4c-typing-static-eval.watsup:77.1-78.32
   rule defaulte: `%%|-%~>%`(p, C, exprIL, `DefaultV`_val())
      -- if exprIL matches `DefaultE%`
      -- let `DefaultE%`_exprIL(_annotIL) = exprIL

   ;; ../../../../spec/4c-typing-static-eval.watsup:80.1-81.32
   rule invalide: `%%|-%~>%`(p, C, exprIL, `InvalidV`_val())
      -- if exprIL matches `InvalidE%`
      -- let `InvalidE%`_exprIL(_annotIL) = exprIL

   ;; ../../../../spec/4c-typing-static-eval.watsup:87.1-89.39
   rule une: `%%|-%~>%`(p, C, exprIL', $un_op(unop, val))
      -- if exprIL' matches `UnE%%%`
      -- let `UnE%%%`_exprIL(unop, exprIL, _annotIL) = exprIL'
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)

   ;; ../../../../spec/4c-typing-static-eval.watsup:95.1-98.43
   rule bine: `%%|-%~>%`(p, C, exprIL, $bin_op(binop, val_l, val_r))
      -- if exprIL matches `BinE%%%%`
      -- let `BinE%%%%`_exprIL(binop, exprIL_l, exprIL_r, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_l, val_l)
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_r, val_r)

   ;; ../../../../spec/4c-typing-static-eval.watsup:104.1-107.41
   rule terne-true: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `TernE%%%%`
      -- let `TernE%%%%`_exprIL(exprIL_c, exprIL_t, exprIL_f, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_c, val')
      -- if (val' = `BoolV%`_val(true))
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_t, val)

   ;; ../../../../spec/4c-typing-static-eval.watsup:109.1-112.41
   rule terne-false: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `TernE%%%%`
      -- let `TernE%%%%`_exprIL(exprIL_c, exprIL_t, exprIL_f, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_c, val')
      -- if (val' = `BoolV%`_val(false))
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_f, val)

   ;; ../../../../spec/4c-typing-static-eval.watsup:118.1-120.39
   rule caste: `%%|-%~>%`(p, C, exprIL', $cast_op(typ, val))
      -- if exprIL' matches `CastE%%%`
      -- let `CastE%%%`_exprIL(typ, exprIL, _annotIL) = exprIL'
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)

   ;; ../../../../spec/4c-typing-static-eval.watsup:126.1-132.26
   rule arracce-tuple: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `ArrAccE%%%`
      -- let `ArrAccE%%%`_exprIL(exprIL_b, exprIL_i, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val')
      -- if val' matches `TupleV%`
      -- let `TupleV%`_val(val_e*{val_e <- val_e*}) = val'
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_i, val_i)
      -- let int = $get_num(val_i)
      -- if int <: nat
      -- let n_i = int as nat
      -- if (n_i < |val_e*{val_e <- val_e*}|)
      -- let val = val_e*{val_e <- val_e*}[n_i]

   ;; ../../../../spec/4c-typing-static-eval.watsup:134.1-140.26
   rule arracce-stack: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `ArrAccE%%%`
      -- let `ArrAccE%%%`_exprIL(exprIL_b, exprIL_i, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val')
      -- if val' matches `StackV%%%`
      -- let `StackV%%%`_val(val_e*{val_e <- val_e*}, _int, _int') = val'
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_i, val_i)
      -- let int = $get_num(val_i)
      -- if int <: nat
      -- let n_i = int as nat
      -- if (n_i < |val_e*{val_e <- val_e*}|)
      -- let val = val_e*{val_e <- val_e*}[n_i]

   ;; ../../../../spec/4c-typing-static-eval.watsup:146.1-150.43
   rule bitacce: `%%|-%~>%`(p, C, exprIL, $bitacc_op(val_b, val_h, val_l))
      -- if exprIL matches `BitAccE%%%%`
      -- let `BitAccE%%%%`_exprIL(exprIL_b, exprIL_l, exprIL_h, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val_b)
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_l, val_l)
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_h, val_h)

   ;; ../../../../spec/4c-typing-static-eval.watsup:156.1-159.46
   rule erracce: `%%|-%~>%`(p, C, exprIL, `ErrV%`_val(member))
      -- if exprIL matches `ErrAccE%%`
      -- let `ErrAccE%%`_exprIL(member, _annotIL) = exprIL
      -- let id = $concat_text(["error.", member])
      -- if (?(`ErrV%`_val(member)) = $find_val(p, C, `TOP%`_name(id)))

   ;; ../../../../spec/4c-typing-static-eval.watsup:165.1-169.28
   rule typeacce-enumt: `%%|-%~>%`(p, C, exprIL, `EnumFieldV%%`_val(id_t, member))
      -- if exprIL matches `TypeAccE%%%`
      -- let `TypeAccE%%%`_exprIL(name, member, _annotIL) = exprIL
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef
      -- let typ' = $canon_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(id_t, member_t*{member_t <- member_t*}) = datatyp
      -- if member <- member_t*{member_t <- member_t*}

   ;; ../../../../spec/4c-typing-static-eval.watsup:171.1-175.63
   rule typeacce-senumt: `%%|-%~>%`(p, C, exprIL, `SEnumFieldV%%%`_val(id_t, member, val))
      -- if exprIL matches `TypeAccE%%%`
      -- let `TypeAccE%%%`_exprIL(name, member, _annotIL) = exprIL
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef
      -- let typ' = $canon_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id_t, typ_t, (member_t, val_t)*{member_t <- member_t*, val_t <- val_t*}) = datatyp
      -- let val'?{val' <- val'?} = $assoc_<member, val>(member, (member_t, val_t)*{member_t <- member_t*, val_t <- val_t*})
      -- if val'?{val' <- val'?} matches (_)
      -- let ?(val) = val'?{val' <- val'?}

   ;; ../../../../spec/4c-typing-static-eval.watsup:181.1-183.62
   rule expracce-stack: `%%|-%~>%`(p, C, exprIL, `IntV%`_val(i_size))
      -- if exprIL matches `ExprAccE%%%`
      -- let `ExprAccE%%%`_exprIL(exprIL_b, text, _annotIL) = exprIL
      -- if (text = "size")
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val')
      -- if val' matches `StackV%%%`
      -- let `StackV%%%`_val(val*{val <- val*}, i_size, i_idx) = val'

   ;; ../../../../spec/4c-typing-static-eval.watsup:185.1-188.63
   rule expracce-struct: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `ExprAccE%%%`
      -- let `ExprAccE%%%`_exprIL(exprIL_b, member, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val')
      -- if val' matches `StructV%%`
      -- let `StructV%%`_val(id, (member_f, val_f)*{member_f <- member_f*, val_f <- val_f*}) = val'
      -- let val''?{val'' <- val''?} = $assoc_<member, val>(member, (member_f, val_f)*{member_f <- member_f*, val_f <- val_f*})
      -- if val''?{val'' <- val''?} matches (_)
      -- let ?(val) = val''?{val'' <- val''?}

   ;; ../../../../spec/4c-typing-static-eval.watsup:190.1-193.63
   rule expracce-header: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `ExprAccE%%%`
      -- let `ExprAccE%%%`_exprIL(exprIL_b, member, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val')
      -- if val' matches `HeaderV%%%`
      -- let `HeaderV%%%`_val(id, _bool, (member_f, val_f)*{member_f <- member_f*, val_f <- val_f*}) = val'
      -- let val''?{val'' <- val''?} = $assoc_<member, val>(member, (member_f, val_f)*{member_f <- member_f*, val_f <- val_f*})
      -- if val''?{val'' <- val''?} matches (_)
      -- let ?(val) = val''?{val'' <- val''?}

   ;; ../../../../spec/4c-typing-static-eval.watsup:195.1-198.63
   rule expracce-union: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `ExprAccE%%%`
      -- let `ExprAccE%%%`_exprIL(exprIL_b, member, _annotIL) = exprIL
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_b, val')
      -- if val' matches `UnionV%%`
      -- let `UnionV%%`_val(id, (member_f, val_f)*{member_f <- member_f*, val_f <- val_f*}) = val'
      -- let val''?{val'' <- val''?} = $assoc_<member, val>(member, (member_f, val_f)*{member_f <- member_f*, val_f <- val_f*})
      -- if val''?{val'' <- val''?} matches (_)
      -- let ?(val) = val''?{val'' <- val''?}

   ;; ../../../../spec/4c-typing-static-eval.watsup:204.1-209.35
   rule callmethode: `%%|-%~>%`(p, C, exprIL, val)
      -- if exprIL matches `CallMethodE%%%%%`
      -- let `CallMethodE%%%%%`_exprIL(exprIL_b, member, targIL*{targIL <- targIL*}, argIL*{argIL <- argIL*}, _annotIL) = exprIL
      -- if targIL*{targIL <- targIL*} matches []
      -- if argIL*{argIL <- argIL*} matches []
      -- if ((((member = "minSizeInBits") \/ (member = "minSizeInBytes")) \/ (member = "maxSizeInBits")) \/ (member = "maxSizeInBytes"))
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let val = $size(typ_b, member)

   ;; ../../../../spec/4c-typing-static-eval.watsup:215.1-219.45
   rule calltypee: `%%|-%~>%`(p, C, exprIL, $size(typ, member))
      -- if exprIL matches `CallTypeE%%%%%`
      -- let `CallTypeE%%%%%`_exprIL(name, member, targIL*{targIL <- targIL*}, argIL*{argIL <- argIL*}, _annotIL) = exprIL
      -- if targIL*{targIL <- targIL*} matches []
      -- if argIL*{argIL <- argIL*} matches []
      -- if ((((member = "minSizeInBits") \/ (member = "minSizeInBytes")) \/ (member = "maxSizeInBits")) \/ (member = "maxSizeInBytes"))
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef

;; ../../../../spec/4b-typing-relation.watsup:15.1-17.23
relation Type_ok: `%%|-%:%%`(cursor, context, type, typ, tid*)

   ;; ../../../../spec/4d1-typing-type.watsup:5.1-6.27
   rule voidt: `%%|-%:%%`(p, C, type, `VoidT`_primtyp() as typ, [])
      -- if type matches `VoidT`

   ;; ../../../../spec/4d1-typing-type.watsup:8.1-9.25
   rule errt: `%%|-%:%%`(p, C, type, `ErrT`_primtyp() as typ, [])
      -- if type matches `ErrT`

   ;; ../../../../spec/4d1-typing-type.watsup:11.1-12.37
   rule matchkindt: `%%|-%:%%`(p, C, type, `MatchKindT`_primtyp() as typ, [])
      -- if type matches `MatchKindT`

   ;; ../../../../spec/4d1-typing-type.watsup:14.1-15.25
   rule strt: `%%|-%:%%`(p, C, type, `StrT`_primtyp() as typ, [])
      -- if type matches `StrT`

   ;; ../../../../spec/4d1-typing-type.watsup:17.1-18.27
   rule boolt: `%%|-%:%%`(p, C, type, `BoolT`_primtyp() as typ, [])
      -- if type matches `BoolT`

   ;; ../../../../spec/4d1-typing-type.watsup:20.1-21.25
   rule intt: `%%|-%:%%`(p, C, type, `IntT`_numtyp() as typ, [])
      -- if type matches `IntT`

   ;; ../../../../spec/4d1-typing-type.watsup:23.1-29.17
   rule fintt: `%%|-%:%%`(p, C, type, `FIntT%`_numtyp(w) as typ, [])
      -- if type matches `FIntT%`
      -- let `FIntT%`_type(expr) = type
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)
      -- let int = $get_num(val)
      -- if int <: nat
      -- let w = int as nat
      -- if (w > 0)

   ;; ../../../../spec/4d1-typing-type.watsup:31.1-36.26
   rule fbitt: `%%|-%:%%`(p, C, type, `FBitT%`_numtyp(w) as typ, [])
      -- if type matches `FBitT%`
      -- let `FBitT%`_type(expr) = type
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)
      -- let int = $get_num(val)
      -- if int <: nat
      -- let w = int as nat

   ;; ../../../../spec/4d1-typing-type.watsup:38.1-43.26
   rule vbitt: `%%|-%:%%`(p, C, type, `VBitT%`_numtyp(w) as typ, [])
      -- if type matches `VBitT%`
      -- let `VBitT%`_type(expr) = type
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)
      -- let int = $get_num(val)
      -- if int <: nat
      -- let w = int as nat

   ;; ../../../../spec/4d1-typing-type.watsup:45.1-54.61
   rule stackt: `%%|-%:%%`(p, C, type', `SpecT%%`_abstyp(ptd, [typ]) as typ, tid_fresh*{tid_fresh <- tid_fresh*})
      -- if type' matches `StackT%%`
      -- let `StackT%%`_type(type, expr) = type'
      -- Type_ok: `%%|-%:%%`(p, C, type, typ, tid_fresh*{tid_fresh <- tid_fresh*})
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)
      -- let i_size = $get_num(val)
      -- let ptd = `PolyD%->%`_polytypdef((["T"], []), `StackT%%`_datatyp(`VarT%`_abstyp("T") as typ, i_size) as typ)

   ;; ../../../../spec/4d1-typing-type.watsup:56.1-60.53
   rule listt: `%%|-%:%%`(p, C, type', `SpecT%%`_abstyp(ptd, [typ]) as typ, tid_fresh*{tid_fresh <- tid_fresh*})
      -- if type' matches `ListT%`
      -- let `ListT%`_type(type) = type'
      -- Type_ok: `%%|-%:%%`(p, C, type, typ, tid_fresh*{tid_fresh <- tid_fresh*})
      -- let ptd = `PolyD%->%`_polytypdef((["T"], []), `ListT%`_datatyp(`VarT%`_abstyp("T") as typ) as typ)

   ;; ../../../../spec/4d1-typing-type.watsup:62.1-70.56
   rule tuplet: `%%|-%:%%`(p, C, type', `SpecT%%`_abstyp(ptd, typ*{typ <- typ*}) as typ, tid_fresh*{tid_fresh <- tid_fresh*})
      -- if type' matches `TupleT%`
      -- let `TupleT%`_type(type*{type <- type*}) = type'
      -- (Type_ok: `%%|-%:%%`(p, C, type, typ, tid_fresh_i*{tid_fresh_i <- tid_fresh_i*}))*{tid_fresh_i* <- tid_fresh_i**, typ <- typ*, type <- type*}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_i*{tid_fresh_i <- tid_fresh_i*}*{tid_fresh_i* <- tid_fresh_i**})
      -- let i_idx*{i_idx <- i_idx*} = $init_(|typ*{typ <- typ*}|) as int*
      -- (let tid = $concat_text(["T", $int_to_text(i_idx)]))*{i_idx <- i_idx*, tid <- tid*}
      -- let ptd = `PolyD%->%`_polytypdef((tid*{tid <- tid*}, []), `TupleT%`_datatyp(`VarT%`_abstyp(tid) as typ*{tid <- tid*}) as typ)

   ;; ../../../../spec/4d1-typing-type.watsup:72.1-74.45
   rule namet-mono: `%%|-%:%%`(p, C, type, typ, [])
      -- if type matches `NameT%`
      -- let `NameT%`_type(name) = type
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef

   ;; ../../../../spec/4d1-typing-type.watsup:76.1-79.53
   rule namet-poly: `%%|-%:%%`(p, C, type, `SpecT%%`_abstyp(ptd, []) as typ, [])
      -- if type matches `NameT%`
      -- let `NameT%`_type(name) = type
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: polytypdef
      -- let `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ) = typdef as polytypdef
      -- let ptd = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ)

   ;; ../../../../spec/4d1-typing-type.watsup:81.1-83.45
   rule spect-mono: `%%|-%:%%`(p, C, type', typ, [])
      -- if type' matches `SpecT%%`
      -- let `SpecT%%`_type(name, type*{type <- type*}) = type'
      -- if type*{type <- type*} matches []
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef

   ;; ../../../../spec/4d1-typing-type.watsup:85.1-91.50
   rule spect-poly: `%%|-%:%%`(p, C, type', `SpecT%%`_abstyp(ptd, typ_a*{typ_a <- typ_a*}) as typ, tid_fresh*{tid_fresh <- tid_fresh*})
      -- if type' matches `SpecT%%`
      -- let `SpecT%%`_type(name, type*{type <- type*}) = type'
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: polytypdef
      -- let ptd = typdef as polytypdef
      -- let `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ) = ptd
      -- (Type_ok: `%%|-%:%%`(p, C, type, typ_a, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{tid_fresh_a* <- tid_fresh_a**, typ_a <- typ_a*, type <- type*}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})

   ;; ../../../../spec/4d1-typing-type.watsup:93.1-95.27
   rule anyt: `%%|-%:%%`(p, C, type, `VarT%`_abstyp(tid) as typ, [tid])
      -- if type matches `AnyT`
      -- let tid = $fresh_tid

;; ../../../../spec/4b-typing-relation.watsup:20.1-22.20
relation Sub_expl: `%<:%`(typ, typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:5.1-7.60
   rule : `%<:%`(typ_a, typ_b)
      -- if Sub_expl_canon: `%<:%`($canon_typ(typ_a), $canon_typ(typ_b)) holds

;; ../../../../spec/4b-typing-relation.watsup:23.1-25.20
relation Sub_expl_canon: `%<:%`(typ, typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:9.1-11.32
   rule eq: `%<:%`(typ_a, typ_b)
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:13.1-16.40
   rule neq: `%<:%`(typ_a, typ_b)
      -- if ~Type_alpha: `%~~%`(typ_a, typ_b) holds
      -- if Sub_expl_canon_neq: `%<:%`(typ_a, typ_b) holds

;; ../../../../spec/4b-typing-relation.watsup:26.1-28.20
relation Sub_expl_canon_neq: `%<:%`(typ, typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:18.1-19.19
   rule fbitt-boolt: `%<:%`(typ, typ')
      -- if (typ = `FBitT%`_numtyp(1) as typ)
      -- if (typ' = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:21.1-22.19
   rule boolt-fbitt: `%<:%`(typ, typ')
      -- if (typ = `BoolT`_primtyp() as typ)
      -- if (typ' = `FBitT%`_numtyp(1) as typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:24.1-25.16
   rule intt-boolt: `%<:%`(typ, typ')
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:27.1-28.29
   rule fintt-fbitt: `%<:%`(typ, typ')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(width') = numtyp'
      -- if (width = width')

   ;; ../../../../spec/4d2-typing-subtyping.watsup:30.1-31.29
   rule fbitt-fintt: `%<:%`(typ, typ')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(width') = numtyp'
      -- if (width = width')

   ;; ../../../../spec/4d2-typing-subtyping.watsup:33.1-34.33
   rule fbitt-fbitt: `%<:%`(typ, typ')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(width_a) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(width_b) = numtyp'

   ;; ../../../../spec/4d2-typing-subtyping.watsup:36.1-37.33
   rule fintt-fintt: `%<:%`(typ, typ')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(width_a) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(width_b) = numtyp'

   ;; ../../../../spec/4d2-typing-subtyping.watsup:39.1-40.22
   rule fbitt-intt: `%<:%`(typ, typ')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(width) = numtyp
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:42.1-43.22
   rule fintt-intt: `%<:%`(typ, typ')
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(width) = numtyp
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:45.1-46.22
   rule intt-fbitt: `%<:%`(typ, typ')
      -- if (typ = `IntT`_numtyp() as typ)
      -- if typ' <: numtyp
      -- let numtyp = typ' as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(width) = numtyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:48.1-49.22
   rule intt-fintt: `%<:%`(typ, typ')
      -- if (typ = `IntT`_numtyp() as typ)
      -- if typ' <: numtyp
      -- let numtyp = typ' as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(width) = numtyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:51.1-53.30
   rule newt-innert: `%<:%`(typ, typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ_a) = datatyp
      -- if Sub_impl: `%<<%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:55.1-57.30
   rule innert-newt: `%<:%`(typ_a, typ)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ_b) = datatyp
      -- if Sub_impl: `%<<%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:59.1-61.30
   rule senumt-innert: `%<:%`(typ, typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ_a, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp
      -- if Sub_impl: `%<<%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:63.1-65.30
   rule innert-senumt: `%<:%`(typ_a, typ)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ_b, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp
      -- if Sub_impl: `%<<%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:67.1-69.33
   rule seqt-list: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ_b) = datatyp
      -- (if Sub_expl: `%<:%`(typ_a, typ_b) holds)*{typ_a <- typ_a*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:71.1-73.33
   rule seqt-tuplet: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_b*{typ_b <- typ_b*}) = datatyp
      -- (if Sub_expl: `%<:%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:75.1-78.33
   rule seqt-stackt: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b, i_size) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| as int <= i_size)
      -- (if Sub_expl: `%<:%`(typ_a, typ_b) holds)*{typ_a <- typ_a*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:80.1-82.33
   rule seqt-structt: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- (if Sub_expl: `%<:%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:84.1-86.33
   rule seqt-headert: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- (if Sub_expl: `%<:%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:88.1-94.35
   rule recordt-structt: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $eq_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_expl: `%<:%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:96.1-102.35
   rule recordt-headert: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $eq_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_expl: `%<:%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:104.1-106.26
   rule defaultt: `%<:%`(typ', typ)
      -- if (typ' = `DefaultT`_synthtyp() as typ)
      -- if $is_deftable(typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:108.1-114.31
   rule seqdefaultt-tuplet: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_b*{typ_b <- typ_b*}) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| < |typ_b*{typ_b <- typ_b*}|)
      -- let (typ_c*{typ_c <- typ_c*}, typ_d*{typ_d <- typ_d*}) = $partition_<typ>(typ_b*{typ_b <- typ_b*}, |typ_a*{typ_a <- typ_a*}|)
      -- (if Sub_expl: `%<:%`(typ_a, typ_c) holds)*{typ_a <- typ_a*, typ_c <- typ_c*}
      -- (if $is_deftable(typ_d))*{typ_d <- typ_d*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:116.1-120.28
   rule seqdefaultt-stackt: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b, i_size) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| as int < i_size)
      -- (if Sub_expl: `%<:%`(typ_a, typ_b) holds)*{typ_a <- typ_a*}
      -- if $is_deftable(typ_b)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:122.1-128.31
   rule seqdefaultt-structt: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| < |typ_b*{typ_b <- typ_b*}|)
      -- let (typ_c*{typ_c <- typ_c*}, typ_d*{typ_d <- typ_d*}) = $partition_<typ>(typ_b*{typ_b <- typ_b*}, |typ_a*{typ_a <- typ_a*}|)
      -- (if Sub_expl: `%<:%`(typ_a, typ_c) holds)*{typ_a <- typ_a*, typ_c <- typ_c*}
      -- (if $is_deftable(typ_d))*{typ_d <- typ_d*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:130.1-136.31
   rule seqdefaultt-headert: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| < |typ_b*{typ_b <- typ_b*}|)
      -- let (typ_c*{typ_c <- typ_c*}, typ_d*{typ_d <- typ_d*}) = $partition_<typ>(typ_b*{typ_b <- typ_b*}, |typ_a*{typ_a <- typ_a*}|)
      -- (if Sub_expl: `%<:%`(typ_a, typ_c) holds)*{typ_a <- typ_a*, typ_c <- typ_c*}
      -- (if $is_deftable(typ_d))*{typ_d <- typ_d*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:138.1-148.32
   rule recorddefaultt-structt: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $sub_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- let `{%}`_set<member>(member_c*{member_c <- member_c*}) = $diff_set<member>(`{%}`_set<member>(member_b*{member_b <- member_b*}), `{%}`_set<member>(member_a*{member_a <- member_a*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_expl: `%<:%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}
      -- (let typ''''?{typ'''' <- typ''''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ''''? <- typ''''?*}
      -- (if typ''''?{typ'''' <- typ''''?} matches (_))*{typ''''? <- typ''''?*}
      -- (let ?(typ_c') = typ''''?{typ'''' <- typ''''?})*{typ''''? <- typ''''?*, typ_c' <- typ_c'*}
      -- (if $is_deftable(typ_c'))*{typ_c' <- typ_c'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:150.1-160.32
   rule recorddefaultt-headert: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $sub_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- let `{%}`_set<member>(member_c*{member_c <- member_c*}) = $diff_set<member>(`{%}`_set<member>(member_b*{member_b <- member_b*}), `{%}`_set<member>(member_a*{member_a <- member_a*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_expl: `%<:%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}
      -- (let typ''''?{typ'''' <- typ''''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ''''? <- typ''''?*}
      -- (if typ''''?{typ'''' <- typ''''?} matches (_))*{typ''''? <- typ''''?*}
      -- (let ?(typ_c') = typ''''?{typ'''' <- typ''''?})*{typ''''? <- typ''''?*, typ_c' <- typ_c'*}
      -- (if $is_deftable(typ_c'))*{typ_c' <- typ_c'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:162.1-163.26
   rule invalidt-headert: `%<:%`(typ, typ')
      -- if (typ = `InvalidT`_synthtyp() as typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:165.1-166.25
   rule invalidt-uniont: `%<:%`(typ, typ')
      -- if (typ = `InvalidT`_synthtyp() as typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:168.1-170.30
   rule sett-sett: `%<:%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ_a) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `SetT%`
      -- let `SetT%`_synthtyp(typ_b) = synthtyp'
      -- if Sub_expl: `%<:%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:172.1-174.30
   rule non-sett-sett: `%<:%`(typ_a, typ)
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ_b) = synthtyp
      -- if Sub_expl: `%<:%`(typ_a, typ_b) holds

;; ../../../../spec/4b-typing-relation.watsup:29.1-31.20
relation Sub_impl: `%<<%`(typ, typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:180.1-182.60
   rule : `%<<%`(typ_a, typ_b)
      -- if Sub_impl_canon: `%<<%`($canon_typ(typ_a), $canon_typ(typ_b)) holds

;; ../../../../spec/4b-typing-relation.watsup:32.1-34.20
relation Sub_impl_canon: `%<<%`(typ, typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:184.1-186.32
   rule eq: `%<<%`(typ_a, typ_b)
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:188.1-191.40
   rule neq: `%<<%`(typ_a, typ_b)
      -- if ~Type_alpha: `%~~%`(typ_a, typ_b) holds
      -- if Sub_impl_canon_neq: `%<<%`(typ_a, typ_b) holds

;; ../../../../spec/4b-typing-relation.watsup:35.1-37.20
relation Sub_impl_canon_neq: `%<<%`(typ, typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:193.1-194.18
   rule intt-fbitt: `%<<%`(typ, typ')
      -- if (typ = `IntT`_numtyp() as typ)
      -- if typ' <: numtyp
      -- let numtyp = typ' as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:196.1-197.18
   rule intt-fintt: `%<<%`(typ, typ')
      -- if (typ = `IntT`_numtyp() as typ)
      -- if typ' <: numtyp
      -- let numtyp = typ' as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:199.1-201.30
   rule senumt-innert: `%<<%`(typ, typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ_a, _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp
      -- if Sub_impl: `%<<%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:203.1-205.33
   rule seqt-list: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ_b) = datatyp
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:207.1-209.33
   rule seqt-tuplet: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_b*{typ_b <- typ_b*}) = datatyp
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:211.1-214.33
   rule seqt-stackt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b, i_size) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| as int <= i_size)
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:216.1-218.33
   rule seqt-structt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:220.1-222.33
   rule seqt-headert: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:224.1-226.33
   rule seqt-seqt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: synthtyp
      -- let synthtyp' = typ' as synthtyp
      -- if synthtyp' matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_b*{typ_b <- typ_b*}) = synthtyp'
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*, typ_b <- typ_b*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:228.1-234.35
   rule recordt-structt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $eq_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_impl: `%<<%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:236.1-242.35
   rule recordt-headert: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordT%`
      -- let `RecordT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $eq_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_impl: `%<<%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:244.1-246.26
   rule defaultt: `%<<%`(typ', typ)
      -- if (typ' = `DefaultT`_synthtyp() as typ)
      -- if $is_deftable(typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:248.1-254.31
   rule seqdefaultt-tuplet: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_b*{typ_b <- typ_b*}) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| < |typ_b*{typ_b <- typ_b*}|)
      -- let (typ_c*{typ_c <- typ_c*}, typ_d*{typ_d <- typ_d*}) = $partition_<typ>(typ_b*{typ_b <- typ_b*}, |typ_a*{typ_a <- typ_a*}|)
      -- (if Sub_impl: `%<<%`(typ_a, typ_c) holds)*{typ_a <- typ_a*, typ_c <- typ_c*}
      -- (if $is_deftable(typ_d))*{typ_d <- typ_d*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:256.1-260.28
   rule seqdefaultt-stackt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b, i_size) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| as int < i_size)
      -- (if Sub_impl: `%<<%`(typ_a, typ_b) holds)*{typ_a <- typ_a*}
      -- if $is_deftable(typ_b)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:262.1-268.31
   rule seqdefaultt-structt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| < |typ_b*{typ_b <- typ_b*}|)
      -- let (typ_c*{typ_c <- typ_c*}, typ_d*{typ_d <- typ_d*}) = $partition_<typ>(typ_b*{typ_b <- typ_b*}, |typ_a*{typ_a <- typ_a*}|)
      -- (if Sub_impl: `%<<%`(typ_a, typ_c) holds)*{typ_a <- typ_a*, typ_c <- typ_c*}
      -- (if $is_deftable(typ_d))*{typ_d <- typ_d*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:270.1-276.31
   rule seqdefaultt-headert: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqDefaultT%`
      -- let `SeqDefaultT%`_synthtyp(typ_a*{typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, (_member, typ_b)*{_member <- _member*, typ_b <- typ_b*}) = datatyp
      -- if (|typ_a*{typ_a <- typ_a*}| < |typ_b*{typ_b <- typ_b*}|)
      -- let (typ_c*{typ_c <- typ_c*}, typ_d*{typ_d <- typ_d*}) = $partition_<typ>(typ_b*{typ_b <- typ_b*}, |typ_a*{typ_a <- typ_a*}|)
      -- (if Sub_impl: `%<<%`(typ_a, typ_c) holds)*{typ_a <- typ_a*, typ_c <- typ_c*}
      -- (if $is_deftable(typ_d))*{typ_d <- typ_d*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:278.1-288.32
   rule recorddefaultt-structt: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(_id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $sub_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- let `{%}`_set<member>(member_c*{member_c <- member_c*}) = $diff_set<member>(`{%}`_set<member>(member_b*{member_b <- member_b*}), `{%}`_set<member>(member_a*{member_a <- member_a*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_impl: `%<<%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}
      -- (let typ''''?{typ'''' <- typ''''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_c))*{member_c <- member_c*, typ''''? <- typ''''?*}
      -- (if typ''''?{typ'''' <- typ''''?} matches (_))*{typ''''? <- typ''''?*}
      -- (let ?(typ_c') = typ''''?{typ'''' <- typ''''?})*{typ''''? <- typ''''?*, typ_c' <- typ_c'*}
      -- (if $is_deftable(typ_c'))*{typ_c' <- typ_c'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:290.1-300.32
   rule recorddefaultt-headert: `%<<%`(typ, typ')
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `RecordDefaultT%`
      -- let `RecordDefaultT%`_synthtyp((member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}) = synthtyp
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}) = datatyp
      -- if $sub_set<member>(`{%}`_set<member>(member_a*{member_a <- member_a*}), `{%}`_set<member>(member_b*{member_b <- member_b*}))
      -- let `{%}`_set<member>(member_c*{member_c <- member_c*}) = $diff_set<member>(`{%}`_set<member>(member_b*{member_b <- member_b*}), `{%}`_set<member>(member_a*{member_a <- member_a*}))
      -- (let typ''?{typ'' <- typ''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_a, typ_a)*{member_a <- member_a*, typ_a <- typ_a*}), member_a))*{member_a <- member_a*, typ''? <- typ''?*}
      -- (if typ''?{typ'' <- typ''?} matches (_))*{typ''? <- typ''?*}
      -- (let ?(typ_a') = typ''?{typ'' <- typ''?})*{typ''? <- typ''?*, typ_a' <- typ_a'*}
      -- (let typ'''?{typ''' <- typ'''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_a))*{member_a <- member_a*, typ'''? <- typ'''?*}
      -- (if typ'''?{typ''' <- typ'''?} matches (_))*{typ'''? <- typ'''?*}
      -- (let ?(typ_b') = typ'''?{typ''' <- typ'''?})*{typ'''? <- typ'''?*, typ_b' <- typ_b'*}
      -- (if Sub_impl: `%<<%`(typ_a', typ_b') holds)*{typ_a' <- typ_a'*, typ_b' <- typ_b'*}
      -- (let typ''''?{typ'''' <- typ''''?} = $find_map<member, typ>(`{%}`_set<pair<member, typ>>(`%->%`_pair<member, typ>(member_b, typ_b)*{member_b <- member_b*, typ_b <- typ_b*}), member_c))*{member_c <- member_c*, typ''''? <- typ''''?*}
      -- (if typ''''?{typ'''' <- typ''''?} matches (_))*{typ''''? <- typ''''?*}
      -- (let ?(typ_c') = typ''''?{typ'''' <- typ''''?})*{typ''''? <- typ''''?*, typ_c' <- typ_c'*}
      -- (if $is_deftable(typ_c'))*{typ_c' <- typ_c'*}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:302.1-303.26
   rule invalidt-headert: `%<<%`(typ, typ')
      -- if (typ = `InvalidT`_synthtyp() as typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

   ;; ../../../../spec/4d2-typing-subtyping.watsup:305.1-306.25
   rule invalidt-uniont: `%<<%`(typ, typ')
      -- if (typ = `InvalidT`_synthtyp() as typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(_id, _(member, typ)*{_(member, typ) <- _(member, typ)*}) = datatyp

;; ../../../../spec/4b-typing-relation.watsup:47.1-49.23
relation Expr_ok: `%%|-%:%`(cursor, context, expr, exprIL)

   ;; ../../../../spec/4e-typing-expr.watsup:5.1-6.42
   rule boole: `%%|-%:%`(p, C, expr, `BoolE%%`_exprIL(b, `(%;%)`_annotIL(`BoolT`_primtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `BoolE%`
      -- let `BoolE%`_expr(b) = expr

   ;; ../../../../spec/4e-typing-expr.watsup:12.1-13.39
   rule stre: `%%|-%:%`(p, C, expr, `StrE%%`_exprIL(t, `(%;%)`_annotIL(`StrT`_primtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `StrE%`
      -- let `StrE%`_expr(t) = expr

   ;; ../../../../spec/4e-typing-expr.watsup:19.1-20.51
   rule nume-intt: `%%|-%:%`(p, C, expr, `NumE%%`_exprIL(`INT%`_num(i), `(%;%)`_annotIL(`IntT`_numtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `NumE%`
      -- let `NumE%`_expr(num) = expr
      -- if num matches `INT%`
      -- let `INT%`_num(i) = num

   ;; ../../../../spec/4e-typing-expr.watsup:22.1-24.30
   rule nume-fintt: `%%|-%:%`(p, C, expr, `NumE%%`_exprIL(`FINT%%`_num(w, i), `(%;%)`_annotIL(`FIntT%`_numtyp(w) as typ, `LCTK`_ctk())))
      -- if expr matches `NumE%`
      -- let `NumE%`_expr(num) = expr
      -- if num matches `FINT%%`
      -- let `FINT%%`_num(w, i) = num
      -- let bs = $to_bitstr(w as int, i)

   ;; ../../../../spec/4e-typing-expr.watsup:26.1-28.30
   rule nume-fbitt: `%%|-%:%`(p, C, expr, `NumE%%`_exprIL(`FBIT%%`_num(w, i), `(%;%)`_annotIL(`FBitT%`_numtyp(w) as typ, `LCTK`_ctk())))
      -- if expr matches `NumE%`
      -- let `NumE%`_expr(num) = expr
      -- if num matches `FBIT%%`
      -- let `FBIT%%`_num(w, i) = num
      -- let bs = $to_bitstr(w as int, i)

   ;; ../../../../spec/4e-typing-expr.watsup:34.1-36.45
   rule namee: `%%|-%:%`(p, C, expr, `NameE%%`_exprIL(name, `(%;%)`_annotIL(typ, ctk)))
      -- if expr matches `NameE%`
      -- let `NameE%`_expr(name) = expr
      -- let styp?{styp <- styp?} = $find_styp(p, C, name)
      -- if styp?{styp <- styp?} matches (_)
      -- let ?(`%%%%`_styp(typ, _dir, ctk, _val?{_val <- _val?})) = styp?{styp <- styp?}

   ;; ../../../../spec/4e-typing-expr.watsup:42.1-47.33
   rule seqe: `%%|-%:%`(p, C, expr', `SeqE%%`_exprIL(exprIL*{exprIL <- exprIL*}, `(%;%)`_annotIL(`SeqT%`_synthtyp(typ*{typ <- typ*}) as typ, ctk_e)))
      -- if expr' matches `SeqE%`
      -- let `SeqE%`_expr(expr*{expr <- expr*}) = expr'
      -- (Expr_ok: `%%|-%:%`(p, C, expr, exprIL))*{expr <- expr*, exprIL <- exprIL*}
      -- (let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL))*{ctk <- ctk*, exprIL <- exprIL*, typ <- typ*}
      -- let ctk_e = $joins_ctk(ctk*{ctk <- ctk*})

   ;; ../../../../spec/4e-typing-expr.watsup:49.1-54.33
   rule seqdefaulte: `%%|-%:%`(p, C, expr', `SeqDefaultE%%`_exprIL(exprIL*{exprIL <- exprIL*}, `(%;%)`_annotIL(`SeqDefaultT%`_synthtyp(typ*{typ <- typ*}) as typ, ctk_e)))
      -- if expr' matches `SeqDefaultE%`
      -- let `SeqDefaultE%`_expr(expr*{expr <- expr*}) = expr'
      -- (Expr_ok: `%%|-%:%`(p, C, expr, exprIL))*{expr <- expr*, exprIL <- exprIL*}
      -- (let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL))*{ctk <- ctk*, exprIL <- exprIL*, typ <- typ*}
      -- let ctk_e = $joins_ctk(ctk*{ctk <- ctk*})

   ;; ../../../../spec/4e-typing-expr.watsup:60.1-65.33
   rule recorde: `%%|-%:%`(p, C, expr', `RecordE%%`_exprIL((member, exprIL)*{exprIL <- exprIL*, member <- member*}, `(%;%)`_annotIL(`RecordT%`_synthtyp((member, typ)*{member <- member*, typ <- typ*}) as typ, ctk_e)))
      -- if expr' matches `RecordE%`
      -- let `RecordE%`_expr((member, expr)*{expr <- expr*, member <- member*}) = expr'
      -- (Expr_ok: `%%|-%:%`(p, C, expr, exprIL))*{expr <- expr*, exprIL <- exprIL*}
      -- (let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL))*{ctk <- ctk*, exprIL <- exprIL*, typ <- typ*}
      -- let ctk_e = $joins_ctk(ctk*{ctk <- ctk*})

   ;; ../../../../spec/4e-typing-expr.watsup:67.1-72.33
   rule recorddefaulte: `%%|-%:%`(p, C, expr', `RecordE%%`_exprIL((member, exprIL)*{exprIL <- exprIL*, member <- member*}, `(%;%)`_annotIL(`RecordDefaultT%`_synthtyp((member, typ)*{member <- member*, typ <- typ*}) as typ, ctk_e)))
      -- if expr' matches `RecordDefaultE%`
      -- let `RecordDefaultE%`_expr((member, expr)*{expr <- expr*, member <- member*}) = expr'
      -- (Expr_ok: `%%|-%:%`(p, C, expr, exprIL))*{expr <- expr*, exprIL <- exprIL*}
      -- (let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL))*{ctk <- ctk*, exprIL <- exprIL*, typ <- typ*}
      -- let ctk_e = $joins_ctk(ctk*{ctk <- ctk*})

   ;; ../../../../spec/4e-typing-expr.watsup:78.1-79.47
   rule defaulte: `%%|-%:%`(p, C, expr, `DefaultE%`_exprIL(`(%;%)`_annotIL(`DefaultT`_synthtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `DefaultE`

   ;; ../../../../spec/4e-typing-expr.watsup:85.1-86.47
   rule invalide: `%%|-%:%`(p, C, expr, `InvalidE%`_exprIL(`(%;%)`_annotIL(`InvalidT`_synthtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `InvalidE`

   ;; ../../../../spec/4e-typing-expr.watsup:101.1-105.43
   rule une-bnot: `%%|-%:%`(p, C, expr', `UnE%%%`_exprIL(`BNOT`_unop(), exprIL_e, `(%;%)`_annotIL(typ_e, ctk_e)))
      -- if expr' matches `UnE%%`
      -- let `UnE%%`_expr(unop, expr) = expr'
      -- if unop matches `BNOT`
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let exprIL'?{exprIL' <- exprIL'?} = $reduce_senum_unary(exprIL, $compatible_bnot)
      -- if exprIL'?{exprIL' <- exprIL'?} matches (_)
      -- let ?(exprIL_e) = exprIL'?{exprIL' <- exprIL'?}
      -- let `(%;%)`_annotIL(typ_e, ctk_e) = $annot(exprIL_e)

   ;; ../../../../spec/4e-typing-expr.watsup:115.1-119.43
   rule une-lnot: `%%|-%:%`(p, C, expr', `UnE%%%`_exprIL(`LNOT`_unop(), exprIL_e, `(%;%)`_annotIL(typ_e, ctk_e)))
      -- if expr' matches `UnE%%`
      -- let `UnE%%`_expr(unop, expr) = expr'
      -- if unop matches `LNOT`
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let exprIL'?{exprIL' <- exprIL'?} = $reduce_senum_unary(exprIL, $compatible_lnot)
      -- if exprIL'?{exprIL' <- exprIL'?} matches (_)
      -- let ?(exprIL_e) = exprIL'?{exprIL' <- exprIL'?}
      -- let `(%;%)`_annotIL(typ_e, ctk_e) = $annot(exprIL_e)

   ;; ../../../../spec/4e-typing-expr.watsup:131.1-135.43
   rule une-uplus: `%%|-%:%`(p, C, expr', `UnE%%%`_exprIL(`UPLUS`_unop(), exprIL_e, `(%;%)`_annotIL(typ_e, ctk_e)))
      -- if expr' matches `UnE%%`
      -- let `UnE%%`_expr(unop, expr) = expr'
      -- if unop matches `UPLUS`
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let exprIL'?{exprIL' <- exprIL'?} = $reduce_senum_unary(exprIL, $compatible_uplus)
      -- if exprIL'?{exprIL' <- exprIL'?} matches (_)
      -- let ?(exprIL_e) = exprIL'?{exprIL' <- exprIL'?}
      -- let `(%;%)`_annotIL(typ_e, ctk_e) = $annot(exprIL_e)

   ;; ../../../../spec/4e-typing-expr.watsup:147.1-151.43
   rule une-uminus: `%%|-%:%`(p, C, expr', `UnE%%%`_exprIL(`UMINUS`_unop(), exprIL_e, `(%;%)`_annotIL(typ_e, ctk_e)))
      -- if expr' matches `UnE%%`
      -- let `UnE%%`_expr(unop, expr) = expr'
      -- if unop matches `UMINUS`
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let exprIL'?{exprIL' <- exprIL'?} = $reduce_senum_unary(exprIL, $compatible_uminus)
      -- if exprIL'?{exprIL' <- exprIL'?} matches (_)
      -- let ?(exprIL_e) = exprIL'?{exprIL' <- exprIL'?}
      -- let `(%;%)`_annotIL(typ_e, ctk_e) = $annot(exprIL_e)

   ;; ../../../../spec/4e-typing-expr.watsup:168.1-185.42
   rule bine-plus-minus-mult: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l'', exprIL_r'', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`PLUS`_binop(), `MINUS`_binop(), `MUL`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_plusminusmult)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ, ctk_r'') = $annot(exprIL_r'')
      -- let ctk = $join_ctk(ctk_l'', ctk_r'')

   ;; ../../../../spec/4e-typing-expr.watsup:197.1-214.42
   rule bine-sat-plus-minus: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l'', exprIL_r'', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`SPLUS`_binop(), `SMINUS`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_satplusminus)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ, ctk_r'') = $annot(exprIL_r'')
      -- let ctk = $join_ctk(ctk_l'', ctk_r'')

   ;; ../../../../spec/4e-typing-expr.watsup:225.1-247.39
   rule bine-div-mod-lctk: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l'', exprIL_r'', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`DIV`_binop(), `MOD`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_divmod)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ, ctk') = $annot(exprIL_r'')
      -- if ctk' matches `LCTK`
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_r'', val_r)
      -- let int = $get_num(val_r)
      -- if int <: nat
      -- let n_r = int as nat
      -- if (n_r > 0)
      -- let ctk = $join_ctk(ctk_l'', `LCTK`_ctk())

   ;; ../../../../spec/4e-typing-expr.watsup:249.1-267.42
   rule bine-div-mod-non-lctk: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l'', exprIL_r'', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`DIV`_binop(), `MOD`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_divmod)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ, ctk_r'') = $annot(exprIL_r'')
      -- if (ctk_r'' =/= `LCTK`_ctk())
      -- let ctk = $join_ctk(ctk_l'', ctk_r'')

   ;; ../../../../spec/4e-typing-expr.watsup:286.1-303.40
   rule bine-shift-fbitt: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l', exprIL_r', `(%;%)`_annotIL(typ_l', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`SHL`_binop(), `SHR`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $reduce_senums_binary(exprIL_l, exprIL_r, $compatible_shift)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let `(%;%)`_annotIL(typ_l', ctk_l') = $annot(exprIL_l')
      -- let `(%;%)`_annotIL(typ_r', ctk_r') = $annot(exprIL_r')
      -- if $is_fbitt(typ_r')
      -- let ctk = $join_ctk(ctk_l', ctk_r')

   ;; ../../../../spec/4e-typing-expr.watsup:305.1-325.40
   rule bine-shift-intt: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l', exprIL_r', `(%;%)`_annotIL(typ_l', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`SHL`_binop(), `SHR`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $reduce_senums_binary(exprIL_l, exprIL_r, $compatible_shift)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let `(%;%)`_annotIL(typ_l', ctk_l') = $annot(exprIL_l')
      -- let `(%;%)`_annotIL(typ_r', ctk_r') = $annot(exprIL_r')
      -- if ($is_intt(typ_r') \/ $is_fintt(typ_r'))
      -- if (ctk_r' = `LCTK`_ctk())
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_r', val_r')
      -- let int = $get_num(val_r')
      -- if int <: nat
      -- let n_r = int as nat
      -- let ctk = $join_ctk(ctk_l', ctk_r')

   ;; ../../../../spec/4e-typing-expr.watsup:327.1-341.40
   rule bine-compare-eq: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l', exprIL_r', `(%;%)`_annotIL(`BoolT`_primtyp() as typ, ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`EQ`_binop(), `NE`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let `(%;%)`_annotIL(typ', ctk_l') = $annot(exprIL_l')
      -- let `(%;%)`_annotIL(_typ, ctk_r') = $annot(exprIL_r')
      -- if $is_equalable(typ')
      -- let ctk = $join_ctk(ctk_l', ctk_r')

   ;; ../../../../spec/4e-typing-expr.watsup:354.1-371.42
   rule bine-compare: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l'', exprIL_r'', `(%;%)`_annotIL(`BoolT`_primtyp() as typ, ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`LE`_binop(), `GE`_binop(), `LT`_binop(), `GT`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_compare)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(_typ, ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ', ctk_r'') = $annot(exprIL_r'')
      -- let ctk = $join_ctk(ctk_l'', ctk_r'')

   ;; ../../../../spec/4e-typing-expr.watsup:383.1-400.42
   rule bine-bitwise: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l'', exprIL_r'', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`BAND`_binop(), `BXOR`_binop(), `BOR`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_bitwise)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ, ctk_r'') = $annot(exprIL_r'')
      -- let ctk = $join_ctk(ctk_l'', ctk_r'')

   ;; ../../../../spec/4e-typing-expr.watsup:414.1-432.40
   rule bine-concat-fint: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(`CONCAT`_binop(), exprIL_l', exprIL_r', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop matches `CONCAT`
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $reduce_senums_binary(exprIL_l, exprIL_r, $compatible_concat)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let `(%;%)`_annotIL(typ_l', ctk_l') = $annot(exprIL_l')
      -- let `(%;%)`_annotIL(typ_r', ctk_r') = $annot(exprIL_r')
      -- let w = ($get_width(typ_l') + $get_width(typ_r'))
      -- if $is_fintt(typ_l')
      -- let typ'' = `FIntT%`_numtyp(w) as typ
      -- let ctk = $join_ctk(ctk_l', ctk_r')

   ;; ../../../../spec/4e-typing-expr.watsup:434.1-452.40
   rule bine-concat-fbit: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(`CONCAT`_binop(), exprIL_l', exprIL_r', `(%;%)`_annotIL(typ'', ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop matches `CONCAT`
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $reduce_senums_binary(exprIL_l, exprIL_r, $compatible_concat)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let `(%;%)`_annotIL(typ_l', ctk_l') = $annot(exprIL_l')
      -- let `(%;%)`_annotIL(typ_r', ctk_r') = $annot(exprIL_r')
      -- let w = ($get_width(typ_l') + $get_width(typ_r'))
      -- if $is_fbitt(typ_l')
      -- let typ'' = `FBitT%`_numtyp(w) as typ
      -- let ctk = $join_ctk(ctk_l', ctk_r')

   ;; ../../../../spec/4e-typing-expr.watsup:463.1-480.42
   rule bine-logical: `%%|-%:%`(p, C, expr, `BinE%%%%`_exprIL(binop, exprIL_l, exprIL_r, `(%;%)`_annotIL(`BoolT`_primtyp() as typ, ctk)))
      -- if expr matches `BinE%%%`
      -- let `BinE%%%`_expr(binop, expr_l, expr_r) = expr
      -- if binop <- [`LAND`_binop(), `LOR`_binop()]
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_l, exprIL_r)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_l', exprIL_r')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_l', exprIL_r', $compatible_logical)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_l'', exprIL_r'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(_typ, ctk_l'') = $annot(exprIL_l'')
      -- let `(%;%)`_annotIL(_typ', ctk_r'') = $annot(exprIL_r'')
      -- let ctk = $join_ctk(ctk_l'', ctk_r'')

   ;; ../../../../spec/4e-typing-expr.watsup:486.1-501.50
   rule terne: `%%|-%:%`(p, C, expr, `TernE%%%%`_exprIL(exprIL_c, exprIL_t', exprIL_f', `(%;%)`_annotIL(typ', ctk)))
      -- if expr matches `TernE%%%`
      -- let `TernE%%%`_expr(expr_c, expr_t, expr_f) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_c, exprIL_c)
      -- let `(%;%)`_annotIL(typ, ctk_c) = $annot(exprIL_c)
      -- if (typ = `BoolT`_primtyp() as typ)
      -- Expr_ok: `%%|-%:%`(p, C, expr_t, exprIL_t)
      -- Expr_ok: `%%|-%:%`(p, C, expr_f, exprIL_f)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_t, exprIL_f)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_t', exprIL_f')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let `(%;%)`_annotIL(typ', ctk_t) = $annot(exprIL_t')
      -- let `(%;%)`_annotIL(_typ, ctk_f) = $annot(exprIL_f')
      -- if ($is_intt(typ') => ((ctk_c = `CTK`_ctk()) \/ (ctk_c = `LCTK`_ctk())))
      -- let ctk = $joins_ctk([ctk_c, ctk_t, ctk_f])

   ;; ../../../../spec/4e-typing-expr.watsup:507.1-515.28
   rule caste: `%%|-%:%`(p, C, expr, `CastE%%%`_exprIL(typ, exprIL_b, `(%;%)`_annotIL(typ, ctk_b)))
      -- if expr matches `CastE%%`
      -- let `CastE%%`_expr(type, expr_b) = expr
      -- Type_ok: `%%|-%:%%`(p, C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(p, C), typ) holds
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- if Sub_expl: `%<:%`(typ_b, typ) holds

   ;; ../../../../spec/4e-typing-expr.watsup:532.1-546.7
   rule maske: `%%|-%:%`(p, C, expr, `MaskE%%%`_exprIL(exprIL_b'', exprIL_m'', `(%;%)`_annotIL(`SetT%`_synthtyp(typ'') as typ, `DYN`_ctk())))
      -- if expr matches `MaskE%%`
      -- let `MaskE%%`_expr(expr_b, expr_m) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- Expr_ok: `%%|-%:%`(p, C, expr_m, exprIL_m)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_b, exprIL_m)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_b', exprIL_m')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_b', exprIL_m', $compatible_mask)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_b'', exprIL_m'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', _ctk) = $annot(exprIL_b'')

   ;; ../../../../spec/4e-typing-expr.watsup:564.1-577.42
   rule rangee: `%%|-%:%`(p, C, expr, `RangeE%%%`_exprIL(exprIL_lb'', exprIL_ub'', `(%;%)`_annotIL(`SetT%`_synthtyp(typ'') as typ, `DYN`_ctk())))
      -- if expr matches `RangeE%%`
      -- let `RangeE%%`_expr(expr_lb, expr_ub) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_lb, exprIL_lb)
      -- Expr_ok: `%%|-%:%`(p, C, expr_ub, exprIL_ub)
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $coerce_binary(exprIL_lb, exprIL_ub)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_ub', exprIL_lb')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}
      -- let (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} = $reduce_senums_binary(exprIL_lb', exprIL_ub', $compatible_range)
      -- if (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?} matches (_)
      -- let ?((exprIL_lb'', exprIL_ub'')) = (exprIL, exprIL)'?{(exprIL, exprIL)' <- (exprIL, exprIL)'?}
      -- let `(%;%)`_annotIL(typ'', _ctk) = $annot(exprIL_lb'')

   ;; ../../../../spec/4e-typing-expr.watsup:647.1-656.68
   rule selecte: `%%|-%:%`(cursor, C, expr, `SelectE%%%`_exprIL(exprIL_k*{exprIL_k <- exprIL_k*}, selectcaseIL*{selectcaseIL <- selectcaseIL*}, `(%;%)`_annotIL(`StateT`_synthtyp() as typ, `DYN`_ctk())))
      -- if cursor matches `LOCAL`
      -- if expr matches `SelectE%%`
      -- let `SelectE%%`_expr(expr_k*{expr_k <- expr_k*}, selectcase*{selectcase <- selectcase*}) = expr
      -- if (C.LOCAL.KIND = `PARSERSTATE`_lkind())
      -- (Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr_k, exprIL_k))*{exprIL_k <- exprIL_k*, expr_k <- expr_k*}
      -- (let `(%;%)`_annotIL(typ_k, ctk_k) = $annot(exprIL_k))*{ctk_k <- ctk_k*, exprIL_k <- exprIL_k*, typ_k <- typ_k*}
      -- (if Type_wf: `%|-%`($bound_tids(`LOCAL`_cursor(), C), `SetT%`_synthtyp(typ_k) as typ) holds)*{typ_k <- typ_k*}
      -- (Select_case_ok: `%%%|-%:%`(`LOCAL`_cursor(), C, typ_k*{typ_k <- typ_k*}, selectcase, selectcaseIL))*{selectcase <- selectcase*, selectcaseIL <- selectcaseIL*}

   ;; ../../../../spec/4e-typing-expr.watsup:672.1-686.37
   rule arracce-tuplet: `%%|-%:%`(p, C, expr, `ArrAccE%%%`_exprIL(exprIL_b, exprIL_i', `(%;%)`_annotIL(typ, ctk)))
      -- if expr matches `ArrAccE%%`
      -- let `ArrAccE%%`_expr(expr_b, expr_i) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- Expr_ok: `%%|-%:%`(p, C, expr_i, exprIL_i)
      -- let `(%;%)`_annotIL(typ_i, ctk') = $annot(exprIL_i)
      -- if ctk' matches `LCTK`
      -- let exprIL?{exprIL <- exprIL?} = $reduce_senum_unary(exprIL_i, $compatible_arrayindex)
      -- if exprIL?{exprIL <- exprIL?} matches (_)
      -- let ?(exprIL_i') = exprIL?{exprIL <- exprIL?}
      -- let typ' = $canon_typ(typ_b)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_b'*{typ_b' <- typ_b'*}) = datatyp
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_i', val_i)
      -- let int = $get_num(val_i)
      -- if int <: nat
      -- let n = int as nat
      -- let typ = typ_b'*{typ_b' <- typ_b'*}[n]
      -- let ctk = $join_ctk(ctk_b, `LCTK`_ctk())

   ;; ../../../../spec/4e-typing-expr.watsup:688.1-702.37
   rule arracce-stackt-lctk: `%%|-%:%`(p, C, expr, `ArrAccE%%%`_exprIL(exprIL_b, exprIL_i', `(%;%)`_annotIL(typ_b', ctk)))
      -- if expr matches `ArrAccE%%`
      -- let `ArrAccE%%`_expr(expr_b, expr_i) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- Expr_ok: `%%|-%:%`(p, C, expr_i, exprIL_i)
      -- let `(%;%)`_annotIL(typ_i, ctk') = $annot(exprIL_i)
      -- if ctk' matches `LCTK`
      -- let exprIL?{exprIL <- exprIL?} = $reduce_senum_unary(exprIL_i, $compatible_arrayindex)
      -- if exprIL?{exprIL <- exprIL?} matches (_)
      -- let ?(exprIL_i') = exprIL?{exprIL <- exprIL?}
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b', i_s) = datatyp
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_i', val_i)
      -- let i = $get_num(val_i)
      -- if ((0 as int <= i) /\ (i <= i_s))
      -- let ctk = $join_ctk(ctk_b, `LCTK`_ctk())

   ;; ../../../../spec/4e-typing-expr.watsup:704.1-716.38
   rule arracce-stackt-ctk-dyn: `%%|-%:%`(p, C, expr, `ArrAccE%%%`_exprIL(exprIL_b, exprIL_i', `(%;%)`_annotIL(typ_b', ctk)))
      -- if expr matches `ArrAccE%%`
      -- let `ArrAccE%%`_expr(expr_b, expr_i) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- Expr_ok: `%%|-%:%`(p, C, expr_i, exprIL_i)
      -- let `(%;%)`_annotIL(typ_i, ctk_i) = $annot(exprIL_i)
      -- if (ctk_i =/= `LCTK`_ctk())
      -- let exprIL?{exprIL <- exprIL?} = $reduce_senum_unary(exprIL_i, $compatible_arrayindex)
      -- if exprIL?{exprIL <- exprIL?} matches (_)
      -- let ?(exprIL_i') = exprIL?{exprIL <- exprIL?}
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b', _int) = datatyp
      -- let ctk = $join_ctk(ctk_b, ctk_i)

   ;; ../../../../spec/4e-typing-expr.watsup:757.1-785.37
   rule bitacce: `%%|-%:%`(p, C, expr, `BitAccE%%%%`_exprIL(exprIL_b', exprIL_l'', exprIL_h'', `(%;%)`_annotIL(typ, ctk_b')))
      -- if expr matches `BitAccE%%%`
      -- let `BitAccE%%%`_expr(expr_b, expr_l, expr_h) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let exprIL?{exprIL <- exprIL?} = $reduce_senum_unary(exprIL_b, $compatible_bitstringbase)
      -- if exprIL?{exprIL <- exprIL?} matches (_)
      -- let ?(exprIL_b') = exprIL?{exprIL <- exprIL?}
      -- let `(%;%)`_annotIL(typ_b', ctk_b') = $annot(exprIL_b')
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- let `(%;%)`_annotIL(typ_l, ctk) = $annot(exprIL_l)
      -- if ctk matches `LCTK`
      -- let exprIL'?{exprIL' <- exprIL'?} = $reduce_senum_unary(exprIL_l, $compatible_bitstringindex)
      -- if exprIL'?{exprIL' <- exprIL'?} matches (_)
      -- let ?(exprIL_l') = exprIL'?{exprIL' <- exprIL'?}
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_l', val_l)
      -- let int = $get_num(val_l)
      -- if int <: nat
      -- let n_l = int as nat
      -- let exprIL_l'' = `ValueE%%`_exprIL(val_l, `(%;%)`_annotIL(typ_l, `LCTK`_ctk()))
      -- Expr_ok: `%%|-%:%`(p, C, expr_h, exprIL_h)
      -- let `(%;%)`_annotIL(typ_h, ctk') = $annot(exprIL_h)
      -- if ctk' matches `LCTK`
      -- let exprIL''?{exprIL'' <- exprIL''?} = $reduce_senum_unary(exprIL_h, $compatible_bitstringindex)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL_h') = exprIL''?{exprIL'' <- exprIL''?}
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_h', val_h)
      -- let int' = $get_num(val_h)
      -- if int' <: nat
      -- let n_h = int' as nat
      -- let exprIL_h'' = `ValueE%%`_exprIL(val_h, `(%;%)`_annotIL(typ_h, `LCTK`_ctk()))
      -- if $is_valid_bitstring_slice(typ_b', n_l, n_h)
      -- let typ = `FBitT%`_numtyp(((n_h - n_l) + 1)) as typ

   ;; ../../../../spec/4e-typing-expr.watsup:791.1-794.41
   rule erracce: `%%|-%:%`(p, C, expr, `ErrAccE%%`_exprIL(member, `(%;%)`_annotIL(`ErrT`_primtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `ErrAccE%`
      -- let `ErrAccE%`_expr(member) = expr
      -- let id = $concat_text(["error.", member])
      -- let val'?{val' <- val'?} = $find_val(p, C, `TOP%`_name(id))
      -- if val'?{val' <- val'?} matches (_)
      -- let ?(val) = val'?{val' <- val'?}
      -- if val matches `ErrV%`
      -- let `ErrV%`_val(_member) = val

   ;; ../../../../spec/4e-typing-expr.watsup:800.1-804.28
   rule typeacce-enumt: `%%|-%:%`(p, C, expr, `TypeAccE%%%`_exprIL(name, member, `(%;%)`_annotIL(typ, `LCTK`_ctk())))
      -- if expr matches `TypeAccE%%`
      -- let `TypeAccE%%`_expr(name, member) = expr
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef
      -- let typ' = $canon_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `EnumT%%`
      -- let `EnumT%%`_datatyp(id_t, member_t*{member_t <- member_t*}) = datatyp
      -- if member <- member_t*{member_t <- member_t*}

   ;; ../../../../spec/4e-typing-expr.watsup:806.1-810.63
   rule typeacce-senumt: `%%|-%:%`(p, C, expr, `TypeAccE%%%`_exprIL(name, member, `(%;%)`_annotIL(typ, `LCTK`_ctk())))
      -- if expr matches `TypeAccE%%`
      -- let `TypeAccE%%`_expr(name, member) = expr
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ) = typdef as monotypdef
      -- let typ' = $canon_typ(typ)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(id_t, typ_t, (member_t, val_t)*{member_t <- member_t*, val_t <- val_t*}) = datatyp
      -- let val'?{val' <- val'?} = $assoc_<member, val>(member, (member_t, val_t)*{member_t <- member_t*, val_t <- val_t*})
      -- if val'?{val' <- val'?} matches (_)
      -- let ?(val) = val'?{val' <- val'?}

   ;; ../../../../spec/4e-typing-expr.watsup:816.1-821.47
   rule expracce-stackt-size: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, "size", `(%;%)`_annotIL(`FBitT%`_numtyp(32) as typ, `LCTK`_ctk())))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, text) = expr
      -- if (text = "size")
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_s, int_s) = datatyp

   ;; ../../../../spec/4e-typing-expr.watsup:823.1-830.47
   rule expracce-stackt-lastindex: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, "lastIndex", `(%;%)`_annotIL(`FBitT%`_numtyp(32) as typ, `DYN`_ctk())))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, text) = expr
      -- if (text = "lastIndex")
      -- if (((p = `BLOCK`_cursor()) /\ (C.BLOCK.KIND = `PARSER`_bkind())) \/ ((p = `LOCAL`_cursor()) /\ (C.LOCAL.KIND = `PARSERSTATE`_lkind())))
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_s, int_s) = datatyp

   ;; ../../../../spec/4e-typing-expr.watsup:832.1-839.47
   rule expracce-stackt-last: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, "last", `(%;%)`_annotIL(typ_s, `DYN`_ctk())))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, text) = expr
      -- if (text = "last")
      -- if (((p = `BLOCK`_cursor()) /\ (C.BLOCK.KIND = `PARSER`_bkind())) \/ ((p = `LOCAL`_cursor()) /\ (C.LOCAL.KIND = `PARSERSTATE`_lkind())))
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_s, int_s) = datatyp

   ;; ../../../../spec/4e-typing-expr.watsup:841.1-846.47
   rule expracce-stackt-next: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, "next", `(%;%)`_annotIL(typ_s, `DYN`_ctk())))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, text) = expr
      -- if (text = "next")
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_s, int_s) = datatyp

   ;; ../../../../spec/4e-typing-expr.watsup:848.1-855.63
   rule expracce-structt: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, member, `(%;%)`_annotIL(typ, ctk_b)))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, member) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ' = $canon_typ(typ_b)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id_s, (member_s, typ_s)*{member_s <- member_s*, typ_s <- typ_s*}) = datatyp
      -- let typ''?{typ'' <- typ''?} = $assoc_<member, typ>(member, (member_s, typ_s)*{member_s <- member_s*, typ_s <- typ_s*})
      -- if typ''?{typ'' <- typ''?} matches (_)
      -- let ?(typ) = typ''?{typ'' <- typ''?}

   ;; ../../../../spec/4e-typing-expr.watsup:857.1-864.63
   rule expracce-headert: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, member, `(%;%)`_annotIL(typ, ctk_b)))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, member) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ' = $canon_typ(typ_b)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id_h, (member_h, typ_h)*{member_h <- member_h*, typ_h <- typ_h*}) = datatyp
      -- let typ''?{typ'' <- typ''?} = $assoc_<member, typ>(member, (member_h, typ_h)*{member_h <- member_h*, typ_h <- typ_h*})
      -- if typ''?{typ'' <- typ''?} matches (_)
      -- let ?(typ) = typ''?{typ'' <- typ''?}

   ;; ../../../../spec/4e-typing-expr.watsup:866.1-873.63
   rule expracce-uniont: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, member, `(%;%)`_annotIL(typ, ctk_b)))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, member) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ' = $canon_typ(typ_b)
      -- if typ' <: datatyp
      -- let datatyp = typ' as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id_u, (member_u, typ_u)*{member_u <- member_u*, typ_u <- typ_u*}) = datatyp
      -- let typ''?{typ'' <- typ''?} = $assoc_<member, typ>(member, (member_u, typ_u)*{member_u <- member_u*, typ_u <- typ_u*})
      -- if typ''?{typ'' <- typ''?} matches (_)
      -- let ?(typ) = typ''?{typ'' <- typ''?}

   ;; ../../../../spec/4e-typing-expr.watsup:875.1-882.63
   rule expracce-tablestructt: `%%|-%:%`(p, C, expr, `ExprAccE%%%`_exprIL(exprIL_b, member, `(%;%)`_annotIL(typ, `DYN`_ctk())))
      -- if expr matches `ExprAccE%%`
      -- let `ExprAccE%%`_expr(expr_b, member) = expr
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- let typ' = $canon_typ(typ_b)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `TableStructT%%`
      -- let `TableStructT%%`_synthtyp(id_t, (member_t, typ_t)*{member_t <- member_t*, typ_t <- typ_t*}) = synthtyp
      -- let typ''?{typ'' <- typ''?} = $assoc_<member, typ>(member, (member_t, typ_t)*{member_t <- member_t*, typ_t <- typ_t*})
      -- if typ''?{typ'' <- typ''?} matches (_)
      -- let ?(typ) = typ''?{typ'' <- typ''?}

   ;; ../../../../spec/4e-typing-expr.watsup:888.1-899.22
   rule callfunce: `%%|-%:%`(p, C, expr, `CallFuncE%%%%`_exprIL(name, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, `(%;%)`_annotIL(typ, `DYN`_ctk())))
      -- if expr matches `CallFuncE%%%`
      -- let `CallFuncE%%%`_expr(name, targ*{targ <- targ*}, arg*{arg <- arg*}) = expr
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- FuncType_ok: `%%|-%%%:%%%`(p, C, name, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>(tid_fresh*{tid_fresh <- tid_fresh*} :: [tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ft, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- if (typ =/= `VoidT`_primtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:905.1-919.22
   rule callmethode-builtin-size: `%%|-%:%`(p, C, expr, `CallMethodE%%%%%`_exprIL(exprIL_b, member, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, `(%;%)`_annotIL(typ, `LCTK`_ctk())))
      -- if expr matches `CallMethodE%%%%`
      -- let `CallMethodE%%%%`_expr(expr_b, member, targ*{targ <- targ*}, arg*{arg <- arg*}) = expr
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- MethodType_ok: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- if $is_builtinmethodt(ft)
      -- if member <- ["minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes"]
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>([tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ft, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- if (typ =/= `VoidT`_primtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:921.1-935.22
   rule callmethode-builtin: `%%|-%:%`(p, C, expr, `CallMethodE%%%%%`_exprIL(exprIL_b, member, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, `(%;%)`_annotIL(typ, `DYN`_ctk())))
      -- if expr matches `CallMethodE%%%%`
      -- let `CallMethodE%%%%`_expr(expr_b, member, targ*{targ <- targ*}, arg*{arg <- arg*}) = expr
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- MethodType_ok: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- if $is_builtinmethodt(ft)
      -- if ~member <- ["minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes"]
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>([tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ft, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- if (typ =/= `VoidT`_primtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:937.1-950.22
   rule callmethode-non-builtin: `%%|-%:%`(p, C, expr, `CallMethodE%%%%%`_exprIL(exprIL_b, member, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, `(%;%)`_annotIL(typ, `DYN`_ctk())))
      -- if expr matches `CallMethodE%%%%`
      -- let `CallMethodE%%%%`_expr(expr_b, member, targ*{targ <- targ*}, arg*{arg <- arg*}) = expr
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- MethodType_ok: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- if ~$is_builtinmethodt(ft)
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>([tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ft, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- if (typ =/= `VoidT`_primtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:956.1-965.55
   rule calltypee: `%%|-%:%`(p, C, expr, `CallTypeE%%%%%`_exprIL(name, member, [], [], `(%;%)`_annotIL(`IntT`_numtyp() as typ, `LCTK`_ctk())))
      -- if expr matches `CallTypeE%%%%`
      -- let `CallTypeE%%%%`_expr(name, member, targ*{targ <- targ*}, arg*{arg <- arg*}) = expr
      -- if targ*{targ <- targ*} matches []
      -- if arg*{arg <- arg*} matches []
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(p, C, name)
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if member <- ["minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes"]
      -- let ft = `BuiltinMethodT%%`_functyp([], `IntT`_numtyp() as typ)
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, [], ft, [], [], [], typ, targIL*{targIL <- targIL*}, argIL*{argIL <- argIL*})
      -- if (typ = `IntT`_numtyp() as typ)
      -- if targIL*{targIL <- targIL*} matches []
      -- if argIL*{argIL <- argIL*} matches []

   ;; ../../../../spec/4e-typing-expr.watsup:991.1-1002.41
   rule inste: `%%|-%:%`(p, C, expr, `InstE%%%%`_exprIL(name, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, `(%;%)`_annotIL(typ, `CTK`_ctk())))
      -- if expr matches `InstE%%%`
      -- let `InstE%%%`_expr(name, targ*{targ <- targ*}, arg*{arg <- arg*}) = expr
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- ConsType_ok: `%%|-%%%:%%%`(p, C, name, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ct, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>([tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Inst_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ct, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- if $not_abstract_extern_object(typ)

;; ../../../../spec/4b-typing-relation.watsup:53.1-55.23
relation Arg_ok: `%%|-%:%%`(cursor, context, arg, argIL, typ)

   ;; ../../../../spec/4e-typing-expr.watsup:1008.1-1011.35
   rule expra: `%%|-%:%%`(p, C, arg, `ExprA%`_argIL(exprIL), typ)
      -- if arg matches `ExprA%`
      -- let `ExprA%`_arg(expr) = arg
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)

   ;; ../../../../spec/4e-typing-expr.watsup:1013.1-1016.35
   rule namea-some: `%%|-%:%%`(p, C, arg, `NameA%%`_argIL(id, ?(exprIL)), typ)
      -- if arg matches `NameA%%`
      -- let `NameA%%`_arg(id, expr'?{expr' <- expr'?}) = arg
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)

   ;; ../../../../spec/4e-typing-expr.watsup:1018.1-1019.44
   rule expra-none: `%%|-%:%%`(p, C, arg, `NameA%%`_argIL(id, ?()), `AnyT`_synthtyp() as typ)
      -- if arg matches `NameA%%`
      -- let `NameA%%`_arg(id, expr?{expr <- expr?}) = arg
      -- if expr?{expr <- expr?} matches ()

   ;; ../../../../spec/4e-typing-expr.watsup:1021.1-1022.26
   rule anya: `%%|-%:%%`(p, C, arg, `AnyA`_argIL(), `AnyT`_synthtyp() as typ)
      -- if arg matches `AnyA`

;; ../../../../spec/4b-typing-relation.watsup:58.1-60.23
relation Lval_ok: `%%|-%`(cursor, context, exprIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:12.1-16.28
   rule namee: `%%|-%`(p, C, exprIL)
      -- if exprIL matches `NameE%%`
      -- let `NameE%%`_exprIL(name, _annotIL) = exprIL
      -- let styp?{styp <- styp?} = $find_styp(p, C, name)
      -- if styp?{styp <- styp?} matches (_)
      -- let ?(`%%%%`_styp(typ, dir, _ctk, _val?{_val <- _val?})) = styp?{styp <- styp?}
      -- if ((dir = `OUT`_dir()) \/ (dir = `INOUT`_dir()))
      -- if $is_assignable(typ)

   ;; ../../../../spec/4f-typing-stmt.watsup:18.1-20.30
   rule arracce: `%%|-%`(p, C, exprIL)
      -- if exprIL matches `ArrAccE%%%`
      -- let `ArrAccE%%%`_exprIL(exprIL_b, exprIL_i, _annotIL) = exprIL
      -- if Lval_ok: `%%|-%`(p, C, exprIL_b) holds

   ;; ../../../../spec/4f-typing-stmt.watsup:22.1-24.30
   rule bitacce: `%%|-%`(p, C, exprIL)
      -- if exprIL matches `BitAccE%%%%`
      -- let `BitAccE%%%%`_exprIL(exprIL_b, exprIL_l, exprIL_h, _annotIL) = exprIL
      -- if Lval_ok: `%%|-%`(p, C, exprIL_b) holds

   ;; ../../../../spec/4f-typing-stmt.watsup:26.1-28.30
   rule expracce: `%%|-%`(p, C, exprIL)
      -- if exprIL matches `ExprAccE%%%`
      -- let `ExprAccE%%%`_exprIL(exprIL_b, member, _annotIL) = exprIL
      -- if Lval_ok: `%%|-%`(p, C, exprIL_b) holds

;; ../../../../spec/4b-typing-relation.watsup:65.18-65.31
syntax blkctxt = 
   | `INIT`()
   | `NOINIT`()

;; ../../../../spec/4b-typing-relation.watsup:66.1-68.29
relation Block_ok: `%%%%|-%:%%%`(cursor, context, flow, blkctxt, block, context, flow, blockIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:199.1-201.50
   rule init: `%%%%|-%:%%%`(cursor, C, f, blkctxt, `BlockB%`_block(stmt*{stmt <- stmt*}), C', f', `BlockB%`_blockIL(stmtIL*{stmtIL <- stmtIL*}))
      -- if cursor matches `LOCAL`
      -- if blkctxt matches `INIT`
      -- Stmts_ok: `%%%|-%:%%%`(`LOCAL`_cursor(), C, f, stmt*{stmt <- stmt*}, C', f', stmtIL*{stmtIL <- stmtIL*})

   ;; ../../../../spec/4f-typing-stmt.watsup:203.1-207.26
   rule noinit: `%%%%|-%:%%%`(cursor, C, f, blkctxt, `BlockB%`_block(stmt*{stmt <- stmt*}), C''', f', `BlockB%`_blockIL(stmtIL*{stmtIL <- stmtIL*}))
      -- if cursor matches `LOCAL`
      -- if blkctxt matches `NOINIT`
      -- let C' = $enter(C)
      -- Stmts_ok: `%%%|-%:%%%`(`LOCAL`_cursor(), C', f, stmt*{stmt <- stmt*}, C'', f', stmtIL*{stmtIL <- stmtIL*})
      -- let C''' = $exit(C'')

;; ../../../../spec/4b-typing-relation.watsup:69.1-71.26
relation Stmt_ok: `%%%|-%:%%%`(cursor, context, flow, stmt, context, flow, stmtIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:5.1-6.31
   rule emptys: `%%%|-%:%%%`(p, C, f, stmt, C, f, `EmptyS`_stmtIL())
      -- if stmt matches `EmptyS`

   ;; ../../../../spec/4f-typing-stmt.watsup:30.1-40.52
   rule assigns: `%%%|-%:%%%`(p, C, f, stmt, C, f, `AssignS%%`_stmtIL(exprIL_l, exprIL_r'))
      -- if stmt matches `AssignS%%`
      -- let `AssignS%%`_stmt(expr_l, expr_r) = stmt
      -- Expr_ok: `%%|-%:%`(p, C, expr_l, exprIL_l)
      -- let `(%;%)`_annotIL(typ_l, ctk) = $annot(exprIL_l)
      -- if ctk matches `DYN`
      -- if Lval_ok: `%%|-%`(p, C, exprIL_l) holds
      -- Expr_ok: `%%|-%:%`(p, C, expr_r, exprIL_r)
      -- let `(%;%)`_annotIL(typ_r, _ctk) = $annot(exprIL_r)
      -- let exprIL?{exprIL <- exprIL?} = $coerce_assign(exprIL_r, typ_l)
      -- if exprIL?{exprIL <- exprIL?} matches (_)
      -- let ?(exprIL_r') = exprIL?{exprIL <- exprIL?}

   ;; ../../../../spec/4f-typing-stmt.watsup:101.1-110.46
   rule switchs-tbl: `%%%|-%:%%%`(cursor, C, f, stmt, C, f', `SwitchS%%`_stmtIL(exprIL, switchcaseIL*{switchcaseIL <- switchcaseIL*}))
      -- if cursor matches `LOCAL`
      -- if stmt matches `SwitchS%%`
      -- let `SwitchS%%`_stmt(expr, switchcase*{switchcase <- switchcase*}) = stmt
      -- if (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `TableEnumT%%`
      -- let `TableEnumT%%`_synthtyp(id, _member*{_member <- _member*}) = synthtyp
      -- let id_t = $strip_prefix($strip_suffix(id, ")"), "action_list(")
      -- Switch_tbl_cases_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C, f, id_t, switchcase*{switchcase <- switchcase*}, f', switchcaseIL*{switchcaseIL <- switchcaseIL*}, switchlabel*{switchlabel <- switchlabel*})
      -- if $distinct_<switchlabel>(switchlabel*{switchlabel <- switchlabel*})

   ;; ../../../../spec/4f-typing-stmt.watsup:167.1-180.46
   rule switchs-gen: `%%%|-%:%%%`(cursor, C, f, stmt, C, f', `SwitchS%%`_stmtIL(exprIL, switchcaseIL*{switchcaseIL <- switchcaseIL*}))
      -- if cursor matches `LOCAL`
      -- if stmt matches `SwitchS%%`
      -- let `SwitchS%%`_stmt(expr, switchcase*{switchcase <- switchcase*}) = stmt
      -- if (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- let typ' = $canon_typ(typ)
      -- if (((($is_errt(typ') \/ $is_fintt(typ')) \/ $is_fbitt(typ')) \/ $is_enumt(typ')) \/ $is_senumt(typ'))
      -- Switch_gen_cases_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C, f, typ, switchcase*{switchcase <- switchcase*}, f', switchcaseIL*{switchcaseIL <- switchcaseIL*}, switchlabel*{switchlabel <- switchlabel*})
      -- if $distinct_<switchlabel>(switchlabel*{switchlabel <- switchlabel*})

   ;; ../../../../spec/4f-typing-stmt.watsup:186.1-193.34
   rule ifs: `%%%|-%:%%%`(p, C, f, stmt, C, f', `IfS%%%`_stmtIL(exprIL_c, stmtIL_t, stmtIL_f))
      -- if stmt matches `IfS%%%`
      -- let `IfS%%%`_stmt(expr_c, stmt_t, stmt_f) = stmt
      -- Expr_ok: `%%|-%:%`(p, C, expr_c, exprIL_c)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL_c)
      -- if (typ = `BoolT`_primtyp() as typ)
      -- Stmt_ok: `%%%|-%:%%%`(p, C, f, stmt_t, C_t, f_t, stmtIL_t)
      -- Stmt_ok: `%%%|-%:%%%`(p, C, f, stmt_f, C_f, f_f, stmtIL_f)
      -- let f' = $join_flow(f_t, f_f)

   ;; ../../../../spec/4f-typing-stmt.watsup:209.1-211.57
   rule blocks: `%%%|-%:%%%`(cursor, C, f, stmt, C', f', `BlockS%`_stmtIL(blockIL))
      -- if cursor matches `LOCAL`
      -- if stmt matches `BlockS%`
      -- let `BlockS%`_stmt(block) = stmt
      -- Block_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C, f, `NOINIT`_blkctxt(), block, C', f', blockIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:217.1-218.29
   rule exits: `%%%|-%:%%%`(p, C, f, stmt, C, f, `ExitS`_stmtIL())
      -- if stmt matches `ExitS`

   ;; ../../../../spec/4f-typing-stmt.watsup:224.1-226.49
   rule rets-none: `%%%|-%:%%%`(cursor, C, f, stmt, C, `RET`_flow(), `RetS%`_stmtIL(?()))
      -- if cursor matches `LOCAL`
      -- if (stmt = `RetS%`_stmt(?()))
      -- if (`VoidT`_primtyp() as typ = $get_typ_ret_lkind(C.LOCAL.KIND))

   ;; ../../../../spec/4f-typing-stmt.watsup:228.1-233.48
   rule rets-some: `%%%|-%:%%%`(cursor, C, f, stmt, C, `RET`_flow(), `RetS%`_stmtIL(?(exprIL')))
      -- if cursor matches `LOCAL`
      -- if stmt matches `RetS%`
      -- let `RetS%`_stmt(expr'?{expr' <- expr'?}) = stmt
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- let typ_r = $get_typ_ret_lkind(C.LOCAL.KIND)
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_r)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}

   ;; ../../../../spec/4f-typing-stmt.watsup:239.1-255.46
   rule callfuncs: `%%%|-%:%%%`(p, C, f, stmt, C, f, `CallFuncS%%%`_stmtIL(name, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}))
      -- if stmt matches `CallFuncS%%%`
      -- let `CallFuncS%%%`_stmt(name, targ*{targ <- targ*}, arg*{arg <- arg*}) = stmt
      -- if ((name = `CURRENT%`_name("verify")) => (((p = `BLOCK`_cursor()) /\ (C.BLOCK.KIND = `PARSER`_bkind())) \/ ((p = `LOCAL`_cursor()) /\ (C.LOCAL.KIND = `PARSERSTATE`_lkind()))))
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- FuncType_ok: `%%|-%%%:%%%`(p, C, name, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>([tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ft, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})

   ;; ../../../../spec/4f-typing-stmt.watsup:261.1-277.46
   rule callmethods: `%%%|-%:%%%`(p, C, f, stmt, C, f, `CallMethodS%%%%`_stmtIL(exprIL_b, member, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}))
      -- if stmt matches `CallMethodS%%%%`
      -- let `CallMethodS%%%%`_stmt(expr_b, member, targ*{targ <- targ*}, arg*{arg <- arg*}) = stmt
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_arg))*{arg <- arg*, argIL <- argIL*, typ_arg <- typ_arg*}
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- MethodType_ok: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- let tid_fresh'*{tid_fresh' <- tid_fresh'*} = $concat_<tid>([tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}])
      -- Call_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh'*{tid_fresh' <- tid_fresh'*}, ft, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})

   ;; ../../../../spec/4f-typing-stmt.watsup:283.1-299.77
   rule callinsts: `%%%|-%:%%%`(p, C, f, stmt, C, f, `CallInstS%%%%`_stmtIL(typ, name, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}))
      -- if stmt matches `CallInstS%%%`
      -- let `CallInstS%%%`_stmt(name, targ*{targ <- targ*}, arg*{arg <- arg*}) = stmt
      -- ConsType_ok: `%%|-%%%:%%%`(p, C, name, [], [], ct, tid*{tid <- tid*}, id'*{id' <- id'*})
      -- if tid*{tid <- tid*} matches []
      -- if id'*{id' <- id'*} matches []
      -- Inst_ok: `%%%|-%%%%:%%%`(p, C, [], ct, [], [], [], typ, targIL*{targIL <- targIL*}, argIL*{argIL <- argIL*})
      -- if targIL*{targIL <- targIL*} matches []
      -- if argIL*{argIL <- argIL*} matches []
      -- let typ' = $canon_typ(typ)
      -- if ($is_parsert(typ') \/ $is_controlt(typ'))
      -- let id = $id_of_name(name)
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ, `NO`_dir(), `CTK`_ctk(), ?()))
      -- Stmt_ok: `%%%|-%:%%%`(p, C', f, `CallMethodS%%%%`_stmt(`NameE%`_expr(`CURRENT%`_name(id)), "apply", targ*{targ <- targ*}, arg*{arg <- arg*}), C'', f', stmtIL)
      -- let stmtIL' = stmtIL
      -- if stmtIL' matches `CallMethodS%%%%`
      -- let `CallMethodS%%%%`_stmtIL(exprIL, text, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}) = stmtIL'
      -- if exprIL matches `NameE%%`
      -- let `NameE%%`_exprIL(name', _annotIL) = exprIL
      -- if (name' = `CURRENT%`_name(id))
      -- if (text = "apply")

   ;; ../../../../spec/4f-typing-stmt.watsup:305.1-308.38
   rule transs: `%%%|-%:%%%`(p, C, f, stmt, C, f, `TransS%`_stmtIL(exprIL))
      -- if stmt matches `TransS%`
      -- let `TransS%`_stmt(expr) = stmt
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if (typ = `StateT`_synthtyp() as typ)

   ;; ../../../../spec/4f-typing-stmt.watsup:314.1-316.38
   rule decls: `%%%|-%:%%%`(p, C, f, stmt, C', f, `DeclS%`_stmtIL(declIL))
      -- if stmt matches `DeclS%`
      -- let `DeclS%`_stmt(decl) = stmt
      -- Decl_ok: `%%|-%:%%`(p, C, decl, C', declIL)

;; ../../../../spec/4b-typing-relation.watsup:72.1-74.26
relation Stmts_ok: `%%%|-%:%%%`(cursor, context, flow, stmt*, context, flow, stmtIL*)

   ;; ../../../../spec/4f-typing-stmt.watsup:322.1-323.25
   rule nil: `%%%|-%:%%%`(p, C, f, stmt*{stmt <- stmt*}, C, f, [])
      -- if stmt*{stmt <- stmt*} matches []

   ;; ../../../../spec/4f-typing-stmt.watsup:325.1-328.54
   rule cons: `%%%|-%:%%%`(p, C, f, stmt*{stmt <- stmt*}, C'', f'', stmtIL_h :: stmtIL_t*{stmtIL_t <- stmtIL_t*})
      -- if stmt*{stmt <- stmt*} matches _ :: _
      -- let stmt_h :: stmt_t*{stmt_t <- stmt_t*} = stmt*{stmt <- stmt*}
      -- Stmt_ok: `%%%|-%:%%%`(p, C, f, stmt_h, C', f', stmtIL_h)
      -- Stmts_ok: `%%%|-%:%%%`(p, C', f', stmt_t*{stmt_t <- stmt_t*}, C'', f'', stmtIL_t*{stmtIL_t <- stmtIL_t*})

;; ../../../../spec/4b-typing-relation.watsup:79.1-81.23
relation Param_ok: `%%|-%:%%`(cursor, context, param, paramIL, tid*)

   ;; ../../../../spec/4g-typing-decl.watsup:5.1-16.41
   rule param-default: `%%|-%:%%`(p, C, `%%%%`_param(id, dir, type, expr'?{expr' <- expr'?}), `%%%%`_paramIL(id, dir, typ_p, ?(exprIL_e)), tid_fresh*{tid_fresh <- tid_fresh*})
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- Type_ok: `%%|-%:%%`(p, C, type, typ_p, tid_fresh*{tid_fresh <- tid_fresh*})
      -- let tidset = $union_set<tid>($bound_tids(p, C), `{%}`_set<tid>(tid_fresh*{tid_fresh <- tid_fresh*}))
      -- if Type_wf: `%|-%`(tidset, typ_p) holds
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL_e)
      -- let `(%;%)`_annotIL(typ_e, ctk) = $annot(exprIL_e)
      -- if ctk matches `LCTK`
      -- if Sub_impl: `%<<%`(typ_e, typ_p) holds
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_e, val)

   ;; ../../../../spec/4g-typing-decl.watsup:18.1-22.30
   rule param-nodefault: `%%|-%:%%`(p, C, `%%%%`_param(id, dir, type, expr?{expr <- expr?}), `%%%%`_paramIL(id, dir, typ_p, ?()), tid_fresh*{tid_fresh <- tid_fresh*})
      -- if expr?{expr <- expr?} matches ()
      -- Type_ok: `%%|-%:%%`(p, C, type, typ_p, tid_fresh*{tid_fresh <- tid_fresh*})
      -- let tidset = $union_set<tid>($bound_tids(p, C), `{%}`_set<tid>(tid_fresh*{tid_fresh <- tid_fresh*}))
      -- if Type_wf: `%|-%`(tidset, typ_p) holds

;; ../../../../spec/4b-typing-relation.watsup:82.1-84.23
relation CParam_ok: `%%|-%:%%`(cursor, context, cparam, cparamIL, tid*)

   ;; ../../../../spec/4g-typing-decl.watsup:28.1-38.41
   rule cparam-default: `%%|-%:%%`(p, C, `%%%%`_param(id, dir, type, expr'?{expr' <- expr'?}), `%%%%`_paramIL(id, dir, typ_p, ?(exprIL_e)), tid_fresh*{tid_fresh <- tid_fresh*})
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- Type_ok: `%%|-%:%%`(p, C, type, typ_p, tid_fresh*{tid_fresh <- tid_fresh*})
      -- let tidset = $union_set<tid>($bound_tids(p, C), `{%}`_set<tid>(tid_fresh*{tid_fresh <- tid_fresh*}))
      -- if Type_wf: `%|-%`(tidset, typ_p) holds
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL_e)
      -- let `(%;%)`_annotIL(typ_e, ctk) = $annot(exprIL_e)
      -- if ctk matches `LCTK`
      -- if Sub_impl: `%<<%`(typ_e, typ_p) holds
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_e, val)

   ;; ../../../../spec/4g-typing-decl.watsup:40.1-44.30
   rule cparam-nodefault: `%%|-%:%%`(p, C, `%%%%`_param(id, dir, type, expr?{expr <- expr?}), `%%%%`_paramIL(id, dir, typ_p, ?()), tid_fresh*{tid_fresh <- tid_fresh*})
      -- if expr?{expr <- expr?} matches ()
      -- Type_ok: `%%|-%:%%`(p, C, type, typ_p, tid_fresh*{tid_fresh <- tid_fresh*})
      -- let tidset = $union_set<tid>($bound_tids(p, C), `{%}`_set<tid>(tid_fresh*{tid_fresh <- tid_fresh*}))
      -- if Type_wf: `%|-%`(tidset, typ_p) holds

;; ../../../../spec/4b-typing-relation.watsup:88.1-90.23
relation Decl_ok: `%%|-%:%%`(cursor, context, decl, context, declIL)

   ;; ../../../../spec/4g-typing-decl.watsup:50.1-61.52
   rule constd: `%%|-%:%%`(p, C, decl, C', `ConstD%%%`_declIL(id, typ_c, val))
      -- if decl matches `ConstD%%%`
      -- let `ConstD%%%`_decl(id, type, expr) = decl
      -- Type_ok: `%%|-%:%%`(p, C, type, typ_c, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(p, C), typ_c) holds
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_c)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}
      -- Eval_static: `%%|-%~>%`(p, C, exprIL', val)
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ_c, `NO`_dir(), `LCTK`_ctk(), ?(val)))

   ;; ../../../../spec/4g-typing-decl.watsup:67.1-72.52
   rule vard-none: `%%|-%:%%`(p, C, decl, C', `VarD%%%`_declIL(id, typ, ?()))
      -- if decl matches `VarD%%%`
      -- let `VarD%%%`_decl(id, type, expr?{expr <- expr?}) = decl
      -- if expr?{expr <- expr?} matches ()
      -- Type_ok: `%%|-%:%%`(p, C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(p, C), typ) holds
      -- if $is_assignable(typ)
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ, `INOUT`_dir(), `DYN`_ctk(), ?()))

   ;; ../../../../spec/4g-typing-decl.watsup:74.1-83.52
   rule vard-some: `%%|-%:%%`(p, C, decl, C', `VarD%%%`_declIL(id, typ, ?(exprIL')))
      -- if decl matches `VarD%%%`
      -- let `VarD%%%`_decl(id, type, expr'?{expr' <- expr'?}) = decl
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- Type_ok: `%%|-%:%%`(p, C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(p, C), typ) holds
      -- if $is_assignable(typ)
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ, `INOUT`_dir(), `DYN`_ctk(), ?()))

   ;; ../../../../spec/4g-typing-decl.watsup:161.1-192.51
   rule instd-some: `%%|-%:%%`(p, C, decl', C'', `InstD%%%%%%`_declIL(id, typ, name_inst, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, declIL*{declIL <- declIL*}))
      -- if decl' matches `InstD%%%%%`
      -- let `InstD%%%%%`_decl(id, name_inst, targ*{targ <- targ*}, arg*{arg <- arg*}, decl*{decl <- decl*}) = decl'
      -- if (|decl*{decl <- decl*}| > 0)
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- ConsType_ok: `%%|-%%%:%%%`(p, C, name_inst, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ct, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- Inst_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, ct, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- let typ''' = typ
      -- if typ''' <: abstyp
      -- let abstyp = typ''' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(`PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ''), typ_a*{typ_a <- typ_a*}) = abstyp
      -- if typ'' <: objtyp
      -- let objtyp = typ'' as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id_ext, fdenv_ext) = objtyp
      -- let C' = $add_styp(`LOCAL`_cursor(), C, "this", `%%%%`_styp(typ, `NO`_dir(), `CTK`_ctk(), ?()))
      -- Inst_init_decls_ok: `%%%|-%:%%%`(C', $empty_frame, $empty_fdenv, decl*{decl <- decl*}, frame_abs, fdenv_abs, declIL*{declIL <- declIL*})
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid_abs, fd_abs)*{fd_abs <- fd_abs*, fid_abs <- fid_abs*}) = fdenv_abs
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- let theta = `{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam', typ_a)*{tparam' <- tparam'*, typ_a <- typ_a*})
      -- let fdenv_ext' = $update_fdenv_extern(fdenv_ext, theta, fid_abs*{fid_abs <- fid_abs*}, fd_abs*{fd_abs <- fd_abs*})
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid_ext, fd_ext)*{fd_ext <- fd_ext*, fid_ext <- fid_ext*}) = fdenv_ext'
      -- let funcdef*{funcdef <- funcdef*} = fd_ext*{fd_ext <- fd_ext*}
      -- (if funcdef <: polyfuncdef)*{funcdef <- funcdef*}
      -- (let `PolyFD%->%`_polyfuncdef(_(tparam*, tparam*), ft) = funcdef as polyfuncdef)*{_(tparam*, tparam*) <- _(tparam*, tparam*)*, ft <- ft*, funcdef <- funcdef*}
      -- (if ~$is_externabstractmethodt(ft))*{ft <- ft*}
      -- let typ' = `SpecT%%`_abstyp(`PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ExternT%%`_objtyp(id_ext, fdenv_ext') as typ), typ_a*{typ_a <- typ_a*}) as typ
      -- let C'' = $add_styp(p, C, id, `%%%%`_styp(typ', `NO`_dir(), `CTK`_ctk(), ?()))

   ;; ../../../../spec/4g-typing-decl.watsup:194.1-208.49
   rule instd-none: `%%|-%:%%`(p, C, decl', C', `InstD%%%%%%`_declIL(id, typ, name_inst, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*}, []))
      -- if decl' matches `InstD%%%%%`
      -- let `InstD%%%%%`_decl(id, name_inst, targ*{targ <- targ*}, arg*{arg <- arg*}, decl*{decl <- decl*}) = decl'
      -- if decl*{decl <- decl*} matches []
      -- (Type_ok: `%%|-%:%%`(p, C, targ, targIL, tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}))*{targ <- targ*, targIL <- targIL*, tid_fresh_a* <- tid_fresh_a**}
      -- let tid_fresh*{tid_fresh <- tid_fresh*} = $concat_<tid>(tid_fresh_a*{tid_fresh_a <- tid_fresh_a*}*{tid_fresh_a* <- tid_fresh_a**})
      -- ConsType_ok: `%%|-%%%:%%%`(p, C, name_inst, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ct, tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, id_deft*{id_deft <- id_deft*})
      -- Inst_ok: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*} ++ tid_fresh_inserted*{tid_fresh_inserted <- tid_fresh_inserted*}, ct, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ, targIL'*{targIL' <- targIL'*}, argIL'*{argIL' <- argIL'*})
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(typ, `NO`_dir(), `CTK`_ctk(), ?()))

   ;; ../../../../spec/4g-typing-decl.watsup:214.1-223.51
   rule errd: `%%|-%:%%`(cursor, C, decl, C', `ErrD%`_declIL(member*{member <- member*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `ErrD%`
      -- let `ErrD%`_decl(member*{member <- member*}) = decl
      -- if $distinct_<member>(member*{member <- member*})
      -- (let id_e = $concat_text(["error.", member]))*{id_e <- id_e*, member <- member*}
      -- (let val_e = `ErrV%`_val(member))*{member <- member*, val_e <- val_e*}
      -- (let styp_e = `%%%%`_styp(`ErrT`_primtyp() as typ, `NO`_dir(), `LCTK`_ctk(), ?(val_e)))*{styp_e <- styp_e*, val_e <- val_e*}
      -- let C' = $add_styps(`GLOBAL`_cursor(), C, id_e*{id_e <- id_e*}, styp_e*{styp_e <- styp_e*})

   ;; ../../../../spec/4g-typing-decl.watsup:229.1-238.51
   rule matchkindd: `%%|-%:%%`(cursor, C, decl, C', `MatchKindD%`_declIL(member*{member <- member*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `MatchKindD%`
      -- let `MatchKindD%`_decl(member*{member <- member*}) = decl
      -- if $distinct_<member>(member*{member <- member*})
      -- (let id_m = member)*{id_m <- id_m*, member <- member*}
      -- (let val_m = `MatchKindV%`_val(member))*{member <- member*, val_m <- val_m*}
      -- (let styp_m = `%%%%`_styp(`MatchKindT`_primtyp() as typ, `NO`_dir(), `LCTK`_ctk(), ?(val_m)))*{styp_m <- styp_m*, val_m <- val_m*}
      -- let C' = $add_styps(`GLOBAL`_cursor(), C, id_m*{id_m <- id_m*}, styp_m*{styp_m <- styp_m*})

   ;; ../../../../spec/4g-typing-decl.watsup:244.1-256.45
   rule structd: `%%|-%:%%`(cursor, C, decl, C'', `StructD%%%%`_declIL(id, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, (member_f, typ_f)*{member_f <- member_f*, typ_f <- typ_f*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `StructD%%%`
      -- let `StructD%%%`_decl(id, tparam*{tparam <- tparam*}, (member_f, type_f)*{member_f <- member_f*, type_f <- type_f*}) = decl
      -- let C' = $add_tparams(`BLOCK`_cursor(), C, tparam*{tparam <- tparam*})
      -- (Type_ok: `%%|-%:%%`(`BLOCK`_cursor(), C', type_f, typ_f, tid_fresh_f*{tid_fresh_f <- tid_fresh_f*}))*{tid_fresh_f* <- tid_fresh_f**, typ_f <- typ_f*, type_f <- type_f*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_f*{tid_fresh_f <- tid_fresh_f*}*{tid_fresh_f* <- tid_fresh_f**})
      -- let typ_s = `StructT%%`_datatyp(id, (member_f, typ_f)*{member_f <- member_f*, typ_f <- typ_f*}) as typ
      -- let td = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ_s) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:262.1-274.45
   rule headerd: `%%|-%:%%`(cursor, C, decl, C'', `HeaderD%%%%`_declIL(id, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, (member_f, typ_f)*{member_f <- member_f*, typ_f <- typ_f*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `HeaderD%%%`
      -- let `HeaderD%%%`_decl(id, tparam*{tparam <- tparam*}, (member_f, type_f)*{member_f <- member_f*, type_f <- type_f*}) = decl
      -- let C' = $add_tparams(`BLOCK`_cursor(), C, tparam*{tparam <- tparam*})
      -- (Type_ok: `%%|-%:%%`(`BLOCK`_cursor(), C', type_f, typ_f, tid_fresh_f*{tid_fresh_f <- tid_fresh_f*}))*{tid_fresh_f* <- tid_fresh_f**, typ_f <- typ_f*, type_f <- type_f*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_f*{tid_fresh_f <- tid_fresh_f*}*{tid_fresh_f* <- tid_fresh_f**})
      -- let typ_s = `HeaderT%%`_datatyp(id, (member_f, typ_f)*{member_f <- member_f*, typ_f <- typ_f*}) as typ
      -- let td = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ_s) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:280.1-292.45
   rule uniond: `%%|-%:%%`(cursor, C, decl, C'', `UnionD%%%%`_declIL(id, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, (member_f, typ_f)*{member_f <- member_f*, typ_f <- typ_f*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `UnionD%%%`
      -- let `UnionD%%%`_decl(id, tparam*{tparam <- tparam*}, (member_f, type_f)*{member_f <- member_f*, type_f <- type_f*}) = decl
      -- let C' = $add_tparams(`BLOCK`_cursor(), C, tparam*{tparam <- tparam*})
      -- (Type_ok: `%%|-%:%%`(`BLOCK`_cursor(), C', type_f, typ_f, tid_fresh_f*{tid_fresh_f <- tid_fresh_f*}))*{tid_fresh_f* <- tid_fresh_f**, typ_f <- typ_f*, type_f <- type_f*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_f*{tid_fresh_f <- tid_fresh_f*}*{tid_fresh_f* <- tid_fresh_f**})
      -- let typ_s = `UnionT%%`_datatyp(id, (member_f, typ_f)*{member_f <- member_f*, typ_f <- typ_f*}) as typ
      -- let td = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), typ_s) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:298.1-313.46
   rule enumd: `%%|-%:%%`(cursor, C, decl, C'', `EnumD%%`_declIL(id, member*{member <- member*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `EnumD%%`
      -- let `EnumD%%`_decl(id, member*{member <- member*}) = decl
      -- if $distinct_<member>(member*{member <- member*})
      -- (let id_e = $concat_text([id, ".", member]))*{id_e <- id_e*, member <- member*}
      -- (let val_e = `EnumFieldV%%`_val(id, member))*{member <- member*, val_e <- val_e*}
      -- let typ_e = `EnumT%%`_datatyp(id, member*{member <- member*}) as typ
      -- (let styp_e = `%%%%`_styp(typ_e, `NO`_dir(), `LCTK`_ctk(), ?(val_e)))*{styp_e <- styp_e*, val_e <- val_e*}
      -- let C' = $add_styps(`GLOBAL`_cursor(), C, id_e*{id_e <- id_e*}, styp_e*{styp_e <- styp_e*})
      -- let td = `MonoD%`_monotypdef(typ_e) as typdef
      -- let tidset = $bound_tids(`GLOBAL`_cursor(), C)
      -- if TypeDef_wf: `%|-%`(tidset, td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C', id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:360.1-380.47
   rule senumd: `%%|-%:%%`(cursor, C_0, decl, C_3, `SEnumD%%%`_declIL(id, typ, (member, val_s)*{member <- member*, val_s <- val_s*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `SEnumD%%%`
      -- let `SEnumD%%%`_decl(id, type, (member, expr)*{expr <- expr*, member <- member*}) = decl
      -- if $distinct_<member>(member*{member <- member*})
      -- Type_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C_0, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), typ) holds
      -- SEnum_fields_ok: `%%%%|-%:%%`(C_0, id, typ, [], (member, expr)*{expr <- expr*, member <- member*}, C_1, (member', val_s)*{member' <- member'*, val_s <- val_s*})
      -- (if (member' = member))*{member <- member*, member' <- member'*}
      -- (let id_s = $concat_text([id, ".", member]))*{id_s <- id_s*, member <- member*}
      -- let typ_s = `SEnumT%%%`_datatyp(id, typ, (member, val_s)*{member <- member*, val_s <- val_s*}) as typ
      -- (let styp_s = `%%%%`_styp(typ_s, `NO`_dir(), `LCTK`_ctk(), ?(val_s)))*{styp_s <- styp_s*, val_s <- val_s*}
      -- let C_2 = $add_styps(`GLOBAL`_cursor(), C_1, id_s*{id_s <- id_s*}, styp_s*{styp_s <- styp_s*})
      -- let td = `MonoD%`_monotypdef(typ_s) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), td) holds
      -- let C_3 = $add_typdef(`GLOBAL`_cursor(), C_0, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:386.1-395.44
   rule newtyped-type: `%%|-%:%%`(cursor, C, decl, C', `NewTypeD%%`_declIL(id, `TypeD%`_typedefIL(typ)))
      -- if cursor matches `GLOBAL`
      -- if decl matches `NewTypeD%%`
      -- let `NewTypeD%%`_decl(id, typedef) = decl
      -- if typedef matches `TypeD%`
      -- let `TypeD%`_typedef(type) = typedef
      -- Type_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), typ) holds
      -- let typ_n = `NewT%%`_datatyp(id, typ) as typ
      -- let td = `MonoD%`_monotypdef(typ_n) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:397.1-408.45
   rule newtyped-decl-mono: `%%|-%:%%`(cursor, C, decl', C'', `NewTypeD%%`_declIL(id, `DeclD%`_typedefIL(declIL)))
      -- if cursor matches `GLOBAL`
      -- if decl' matches `NewTypeD%%`
      -- let `NewTypeD%%`_decl(id, typedef) = decl'
      -- if typedef matches `DeclD%`
      -- let `DeclD%`_typedef(decl) = typedef
      -- Decl_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, decl, C', declIL)
      -- let `{%}`_set<tid>(tid*{tid <- tid*}) = $diff_set<tid>($dom_map<tid, typdef>(C'.GLOBAL.TDENV), $dom_map<tid, typdef>(C.GLOBAL.TDENV))
      -- if tid*{tid <- tid*} matches [ _/1 ]
      -- let [tid_n] = tid*{tid <- tid*}
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(`GLOBAL`_cursor(), C', `CURRENT%`_name(tid_n))
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ_n) = typdef as monotypdef
      -- let td = `MonoD%`_monotypdef(`NewT%%`_datatyp(id, typ_n) as typ) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:410.1-421.45
   rule newtyped-decl-poly: `%%|-%:%%`(cursor, C, decl', C'', `NewTypeD%%`_declIL(id, `DeclD%`_typedefIL(declIL)))
      -- if cursor matches `GLOBAL`
      -- if decl' matches `NewTypeD%%`
      -- let `NewTypeD%%`_decl(id, typedef) = decl'
      -- if typedef matches `DeclD%`
      -- let `DeclD%`_typedef(decl) = typedef
      -- Decl_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, decl, C', declIL)
      -- let `{%}`_set<tid>(tid*{tid <- tid*}) = $diff_set<tid>($dom_map<tid, typdef>(C'.GLOBAL.TDENV), $dom_map<tid, typdef>(C.GLOBAL.TDENV))
      -- if tid*{tid <- tid*} matches [ _/1 ]
      -- let [tid_n] = tid*{tid <- tid*}
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(`GLOBAL`_cursor(), C', `CURRENT%`_name(tid_n))
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: polytypdef
      -- let ptd = typdef as polytypdef
      -- let td = `MonoD%`_monotypdef(`NewT%%`_datatyp(id, `SpecT%%`_abstyp(ptd, []) as typ) as typ) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:427.1-439.44
   rule typedefd-non-extern-package: `%%|-%:%%`(cursor, C, decl, C', `TypeDefD%%`_declIL(id, `TypeD%`_typedefIL(typ)))
      -- if cursor matches `GLOBAL`
      -- if decl matches `TypeDefD%%`
      -- let `TypeDefD%%`_decl(id, typedef) = decl
      -- if typedef matches `TypeD%`
      -- let `TypeD%`_typedef(type) = typedef
      -- Type_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), typ) holds
      -- let typ_d = `DefT%%`_aliastyp(id, typ) as typ
      -- if ~($is_externt($canon_typ(typ)) \/ $is_packaget(typ))
      -- let td = `MonoD%`_monotypdef(typ_d) as typdef
      -- let tidset = $bound_tids(`GLOBAL`_cursor(), C)
      -- if TypeDef_wf: `%|-%`(tidset, td) holds
      -- let C' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:441.1-465.63
   rule typedefd-extern: `%%|-%:%%`(cursor, C, decl, C'', `TypeDefD%%`_declIL(id, `TypeD%`_typedefIL(typ)))
      -- if cursor matches `GLOBAL`
      -- if decl matches `TypeDefD%%`
      -- let `TypeDefD%%`_decl(id, typedef) = decl
      -- if typedef matches `TypeD%`
      -- let `TypeD%`_typedef(type) = typedef
      -- Type_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), typ) holds
      -- let typ_d = `DefT%%`_aliastyp(id, typ) as typ
      -- let typ' = $canon_typ(typ)
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id_alias, _map<fid, funcdef>) = objtyp
      -- let typ'' = typ
      -- if typ'' <: abstyp
      -- let abstyp = typ'' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(_polytypdef, typ_a*{typ_a <- typ_a*}) = abstyp
      -- let td = `MonoD%`_monotypdef(typ_d) as typdef
      -- let tidset = $bound_tids(`GLOBAL`_cursor(), C)
      -- if TypeDef_wf: `%|-%`(tidset, td) holds
      -- let C' = $add_typdef(`GLOBAL`_cursor(), C, id, td)
      -- let (cid, cd)*{cd <- cd*, cid <- cid*} = $find_consdefs_by_name(C, `CURRENT%`_name(id_alias))
      -- (let `%%`_fid(_id, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = cid)*{_id <- _id*, bool_p* <- bool_p**, cid <- cid*, id_p* <- id_p**}
      -- (let cid_alias = `%%`_fid(id, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}))*{bool_p* <- bool_p**, cid_alias <- cid_alias*, id_p* <- id_p**}
      -- (let `ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam'*{tparam' <- tparam'*}), `ConsT%%`_constyp(pt*{pt <- pt*}, _typ)) = cd)*{_typ <- _typ*, cd <- cd*, pt* <- pt**, tparam* <- tparam**, tparam'* <- tparam'**}
      -- (if tparam'*{tparam' <- tparam'*} matches [])*{tparam'* <- tparam'**}
      -- (let theta = `{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam, typ_a)*{tparam <- tparam*, typ_a <- typ_a*}))*{theta <- theta*, tparam* <- tparam**}
      -- (let `%%%%`_paramtyp(id_c_p, dir_c_p, typ_c_p, exprIL?{exprIL <- exprIL?}) = pt)*{dir_c_p <- dir_c_p*, exprIL? <- exprIL?*, id_c_p <- id_c_p*, pt <- pt*, typ_c_p <- typ_c_p*}*{dir_c_p* <- dir_c_p**, exprIL?* <- exprIL?**, id_c_p* <- id_c_p**, pt* <- pt**, typ_c_p* <- typ_c_p**}
      -- (let pt_subst = `%%%%`_paramtyp(id_c_p, dir_c_p, $subst_typ(theta, typ_c_p), exprIL?{exprIL <- exprIL?}))*{dir_c_p <- dir_c_p*, exprIL? <- exprIL?*, id_c_p <- id_c_p*, pt_subst <- pt_subst*, theta <- theta*, typ_c_p <- typ_c_p*}*{dir_c_p* <- dir_c_p**, exprIL?* <- exprIL?**, id_c_p* <- id_c_p**, pt_subst* <- pt_subst**, typ_c_p* <- typ_c_p**}
      -- (let cd_alias = `ConsD%->%`_consdef(([], []), `ConsT%%`_constyp(pt_subst*{pt_subst <- pt_subst*}, typ)))*{cd_alias <- cd_alias*, pt_subst* <- pt_subst**}
      -- let C'' = $add_consdefs(`GLOBAL`_cursor(), C', cid_alias*{cid_alias <- cid_alias*}, cd_alias*{cd_alias <- cd_alias*})

   ;; ../../../../spec/4g-typing-decl.watsup:467.1-493.63
   rule typedefd-package: `%%|-%:%%`(cursor, C, decl, C'', `TypeDefD%%`_declIL(id, `TypeD%`_typedefIL(typ)))
      -- if cursor matches `GLOBAL`
      -- if decl matches `TypeDefD%%`
      -- let `TypeDefD%%`_decl(id, typedef) = decl
      -- if typedef matches `TypeD%`
      -- let `TypeD%`_typedef(type) = typedef
      -- Type_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, type, typ, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), typ) holds
      -- let typ_d = `DefT%%`_aliastyp(id, typ) as typ
      -- let typ' = $canon_typ(typ)
      -- if typ' <: objtyp
      -- let objtyp = typ' as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(id_alias, _typ*{_typ <- _typ*}) = objtyp
      -- let typ'' = typ
      -- if typ'' <: abstyp
      -- let abstyp = typ'' as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(_polytypdef, typ_a*{typ_a <- typ_a*}) = abstyp
      -- let td = `MonoD%`_monotypdef(typ_d) as typdef
      -- let tidset = $bound_tids(`GLOBAL`_cursor(), C)
      -- if TypeDef_wf: `%|-%`(tidset, td) holds
      -- let C' = $add_typdef(`GLOBAL`_cursor(), C, id, td)
      -- let (cid, cd)*{cd <- cd*, cid <- cid*} = $find_consdefs_by_name(C, `CURRENT%`_name(id_alias))
      -- (let `%%`_fid(_id, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}) = cid)*{_id <- _id*, bool_p* <- bool_p**, cid <- cid*, id_p* <- id_p**}
      -- (let cid_alias = `%%`_fid(id_alias, (id_p, bool_p)*{bool_p <- bool_p*, id_p <- id_p*}))*{bool_p* <- bool_p**, cid_alias <- cid_alias*, id_p* <- id_p**}
      -- let C'' = $add_consdefs(`GLOBAL`_cursor(), C', cid_alias*{cid_alias <- cid_alias*}, cd*{cd <- cd*})
      -- (let `ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam'*{tparam' <- tparam'*}), `ConsT%%`_constyp(pt*{pt <- pt*}, _typ')) = cd)*{_typ' <- _typ'*, cd <- cd*, pt* <- pt**, tparam* <- tparam**, tparam'* <- tparam'**}
      -- (if tparam'*{tparam' <- tparam'*} matches [])*{tparam'* <- tparam'**}
      -- (let theta = `{%}`_set<pair<id, typ>>(`%->%`_pair<id, typ>(tparam, typ_a)*{tparam <- tparam*, typ_a <- typ_a*}))*{theta <- theta*, tparam* <- tparam**}
      -- (let `%%%%`_paramtyp(id_c_p, dir_c_p, typ_c_p, exprIL?{exprIL <- exprIL?}) = pt)*{dir_c_p <- dir_c_p*, exprIL? <- exprIL?*, id_c_p <- id_c_p*, pt <- pt*, typ_c_p <- typ_c_p*}*{dir_c_p* <- dir_c_p**, exprIL?* <- exprIL?**, id_c_p* <- id_c_p**, pt* <- pt**, typ_c_p* <- typ_c_p**}
      -- (let pt_subst = `%%%%`_paramtyp(id_c_p, dir_c_p, $subst_typ(theta, typ_c_p), exprIL?{exprIL <- exprIL?}))*{dir_c_p <- dir_c_p*, exprIL? <- exprIL?*, id_c_p <- id_c_p*, pt_subst <- pt_subst*, theta <- theta*, typ_c_p <- typ_c_p*}*{dir_c_p* <- dir_c_p**, exprIL?* <- exprIL?**, id_c_p* <- id_c_p**, pt_subst* <- pt_subst**, typ_c_p* <- typ_c_p**}
      -- (let cd_alias = `ConsD%->%`_consdef(([], []), `ConsT%%`_constyp(pt_subst*{pt_subst <- pt_subst*}, typ)))*{cd_alias <- cd_alias*, pt_subst* <- pt_subst**}
      -- if (C'' = $add_consdefs(`GLOBAL`_cursor(), C', cid_alias*{cid_alias <- cid_alias*}, cd_alias*{cd_alias <- cd_alias*}))

   ;; ../../../../spec/4g-typing-decl.watsup:495.1-506.45
   rule typedefd-decl-mono: `%%|-%:%%`(cursor, C, decl', C'', `TypeDefD%%`_declIL(id, `DeclD%`_typedefIL(declIL)))
      -- if cursor matches `GLOBAL`
      -- if decl' matches `TypeDefD%%`
      -- let `TypeDefD%%`_decl(id, typedef) = decl'
      -- if typedef matches `DeclD%`
      -- let `DeclD%`_typedef(decl) = typedef
      -- Decl_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, decl, C', declIL)
      -- let `{%}`_set<tid>(tid*{tid <- tid*}) = $diff_set<tid>($dom_map<tid, typdef>(C'.GLOBAL.TDENV), $dom_map<tid, typdef>(C.GLOBAL.TDENV))
      -- if tid*{tid <- tid*} matches [ _/1 ]
      -- let [tid_d] = tid*{tid <- tid*}
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(`GLOBAL`_cursor(), C', `CURRENT%`_name(tid_d))
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: monotypdef
      -- let `MonoD%`_monotypdef(typ_d) = typdef as monotypdef
      -- let td = `MonoD%`_monotypdef(`DefT%%`_aliastyp(id, typ_d) as typ) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:508.1-519.45
   rule typedefd-decl-poly: `%%|-%:%%`(cursor, C, decl', C'', `TypeDefD%%`_declIL(id, `DeclD%`_typedefIL(declIL)))
      -- if cursor matches `GLOBAL`
      -- if decl' matches `TypeDefD%%`
      -- let `TypeDefD%%`_decl(id, typedef) = decl'
      -- if typedef matches `DeclD%`
      -- let `DeclD%`_typedef(decl) = typedef
      -- Decl_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, decl, C', declIL)
      -- let `{%}`_set<tid>(tid*{tid <- tid*}) = $diff_set<tid>($dom_map<tid, typdef>(C'.GLOBAL.TDENV), $dom_map<tid, typdef>(C.GLOBAL.TDENV))
      -- if tid*{tid <- tid*} matches [ _/1 ]
      -- let [tid_d] = tid*{tid <- tid*}
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(`GLOBAL`_cursor(), C', `CURRENT%`_name(tid_d))
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: polytypdef
      -- let ptd = typdef as polytypdef
      -- let td = `MonoD%`_monotypdef(`DefT%%`_aliastyp(id, `SpecT%%`_abstyp(ptd, []) as typ) as typ) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C'' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:525.1-541.57
   rule actiond: `%%|-%:%%`(p, C_0, decl, C_4, `ActionD%%%`_declIL(id, paramIL*{paramIL <- paramIL*}, blockIL))
      -- if decl matches `ActionD%%%`
      -- let `ActionD%%%`_decl(id, param*{param <- param*}, block) = decl
      -- if ((p = `GLOBAL`_cursor()) \/ ((p = `BLOCK`_cursor()) /\ (C_0.BLOCK.KIND = `CONTROL`_bkind())))
      -- let fid = $to_fid(id, param*{param <- param*})
      -- let C_1 = $set_localkind(C_0, `ACTION`_lkind())
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, param, paramIL, tid*{tid <- tid*}))*{param <- param*, paramIL <- paramIL*, tid* <- tid**}
      -- (if tid*{tid <- tid*} matches [])*{tid* <- tid**}
      -- let C_2 = $add_params(`LOCAL`_cursor(), C_1, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- Block_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C_2, `CONT`_flow(), `INIT`_blkctxt(), block, _context, _flow, blockIL)
      -- let fd = `MonoFD%`_monofuncdef(`ActionT%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(p, C_0), fd) holds
      -- let C_4 = $add_funcdef_non_overload(p, C_0, fid, fd)

   ;; ../../../../spec/4g-typing-decl.watsup:547.1-567.49
   rule funcd: `%%|-%:%%`(cursor, C_0, decl, C_5, `FuncD%%%%%%`_declIL(id, typ_r, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}, blockIL))
      -- if cursor matches `GLOBAL`
      -- if decl matches `FuncD%%%%%`
      -- let `FuncD%%%%%`_decl(id, type_r, tparam*{tparam <- tparam*}, param*{param <- param*}, block) = decl
      -- let fid = $to_fid(id, param*{param <- param*})
      -- let C_1 = $add_typdefs(`LOCAL`_cursor(), C_0, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- Type_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, type_r, typ_r, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- let C_2 = $set_localkind(C_1, `FUNC%`_lkind(typ_r))
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let C_3 = $add_params(`LOCAL`_cursor(), C_2, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- Block_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C_3, `CONT`_flow(), `INIT`_blkctxt(), block, C_4, f, blockIL)
      -- if ((f = `RET`_flow()) \/ ((f = `CONT`_flow()) /\ (typ_r = `VoidT`_primtyp() as typ)))
      -- let fd = `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `FuncT%%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*, typ_r)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), fd) holds
      -- let C_5 = $add_funcdef(`GLOBAL`_cursor(), C_0, fid, fd)

   ;; ../../../../spec/4g-typing-decl.watsup:573.1-590.49
   rule externfuncd: `%%|-%:%%`(cursor, C_0, decl, C_4, `ExternFuncD%%%%%`_declIL(id, typ_r, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `ExternFuncD%%%%`
      -- let `ExternFuncD%%%%`_decl(id, type_r, tparam*{tparam <- tparam*}, param*{param <- param*}) = decl
      -- let fid = $to_fid(id, param*{param <- param*})
      -- let C_1 = $add_typdefs(`LOCAL`_cursor(), C_0, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- Type_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, type_r, typ_r, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- let C_2 = $set_localkind(C_1, `EXTERNFUNC`_lkind())
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let C_3 = $add_params(`LOCAL`_cursor(), C_2, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- let fd = `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ExternFuncT%%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*, typ_r)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), fd) holds
      -- let C_4 = $add_funcdef(`GLOBAL`_cursor(), C_0, fid, fd)

   ;; ../../../../spec/4g-typing-decl.watsup:695.1-714.52
   rule externobjectd: `%%|-%:%%`(cursor, C_0, decl, C_8, `ExternObjectD%%%`_declIL(id, tparam*{tparam <- tparam*}, methodIL_c*{methodIL_c <- methodIL_c*} ++ methodIL_m*{methodIL_m <- methodIL_m*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `ExternObjectD%%%`
      -- let `ExternObjectD%%%`_decl(id, tparam*{tparam <- tparam*}, method*{method <- method*}) = decl
      -- let (method_c*{method_c <- method_c*}, method_m*{method_m <- method_m*}) = $split_methods(method*{method <- method*})
      -- let C_1 = $set_blockkind(C_0, `EXTERN`_bkind())
      -- let C_2 = $add_typdefs(`BLOCK`_cursor(), C_1, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- Methods_ok: `%%|-%:%%`(C_2, id, method_m*{method_m <- method_m*}, C_3, methodIL_m*{methodIL_m <- methodIL_m*})
      -- let td = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, []), `ExternT%%`_objtyp(id, C_3.BLOCK.FDENV) as typ) as typdef
      -- let C_4 = $add_typdef(`GLOBAL`_cursor(), C_0, id, td)
      -- let C_5 = $set_blockkind(C_4, `EXTERN`_bkind())
      -- let C_6 = $add_typdefs(`BLOCK`_cursor(), C_5, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- Methods_ok: `%%|-%:%%`(C_6, id, method_c*{method_c <- method_c*}, C_7, methodIL_c*{methodIL_c <- methodIL_c*})
      -- let C_8 = C_4[GLOBAL.CDENV = C_7.GLOBAL.CDENV]

   ;; ../../../../spec/4g-typing-decl.watsup:720.1-732.58
   rule valuesetd: `%%|-%:%%`(p, C, decl, C', `ValueSetD%%%`_declIL(id, typ, exprIL))
      -- if decl matches `ValueSetD%%%`
      -- let `ValueSetD%%%`_decl(id, type, expr) = decl
      -- if ((p = `GLOBAL`_cursor()) \/ ((p = `BLOCK`_cursor()) /\ (C.BLOCK.KIND = `PARSER`_bkind())))
      -- Type_ok: `%%|-%:%%`(p, C, type, typ_s, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- if Type_wf: `%|-%`($bound_tids(p, C), `SetT%`_synthtyp(typ_s) as typ) holds
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL)
      -- if ((ctk = `CTK`_ctk()) \/ (ctk = `LCTK`_ctk()))
      -- let C' = $add_styp(p, C, id, `%%%%`_styp(`SetT%`_synthtyp(typ_s) as typ, `NO`_dir(), `CTK`_ctk(), ?()))

   ;; ../../../../spec/4g-typing-decl.watsup:738.1-752.47
   rule parsertyped: `%%|-%:%%`(cursor, C_0, decl, C_3, `ParserTypeD%%%%`_declIL(id, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `ParserTypeD%%%`
      -- let `ParserTypeD%%%`_decl(id, tparam*{tparam <- tparam*}, param*{param <- param*}) = decl
      -- let C_1 = $set_blockkind(C_0, `PARSER`_bkind())
      -- let C_2 = $add_typdefs(`BLOCK`_cursor(), C_1, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- (let `%%%%`_paramIL(id_p, dir_p, typ_p, exprIL_p?{exprIL_p <- exprIL_p?}) = paramIL)*{dir_p <- dir_p*, exprIL_p? <- exprIL_p?*, id_p <- id_p*, paramIL <- paramIL*, typ_p <- typ_p*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let td = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ParserT%%`_objtyp(id, `%%%%`_paramtyp(id_p, dir_p, typ_p, exprIL_p?{exprIL_p <- exprIL_p?})*{dir_p <- dir_p*, exprIL_p? <- exprIL_p?*, id_p <- id_p*, typ_p <- typ_p*}) as typ) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), td) holds
      -- let C_3 = $add_typdef(`GLOBAL`_cursor(), C_0, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:767.1-807.49
   rule parserd: `%%|-%:%%`(cursor, C_0, decl', C_8, `ParserD%%%%%`_declIL(id, paramIL*{paramIL <- paramIL*}, cparamIL*{cparamIL <- cparamIL*}, declIL*{declIL <- declIL*}, parserstateIL*{parserstateIL <- parserstateIL*}))
      -- if cursor matches `GLOBAL`
      -- if decl' matches `ParserD%%%%%`
      -- let `ParserD%%%%%`_decl(id, param*{param <- param*}, cparam*{cparam <- cparam*}, decl*{decl <- decl*}, parserstate*{parserstate <- parserstate*}) = decl'
      -- let cid = $to_fid(id, cparam*{cparam <- cparam*})
      -- let C_1 = $set_blockkind(C_0, `PARSER`_bkind())
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, cparam, cparamIL, tid*{tid <- tid*}))*{cparam <- cparam*, cparamIL <- cparamIL*, tid* <- tid**}
      -- (if tid*{tid <- tid*} matches [])*{tid* <- tid**}
      -- let C_2 = $add_params(`BLOCK`_cursor(), C_1, cparamIL*{cparamIL <- cparamIL*} as paramtyp*)
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid'*{tid' <- tid'*}))*{param <- param*, paramIL <- paramIL*, tid'* <- tid'**}
      -- (if tid'*{tid' <- tid'*} matches [])*{tid'* <- tid'**}
      -- let funcdef_apply = `MonoFD%`_monofuncdef(`ParserApplyMethodT%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), funcdef_apply) holds
      -- let C_3 = $add_params(`BLOCK`_cursor(), C_2, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- Decls_ok: `%%|-%:%%`(`BLOCK`_cursor(), C_3, decl*{decl <- decl*}, C_4, declIL*{declIL <- declIL*})
      -- (let `%%`_parserstate(statelabel, block) = parserstate)*{block <- block*, parserstate <- parserstate*, statelabel <- statelabel*}
      -- if $distinct_<statelabel>(statelabel*{statelabel <- statelabel*})
      -- if "start" <- statelabel*{statelabel <- statelabel*}
      -- if ~"accept" <- statelabel*{statelabel <- statelabel*}
      -- if ~"reject " <- statelabel*{statelabel <- statelabel*}
      -- let statelabel'*{statelabel' <- statelabel'*} = "accept" :: "reject" :: statelabel*{statelabel <- statelabel*}
      -- let C_5 = $set_localkind(C_4, `PARSERSTATE`_lkind())
      -- let styp*{styp <- styp*} = $repeat_<styp>(`%%%%`_styp(`StateT`_synthtyp() as typ, `NO`_dir(), `DYN`_ctk(), ?()), |statelabel'*{statelabel' <- statelabel'*}|)
      -- let C_6 = $add_styps(`BLOCK`_cursor(), C_5, statelabel'*{statelabel' <- statelabel'*}, styp*{styp <- styp*})
      -- (ParserState_ok: `%|-%:%`(C_6, parserstate, parserstateIL))*{parserstate <- parserstate*, parserstateIL <- parserstateIL*}
      -- let ptd = `PolyD%->%`_polytypdef(([], []), `ParserT%%`_objtyp(id, paramIL*{paramIL <- paramIL*} as paramtyp*) as typ)
      -- let typ = `SpecT%%`_abstyp(ptd, []) as typ
      -- let cd = `ConsD%->%`_consdef(([], []), `ConsT%%`_constyp(cparamIL*{cparamIL <- cparamIL*} as paramtyp*, typ))
      -- if ConsDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), cd) holds
      -- let C_8 = $add_consdef(`GLOBAL`_cursor(), C_0, cid, cd)

   ;; ../../../../spec/4g-typing-decl.watsup:1424.1-1440.56
   rule tabled: `%%|-%:%%`(cursor, C_0, decl, C_3, `TableD%%%`_declIL(id, typ, tblIL))
      -- if cursor matches `BLOCK`
      -- if decl matches `TableD%%`
      -- let `TableD%%`_decl(id, tbl) = decl
      -- if (C_0.BLOCK.KIND = `CONTROL`_bkind())
      -- if (|$keys_of_table(tbl)| <= 1)
      -- if (|$actions_of_table(tbl)| = 1)
      -- let C_1 = $set_localkind(C_0, `TABLEAPPLYMETHOD`_lkind())
      -- Table_props_ok: `%%%|-%:%%`(`LOCAL`_cursor(), C_1, $empty_tblctx, tbl, tblctx', tblIL)
      -- Table_type_decl_ok: `%%%|-%:%%`(`BLOCK`_cursor(), C_1, tblctx', id, C_2, typ_tbl)
      -- let typ = `TableT%%`_objtyp(id, typ_tbl) as typ
      -- if Type_wf: `%|-%`($bound_tids(`BLOCK`_cursor(), C_2), typ) holds
      -- let C_3 = $add_styp(`BLOCK`_cursor(), C_2, id, `%%%%`_styp(typ, `NO`_dir(), `DYN`_ctk(), ?()))

   ;; ../../../../spec/4g-typing-decl.watsup:1446.1-1460.46
   rule controltyped: `%%|-%:%%`(cursor, C, decl, C''', `ControlTypeD%%%%`_declIL(id, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `ControlTypeD%%%`
      -- let `ControlTypeD%%%`_decl(id, tparam*{tparam <- tparam*}, param*{param <- param*}) = decl
      -- let C' = $add_typdefs(`BLOCK`_cursor(), C, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- let C'' = $set_blockkind(C, `CONTROL`_bkind())
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C', param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- (let `%%%%`_paramIL(id_p, dir_p, typ_p, exprIL_p?{exprIL_p <- exprIL_p?}) = paramIL)*{dir_p <- dir_p*, exprIL_p? <- exprIL_p?*, id_p <- id_p*, paramIL <- paramIL*, typ_p <- typ_p*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let td = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ControlT%%`_objtyp(id, `%%%%`_paramtyp(id_p, dir_p, typ_p, exprIL_p?{exprIL_p <- exprIL_p?})*{dir_p <- dir_p*, exprIL_p? <- exprIL_p?*, id_p <- id_p*, typ_p <- typ_p*}) as typ) as typdef
      -- if TypeDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C), td) holds
      -- let C''' = $add_typdef(`GLOBAL`_cursor(), C, id, td)

   ;; ../../../../spec/4g-typing-decl.watsup:1466.1-1495.49
   rule controld: `%%|-%:%%`(cursor, C_0, decl', C_7, `ControlD%%%%%`_declIL(id, paramIL*{paramIL <- paramIL*}, cparamIL*{cparamIL <- cparamIL*}, declIL*{declIL <- declIL*}, blockIL))
      -- if cursor matches `GLOBAL`
      -- if decl' matches `ControlD%%%%%`
      -- let `ControlD%%%%%`_decl(id, param*{param <- param*}, cparam*{cparam <- cparam*}, decl*{decl <- decl*}, block) = decl'
      -- let cid = $to_fid(id, cparam*{cparam <- cparam*})
      -- let C_1 = $set_blockkind(C_0, `CONTROL`_bkind())
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, cparam, cparamIL, tid*{tid <- tid*}))*{cparam <- cparam*, cparamIL <- cparamIL*, tid* <- tid**}
      -- (if tid*{tid <- tid*} matches [])*{tid* <- tid**}
      -- let C_2 = $add_params(`BLOCK`_cursor(), C_1, cparamIL*{cparamIL <- cparamIL*} as paramtyp*)
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid'*{tid' <- tid'*}))*{param <- param*, paramIL <- paramIL*, tid'* <- tid'**}
      -- (if tid'*{tid' <- tid'*} matches [])*{tid'* <- tid'**}
      -- let funcdef_apply = `MonoFD%`_monofuncdef(`ControlApplyMethodT%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), funcdef_apply) holds
      -- let C_3 = $add_params(`BLOCK`_cursor(), C_2, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- Decls_ok: `%%|-%:%%`(`BLOCK`_cursor(), C_3, decl*{decl <- decl*}, C_4, declIL*{declIL <- declIL*})
      -- let C_5 = $set_localkind(C_4, `CONTROLAPPLYMETHOD`_lkind())
      -- Block_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C_5, `CONT`_flow(), `INIT`_blkctxt(), block, C_6, f, blockIL)
      -- let ptd = `PolyD%->%`_polytypdef(([], []), `ControlT%%`_objtyp(id, paramIL*{paramIL <- paramIL*} as paramtyp*) as typ)
      -- let typ = `SpecT%%`_abstyp(ptd, []) as typ
      -- let cd = `ConsD%->%`_consdef(([], []), `ConsT%%`_constyp(cparamIL*{cparamIL <- cparamIL*} as paramtyp*, typ))
      -- if ConsDef_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), cd) holds
      -- let C_7 = $add_consdef(`GLOBAL`_cursor(), C_0, cid, cd)

   ;; ../../../../spec/4g-typing-decl.watsup:1501.1-1524.49
   rule packagetyped: `%%|-%:%%`(cursor, C_0, decl, C_4, `PackageTypeD%%%%`_declIL(id, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, cparamIL*{cparamIL <- cparamIL*}))
      -- if cursor matches `GLOBAL`
      -- if decl matches `PackageTypeD%%%`
      -- let `PackageTypeD%%%`_decl(id, tparam*{tparam <- tparam*}, cparam*{cparam <- cparam*}) = decl
      -- let cid = $to_fid(id, cparam*{cparam <- cparam*})
      -- let C_1 = $add_typdefs(`BLOCK`_cursor(), C_0, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- let C_2 = $set_blockkind(C_1, `PACKAGE`_bkind())
      -- (CParam_ok: `%%|-%:%%`(`BLOCK`_cursor(), C_2, cparam, cparamIL, tid_fresh_c*{tid_fresh_c <- tid_fresh_c*}))*{cparam <- cparam*, cparamIL <- cparamIL*, tid_fresh_c* <- tid_fresh_c**}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_c*{tid_fresh_c <- tid_fresh_c*}*{tid_fresh_c* <- tid_fresh_c**})
      -- (let `%%%%`_paramIL(_idIL, _dirIL, typ_c, _exprIL?{_exprIL <- _exprIL?}) = cparamIL)*{_dirIL <- _dirIL*, _exprIL? <- _exprIL?*, _idIL <- _idIL*, cparamIL <- cparamIL*, typ_c <- typ_c*}
      -- let ptd = `PolyD%->%`_polytypdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `PackageT%%`_objtyp(id, typ_c*{typ_c <- typ_c*}) as typ)
      -- if TypeDef_wf: `%|-%`($bound_tids(`BLOCK`_cursor(), C_2), ptd as typdef) holds
      -- let tparam'*{tparam' <- tparam'*} = tparam*{tparam <- tparam*} ++ tparam_hidden*{tparam_hidden <- tparam_hidden*}
      -- let typ = `SpecT%%`_abstyp(ptd, `VarT%`_abstyp(tparam') as typ*{tparam' <- tparam'*}) as typ
      -- let cd = `ConsD%->%`_consdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ConsT%%`_constyp(cparamIL*{cparamIL <- cparamIL*} as paramtyp*, typ))
      -- if ConsDef_wf: `%|-%`($bound_tids(`BLOCK`_cursor(), C_2), cd) holds
      -- let C_3 = $add_typdef(`GLOBAL`_cursor(), C_0, id, ptd as typdef)
      -- let C_4 = $add_consdef(`GLOBAL`_cursor(), C_3, cid, cd)

;; ../../../../spec/4b-typing-relation.watsup:91.1-93.23
relation Decls_ok: `%%|-%:%%`(cursor, context, decl*, context, declIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:1530.1-1531.21
   rule nil: `%%|-%:%%`(p, C, decl*{decl <- decl*}, C, [])
      -- if decl*{decl <- decl*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:1533.1-1536.47
   rule cons: `%%|-%:%%`(p, C, decl*{decl <- decl*}, C'', declIL_h :: declIL_t*{declIL_t <- declIL_t*})
      -- if decl*{decl <- decl*} matches _ :: _
      -- let decl_h :: decl_t*{decl_t <- decl_t*} = decl*{decl <- decl*}
      -- Decl_ok: `%%|-%:%%`(p, C, decl_h, C', declIL_h)
      -- Decls_ok: `%%|-%:%%`(p, C', decl_t*{decl_t <- decl_t*}, C'', declIL_t*{declIL_t <- declIL_t*})

;; ../../../../spec/4b-typing-relation.watsup:97.1-99.17
relation Prog_ok: `|-%:%%`(program, context, programIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1542.1-1545.46
   rule : `|-%:%%`(decl*{decl <- decl*}, C', declIL*{declIL <- declIL*})
      -- let C = $empty_context
      -- Decls_ok: `%%|-%:%%`(`GLOBAL`_cursor(), C, decl*{decl <- decl*}, C', declIL*{declIL <- declIL*})

;; ../../../../spec/4b-typing-relation.watsup:103.18-103.29
syntax actctxt = 
   | `ACT`()
   | `NOACT`()

;; ../../../../spec/4b-typing-relation.watsup:104.1-106.29
relation Call_convention_ok: `%%%|-%~~%:%`(cursor, context, actctxt, paramtyp, (exprIL, typ), exprIL)

   ;; ../../../../spec/4h-typing-call.watsup:5.1-7.48
   rule in: `%%%|-%~~%:%`(p, C, actctxt, `%%%%`_paramtyp(id, dir, typ_p, exprIL_deft?{exprIL_deft <- exprIL_deft?}), (exprIL, typ_a), exprIL')
      -- if dir matches `IN`
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_p)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}

   ;; ../../../../spec/4h-typing-call.watsup:9.1-13.28
   rule out-inout: `%%%|-%~~%:%`(p, C, actctxt, `%%%%`_paramtyp(id, dir, typ_p, exprIL_deft?{exprIL_deft <- exprIL_deft?}), (exprIL, typ_a), exprIL)
      -- if ((dir = `OUT`_dir()) \/ (dir = `INOUT`_dir()))
      -- if Type_alpha: `%~~%`(typ_a, typ_p) holds
      -- if Lval_ok: `%%|-%`(p, C, exprIL) holds

   ;; ../../../../spec/4h-typing-call.watsup:15.1-17.48
   rule no-action: `%%%|-%~~%:%`(p, C, actctxt, `%%%%`_paramtyp(id, dir, typ_p, exprIL_deft?{exprIL_deft <- exprIL_deft?}), (exprIL, typ_a), exprIL')
      -- if actctxt matches `ACT`
      -- if dir matches `NO`
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_p)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}

   ;; ../../../../spec/4h-typing-call.watsup:19.1-23.48
   rule no-not-action: `%%%|-%~~%:%`(p, C, actctxt, `%%%%`_paramtyp(id, dir, typ_p, exprIL_deft?{exprIL_deft <- exprIL_deft?}), (exprIL, typ_a), exprIL')
      -- if actctxt matches `NOACT`
      -- if dir matches `NO`
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ((ctk = `LCTK`_ctk()) \/ (ctk = `CTK`_ctk()))
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_p)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}

;; ../../../../spec/4b-typing-relation.watsup:107.1-109.29
relation Call_convention_arg_ok: `%%%|-%~~%:%`(cursor, context, actctxt, paramtyp, (argIL, typ), argIL)

   ;; ../../../../spec/4h-typing-call.watsup:26.1-28.70
   rule expra: `%%%|-%~~%:%`(p, C, actctxt, pt, (argIL, typ), `ExprA%`_argIL(exprIL'))
      -- if argIL matches `ExprA%`
      -- let `ExprA%`_argIL(exprIL) = argIL
      -- Call_convention_ok: `%%%|-%~~%:%`(p, C, actctxt, pt, (exprIL, typ), exprIL')

   ;; ../../../../spec/4h-typing-call.watsup:30.1-32.70
   rule namea-some: `%%%|-%~~%:%`(p, C, actctxt, pt, (argIL, typ), `NameA%%`_argIL(id, ?(exprIL')))
      -- if argIL matches `NameA%%`
      -- let `NameA%%`_argIL(id, exprIL''?{exprIL'' <- exprIL''?}) = argIL
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL) = exprIL''?{exprIL'' <- exprIL''?}
      -- Call_convention_ok: `%%%|-%~~%:%`(p, C, actctxt, pt, (exprIL, typ), exprIL')

   ;; ../../../../spec/4h-typing-call.watsup:34.1-35.65
   rule namea-none: `%%%|-%~~%:%`(p, C, actctxt, `%%%%`_paramtyp(_id, dir, _typ, _exprIL?{_exprIL <- _exprIL?}), (argIL, _typ'), `NameA%%`_argIL(id, ?()))
      -- if dir matches `OUT`
      -- if argIL matches `NameA%%`
      -- let `NameA%%`_argIL(id, exprIL?{exprIL <- exprIL?}) = argIL
      -- if exprIL?{exprIL <- exprIL?} matches ()

   ;; ../../../../spec/4h-typing-call.watsup:37.1-38.49
   rule anya: `%%%|-%~~%:%`(p, C, actctxt, `%%%%`_paramtyp(_id, dir, _typ, _exprIL?{_exprIL <- _exprIL?}), (argIL, _typ'), `AnyA`_argIL())
      -- if dir matches `OUT`
      -- if argIL matches `AnyA`

;; ../../../../spec/4b-typing-relation.watsup:115.1-117.23
relation Call_site_ok: `%%|-%:CALLSITE_OK`(cursor, context, functyp)

   ;; ../../../../spec/4h-typing-call.watsup:349.1-351.56
   rule block-func: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `BLOCK`
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((C.BLOCK.KIND = `PARSER`_bkind()) \/ (C.BLOCK.KIND = `CONTROL`_bkind()))

   ;; ../../../../spec/4h-typing-call.watsup:353.1-355.56
   rule block-externfunc: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `BLOCK`
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((C.BLOCK.KIND = `PARSER`_bkind()) \/ (C.BLOCK.KIND = `CONTROL`_bkind()))

   ;; ../../../../spec/4h-typing-call.watsup:357.1-359.56
   rule block-builtinmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `BLOCK`
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((C.BLOCK.KIND = `PARSER`_bkind()) \/ (C.BLOCK.KIND = `CONTROL`_bkind()))

   ;; ../../../../spec/4h-typing-call.watsup:361.1-363.56
   rule block-externmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `BLOCK`
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((C.BLOCK.KIND = `PARSER`_bkind()) \/ (C.BLOCK.KIND = `CONTROL`_bkind()))

   ;; ../../../../spec/4h-typing-call.watsup:365.1-367.56
   rule block-externabstractmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `BLOCK`
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((C.BLOCK.KIND = `PARSER`_bkind()) \/ (C.BLOCK.KIND = `CONTROL`_bkind()))

   ;; ../../../../spec/4h-typing-call.watsup:369.1-373.43
   rule local-action: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp
      -- if (((C.LOCAL.KIND = `ACTION`_lkind()) \/ (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

   ;; ../../../../spec/4h-typing-call.watsup:375.1-377.32
   rule local-func-func: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `FUNC%`
      -- let `FUNC%`_lkind(typ) = lkind

   ;; ../../../../spec/4h-typing-call.watsup:379.1-384.43
   rule local-func-else: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((((C.LOCAL.KIND = `ACTION`_lkind()) \/ (C.LOCAL.KIND = `PARSERSTATE`_lkind())) \/ (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

   ;; ../../../../spec/4h-typing-call.watsup:386.1-388.30
   rule local-externfunc-func: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `FUNC%`
      -- let `FUNC%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:390.1-392.46
   rule local-externfunc-externabstractmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `EXTERNABSTRACTMETHOD%`
      -- let `EXTERNABSTRACTMETHOD%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:394.1-399.43
   rule local-externfunc-else: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((((C.LOCAL.KIND = `ACTION`_lkind()) \/ (C.LOCAL.KIND = `PARSERSTATE`_lkind())) \/ (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

   ;; ../../../../spec/4h-typing-call.watsup:401.1-403.30
   rule local-builtinmethod-func: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `FUNC%`
      -- let `FUNC%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:405.1-407.46
   rule local-builtinmethod-externabstractmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `EXTERNABSTRACTMETHOD%`
      -- let `EXTERNABSTRACTMETHOD%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:409.1-414.43
   rule local-builtinmethod-else: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((((C.LOCAL.KIND = `ACTION`_lkind()) \/ (C.LOCAL.KIND = `PARSERSTATE`_lkind())) \/ (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

   ;; ../../../../spec/4h-typing-call.watsup:416.1-418.30
   rule local-externmethod-func: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `FUNC%`
      -- let `FUNC%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:420.1-422.46
   rule local-externmethod-externabstractmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `EXTERNABSTRACTMETHOD%`
      -- let `EXTERNABSTRACTMETHOD%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:424.1-429.43
   rule local-externmethod-else: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((((C.LOCAL.KIND = `ACTION`_lkind()) \/ (C.LOCAL.KIND = `PARSERSTATE`_lkind())) \/ (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

   ;; ../../../../spec/4h-typing-call.watsup:431.1-433.30
   rule local-externabstractmethod-func: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `FUNC%`
      -- let `FUNC%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:435.1-437.46
   rule local-externabstractmethod-externabstractmethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- let lkind = C.LOCAL.KIND
      -- if lkind matches `EXTERNABSTRACTMETHOD%`
      -- let `EXTERNABSTRACTMETHOD%`_lkind(_typ') = lkind

   ;; ../../../../spec/4h-typing-call.watsup:439.1-444.43
   rule local-externabstractmethod-else: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp
      -- if ((((C.LOCAL.KIND = `ACTION`_lkind()) \/ (C.LOCAL.KIND = `PARSERSTATE`_lkind())) \/ (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

   ;; ../../../../spec/4h-typing-call.watsup:446.1-448.35
   rule local-parserapplymethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp
      -- if (C.LOCAL.KIND = `PARSERSTATE`_lkind())

   ;; ../../../../spec/4h-typing-call.watsup:450.1-452.42
   rule local-controlapplymethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}) = functyp
      -- if (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())

   ;; ../../../../spec/4h-typing-call.watsup:454.1-457.43
   rule local-tableapplymethod: `%%|-%:CALLSITE_OK`(cursor, C, functyp)
      -- if cursor matches `LOCAL`
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(_typ) = functyp
      -- if ((C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind()) \/ (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind()))

;; ../../../../spec/4b-typing-relation.watsup:118.1-120.35
relation Call_ok: `%%%|-%%%%:%%%`(cursor, context, tid*, functyp, targIL*, arg*, id*, typ, targIL*, argIL*)

   ;; ../../../../spec/4h-typing-call.watsup:466.1-480.76
   rule actiont: `%%%|-%%%%:%%%`(p, C, tid*{tid <- tid*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, `VoidT`_primtyp() as typ, [], argIL*{argIL <- argIL*})
      -- if tid*{tid <- tid*} matches []
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt*{pt <- pt*}) = functyp
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `ActionT%`_functyp(pt*{pt <- pt*})) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `ActionT%`_functyp(pt*{pt <- pt*})) holds
      -- (if ~$is_table_apply_in_action_arg(argIL))*{argIL <- argIL*}
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `ACT`_actctxt(), pt'', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt'' <- pt''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:482.1-503.79
   rule extern-funct: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_r', targIL''*{targIL'' <- targIL''*}, argIL''*{argIL'' <- argIL''*})
      -- if functyp matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- let theta = $infer_targs(tid_fresh*{tid_fresh <- tid_fresh*}, pt''*{pt'' <- pt''*}, typ_a*{typ_a <- typ_a*})
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_fresh))*{tid_fresh <- tid_fresh*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(targIL') = typ?{typ <- typ?})*{targIL' <- targIL'*, typ? <- typ?*}
      -- let targIL''*{targIL'' <- targIL''*} = targIL*{targIL <- targIL*} ++ targIL'*{targIL' <- targIL'*}
      -- let functyp' = $subst_functyp(theta, `ExternFuncT%%`_functyp(pt''*{pt'' <- pt''*}, typ_r))
      -- if functyp' matches `ExternFuncT%%`
      -- let `ExternFuncT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r') = functyp'
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `ExternFuncT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `ExternFuncT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt''', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt''' <- pt'''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:505.1-526.79
   rule funct: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_r', targIL''*{targIL'' <- targIL''*}, argIL''*{argIL'' <- argIL''*})
      -- if functyp matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- let theta = $infer_targs(tid_fresh*{tid_fresh <- tid_fresh*}, pt''*{pt'' <- pt''*}, typ_a*{typ_a <- typ_a*})
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_fresh))*{tid_fresh <- tid_fresh*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(targIL') = typ?{typ <- typ?})*{targIL' <- targIL'*, typ? <- typ?*}
      -- let targIL''*{targIL'' <- targIL''*} = targIL*{targIL <- targIL*} ++ targIL'*{targIL' <- targIL'*}
      -- let functyp' = $subst_functyp(theta, `FuncT%%`_functyp(pt''*{pt'' <- pt''*}, typ_r))
      -- if functyp' matches `FuncT%%`
      -- let `FuncT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r') = functyp'
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `FuncT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `FuncT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt''', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt''' <- pt'''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:528.1-541.78
   rule builtin-methodt: `%%%|-%%%%:%%%`(p, C, tid*{tid <- tid*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_r, [], argIL''*{argIL'' <- argIL''*})
      -- if tid*{tid <- tid*} matches []
      -- if functyp matches `BuiltinMethodT%%`
      -- let `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- if targIL*{targIL <- targIL*} matches []
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, typ_r)) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `BuiltinMethodT%%`_functyp(pt*{pt <- pt*}, typ_r)) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt'', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt'' <- pt''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:543.1-564.79
   rule extern-methodt: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_r', targIL''*{targIL'' <- targIL''*}, argIL''*{argIL'' <- argIL''*})
      -- if functyp matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- let theta = $infer_targs(tid_fresh*{tid_fresh <- tid_fresh*}, pt''*{pt'' <- pt''*}, typ_a*{typ_a <- typ_a*})
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_fresh))*{tid_fresh <- tid_fresh*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(targIL') = typ?{typ <- typ?})*{targIL' <- targIL'*, typ? <- typ?*}
      -- let targIL''*{targIL'' <- targIL''*} = targIL*{targIL <- targIL*} ++ targIL'*{targIL' <- targIL'*}
      -- let functyp' = $subst_functyp(theta, `ExternMethodT%%`_functyp(pt''*{pt'' <- pt''*}, typ_r))
      -- if functyp' matches `ExternMethodT%%`
      -- let `ExternMethodT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r') = functyp'
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `ExternMethodT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `ExternMethodT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt''', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt''' <- pt'''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:566.1-587.79
   rule extern-abstract-methodt: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_r', targIL''*{targIL'' <- targIL''*}, argIL''*{argIL'' <- argIL''*})
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- let theta = $infer_targs(tid_fresh*{tid_fresh <- tid_fresh*}, pt''*{pt'' <- pt''*}, typ_a*{typ_a <- typ_a*})
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_fresh))*{tid_fresh <- tid_fresh*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(targIL') = typ?{typ <- typ?})*{targIL' <- targIL'*, typ? <- typ?*}
      -- let targIL''*{targIL'' <- targIL''*} = targIL*{targIL <- targIL*} ++ targIL'*{targIL' <- targIL'*}
      -- let functyp' = $subst_functyp(theta, `ExternAbstractMethodT%%`_functyp(pt''*{pt'' <- pt''*}, typ_r))
      -- if functyp' matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r') = functyp'
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `ExternAbstractMethodT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `ExternAbstractMethodT%%`_functyp(pt'''*{pt''' <- pt'''*}, typ_r')) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt''', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt''' <- pt'''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:589.1-603.78
   rule parser-apply-methodt: `%%%|-%%%%:%%%`(p, C, tid*{tid <- tid*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, `VoidT`_primtyp() as typ, [], argIL''*{argIL'' <- argIL''*})
      -- if tid*{tid <- tid*} matches []
      -- if functyp matches `ParserApplyMethodT%`
      -- let `ParserApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp
      -- if targIL*{targIL <- targIL*} matches []
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `ParserApplyMethodT%`_functyp(pt*{pt <- pt*})) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `ParserApplyMethodT%`_functyp(pt*{pt <- pt*})) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt'', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt'' <- pt''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:605.1-619.78
   rule control-apply-methodt: `%%%|-%%%%:%%%`(p, C, tid*{tid <- tid*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, `VoidT`_primtyp() as typ, [], argIL''*{argIL'' <- argIL''*})
      -- if tid*{tid <- tid*} matches []
      -- if functyp matches `ControlApplyMethodT%`
      -- let `ControlApplyMethodT%`_functyp(pt*{pt <- pt*}) = functyp
      -- if targIL*{targIL <- targIL*} matches []
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `ControlApplyMethodT%`_functyp(pt*{pt <- pt*})) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `ControlApplyMethodT%`_functyp(pt*{pt <- pt*})) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt'', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt'' <- pt''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:621.1-626.64
   rule table-apply-methodt: `%%%|-%%%%:%%%`(p, C, tid*{tid <- tid*}, functyp, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id*{id <- id*}, typ_r, [], [])
      -- if tid*{tid <- tid*} matches []
      -- if functyp matches `TableApplyMethodT%`
      -- let `TableApplyMethodT%`_functyp(typ_r) = functyp
      -- if targIL*{targIL <- targIL*} matches []
      -- if arg*{arg <- arg*} matches []
      -- if id*{id <- id*} matches []
      -- if FuncType_wf: `%|-%`($bound_tids(p, C), `TableApplyMethodT%`_functyp(typ_r)) holds
      -- if Call_site_ok: `%%|-%:CALLSITE_OK`(p, C, `TableApplyMethodT%`_functyp(typ_r)) holds

;; ../../../../spec/4b-typing-relation.watsup:125.1-127.29
relation FuncType_ok: `%%|-%%%:%%%`(cursor, context, name, targIL*, arg*, functyp, tid*, id*)

   ;; ../../../../spec/4h-typing-call.watsup:44.1-47.61
   rule : `%%|-%%%:%%%`(p, C, name, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, tid_fresh*{tid_fresh <- tid_fresh*}, id_deft*{id_deft <- id_deft*})
      -- let (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} = $find_funcdef(p, C, name, arg*{arg <- arg*})
      -- if (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} matches (_)
      -- let ?((fid, fd, id_deft*{id_deft <- id_deft*})) = (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?}
      -- let (ft, tid_fresh*{tid_fresh <- tid_fresh*}) = $specialize_funcdef(fd, targIL*{targIL <- targIL*})

;; ../../../../spec/4b-typing-relation.watsup:128.1-130.32
relation MethodType_ok: `%%|-%%%%:%%%%`(cursor, context, expr, member, targIL*, arg*, functyp, exprIL, tid*, id*)

   ;; ../../../../spec/4h-typing-call.watsup:53.1-60.91
   rule builtin-size: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, `BuiltinMethodT%%`_functyp([], `IntT`_numtyp() as typ), exprIL_b, [], [])
      -- if targIL*{targIL <- targIL*} matches []
      -- if arg*{arg <- arg*} matches []
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- if ~$is_externt($canon_typ(typ_b))
      -- if member <- ["minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes"]

   ;; ../../../../spec/4h-typing-call.watsup:62.1-71.33
   rule builtin-stackt: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, `BuiltinMethodT%%`_functyp([pt], `IntT`_numtyp() as typ), exprIL_b, [], [])
      -- if targIL*{targIL <- targIL*} matches []
      -- if member <- ["push_front", "pop_front"]
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_b_in, int_b) = datatyp
      -- let pt = `%%%%`_paramtyp("count", `NO`_dir(), `IntT`_numtyp() as typ, ?())

   ;; ../../../../spec/4h-typing-call.watsup:73.1-78.61
   rule builtin-headert-isvalid: `%%|-%%%%:%%%%`(p, C, expr_b, text, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, `BuiltinMethodT%%`_functyp([], `BoolT`_primtyp() as typ), exprIL_b, [], [])
      -- if (text = "isValid")
      -- if targIL*{targIL <- targIL*} matches []
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id_b, (member, typ_b_in)*{member <- member*, typ_b_in <- typ_b_in*}) = datatyp

   ;; ../../../../spec/4h-typing-call.watsup:80.1-87.63
   rule builtin-headert-setvalid-invalid: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, `BuiltinMethodT%%`_functyp([], `VoidT`_primtyp() as typ), exprIL_b, [], [])
      -- if targIL*{targIL <- targIL*} matches []
      -- if member <- ["setValid", "setInvalid"]
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id_b, (member_b, typ_b_in)*{member_b <- member_b*, typ_b_in <- typ_b_in*}) = datatyp

   ;; ../../../../spec/4h-typing-call.watsup:89.1-93.60
   rule builtin-uniont: `%%|-%%%%:%%%%`(p, C, expr_b, text, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, `BuiltinMethodT%%`_functyp([], `BoolT`_primtyp() as typ), exprIL_b, [], [])
      -- if (text = "isValid")
      -- if targIL*{targIL <- targIL*} matches []
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id_b, (member, typ_b_in)*{member <- member*, typ_b_in <- typ_b_in*}) = datatyp

   ;; ../../../../spec/4h-typing-call.watsup:95.1-103.60
   rule externt: `%%|-%%%%:%%%%`(p, C, expr_b, member, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, tid_fresh*{tid_fresh <- tid_fresh*}, id_deft*{id_deft <- id_deft*})
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id_b, fmap_b) = objtyp
      -- let (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} = $find_func<funcdef>(member, $to_fkey(arg*{arg <- arg*}), fmap_b)
      -- if (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} matches (_)
      -- let ?((fid, fd, id_deft*{id_deft <- id_deft*})) = (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?}
      -- let (ft, tid_fresh*{tid_fresh <- tid_fresh*}) = $specialize_funcdef(fd, targIL*{targIL <- targIL*})

   ;; ../../../../spec/4h-typing-call.watsup:105.1-119.100
   rule parsert: `%%|-%%%%:%%%%`(p, C, expr_b, text, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, [], id_deft*{id_deft <- id_deft*})
      -- if (text = "apply")
      -- if targIL*{targIL <- targIL*} matches []
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, pt*{pt <- pt*}) = objtyp
      -- let ft = `ParserApplyMethodT%`_functyp(pt*{pt <- pt*})
      -- let fd = `MonoFD%`_monofuncdef(ft) as funcdef
      -- (let `%%%%`_paramtyp(id_p, _dir, _typ, exprIL_deft?{exprIL_deft <- exprIL_deft?}) = pt)*{_dir <- _dir*, _typ <- _typ*, exprIL_deft? <- exprIL_deft?*, id_p <- id_p*, pt <- pt*}
      -- (let b_deft = (exprIL_deft?{exprIL_deft <- exprIL_deft?} =/= ?()))*{b_deft <- b_deft*, exprIL_deft? <- exprIL_deft?*}
      -- let fid = `%%`_fid("apply", (id_p, b_deft)*{b_deft <- b_deft*, id_p <- id_p*})
      -- let (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} = $find_func<funcdef>("apply", $to_fkey(arg*{arg <- arg*}), `{%}`_set<pair<fid, funcdef>>([`%->%`_pair<fid, funcdef>(fid, fd)]))
      -- if (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} matches (_)
      -- let ?((fid', funcdef, id_deft*{id_deft <- id_deft*})) = (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?}
      -- if (fid' = fid)
      -- if (funcdef = `MonoFD%`_monofuncdef(ft) as funcdef)

   ;; ../../../../spec/4h-typing-call.watsup:121.1-135.100
   rule controlt: `%%|-%%%%:%%%%`(p, C, expr_b, text, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ft, exprIL_b, [], id_deft*{id_deft <- id_deft*})
      -- if (text = "apply")
      -- if targIL*{targIL <- targIL*} matches []
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, pt*{pt <- pt*}) = objtyp
      -- let ft = `ControlApplyMethodT%`_functyp(pt*{pt <- pt*})
      -- let fd = `MonoFD%`_monofuncdef(ft) as funcdef
      -- (let `%%%%`_paramtyp(id_p, _dir, _typ, exprIL_deft?{exprIL_deft <- exprIL_deft?}) = pt)*{_dir <- _dir*, _typ <- _typ*, exprIL_deft? <- exprIL_deft?*, id_p <- id_p*, pt <- pt*}
      -- (let b_deft = (exprIL_deft?{exprIL_deft <- exprIL_deft?} =/= ?()))*{b_deft <- b_deft*, exprIL_deft? <- exprIL_deft?*}
      -- let fid = `%%`_fid("apply", (id_p, b_deft)*{b_deft <- b_deft*, id_p <- id_p*})
      -- let (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} = $find_func<funcdef>("apply", $to_fkey(arg*{arg <- arg*}), `{%}`_set<pair<fid, funcdef>>([`%->%`_pair<fid, funcdef>(fid, fd)]))
      -- if (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?} matches (_)
      -- let ?((fid', funcdef, id_deft*{id_deft <- id_deft*})) = (fid, funcdef, id*)?{(fid, funcdef, id*) <- (fid, funcdef, id*)?}
      -- if (fid' = fid)
      -- if (funcdef = `MonoFD%`_monofuncdef(ft) as funcdef)

   ;; ../../../../spec/4h-typing-call.watsup:137.1-144.42
   rule tablet: `%%|-%%%%:%%%%`(p, C, expr_b, text, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, functyp, exprIL_b, [], [])
      -- if (text = "apply")
      -- if targIL*{targIL <- targIL*} matches []
      -- if arg*{arg <- arg*} matches []
      -- Expr_ok: `%%|-%:%`(p, C, expr_b, exprIL_b)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- let typ = $canon_typ(typ_b)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `TableT%%`
      -- let `TableT%%`_objtyp(id, typ_t) = objtyp
      -- let functyp = `TableApplyMethodT%`_functyp(typ_t)

;; ../../../../spec/4b-typing-relation.watsup:135.1-137.29
relation ConsType_ok: `%%|-%%%:%%%`(cursor, context, name, targIL*, arg*, constyp, tid*, id*)

   ;; ../../../../spec/4h-typing-call.watsup:632.1-635.61
   rule : `%%|-%%%:%%%`(p, C, name, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, ct, tid_fresh*{tid_fresh <- tid_fresh*}, id_deft*{id_deft <- id_deft*})
      -- let (cid, consdef, id*)?{(cid, consdef, id*) <- (cid, consdef, id*)?} = $find_consdef(C, name, arg*{arg <- arg*})
      -- if (cid, consdef, id*)?{(cid, consdef, id*) <- (cid, consdef, id*)?} matches (_)
      -- let ?((cid, cd, id_deft*{id_deft <- id_deft*})) = (cid, consdef, id*)?{(cid, consdef, id*) <- (cid, consdef, id*)?}
      -- let (ct, tid_fresh*{tid_fresh <- tid_fresh*}) = $specialize_consdef(cd, targIL*{targIL <- targIL*})

;; ../../../../spec/4b-typing-relation.watsup:143.1-145.23
relation Inst_site_ok: `%%|-%:INSTSITE_OK`(cursor, context, constyp)

   ;; ../../../../spec/4h-typing-call.watsup:641.1-644.52
   rule global: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `GLOBAL`
      -- let typ_i' = $canon_typ(typ_i)
      -- if ($is_externt(typ_i') \/ $is_packaget(typ_i'))

   ;; ../../../../spec/4h-typing-call.watsup:646.1-653.54
   rule block-package: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `BLOCK`
      -- let typ_i' = $canon_typ(typ_i)
      -- if (C.BLOCK.KIND = `PACKAGE`_bkind())
      -- if ((($is_externt(typ_i') \/ $is_parsert(typ_i')) \/ $is_controlt(typ_i')) \/ $is_packaget(typ_i'))

   ;; ../../../../spec/4h-typing-call.watsup:655.1-661.51
   rule block-parser: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `BLOCK`
      -- let typ_i' = $canon_typ(typ_i)
      -- if (C.BLOCK.KIND = `PARSER`_bkind())
      -- if ($is_externt(typ_i') \/ $is_parsert(typ_i'))

   ;; ../../../../spec/4h-typing-call.watsup:663.1-669.74
   rule block-control: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `BLOCK`
      -- let typ_i' = $canon_typ(typ_i)
      -- if (C.BLOCK.KIND = `CONTROL`_bkind())
      -- if (($is_externt(typ_i') \/ $is_controlt(typ_i')) \/ $is_tablet(typ_i'))

   ;; ../../../../spec/4h-typing-call.watsup:671.1-677.51
   rule local-parserstate: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `LOCAL`
      -- let typ_i' = $canon_typ(typ_i)
      -- if (C.LOCAL.KIND = `PARSERSTATE`_lkind())
      -- if ($is_externt(typ_i') \/ $is_parsert(typ_i'))

   ;; ../../../../spec/4h-typing-call.watsup:679.1-685.52
   rule local-controlapplymethod: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `LOCAL`
      -- let typ_i' = $canon_typ(typ_i)
      -- if (C.LOCAL.KIND = `CONTROLAPPLYMETHOD`_lkind())
      -- if ($is_externt(typ_i') \/ $is_controlt(typ_i'))

   ;; ../../../../spec/4h-typing-call.watsup:687.1-693.28
   rule local-tableapplymethod: `%%|-%:INSTSITE_OK`(cursor, C, `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i))
      -- if cursor matches `LOCAL`
      -- let typ_i' = $canon_typ(typ_i)
      -- if (C.LOCAL.KIND = `TABLEAPPLYMETHOD`_lkind())
      -- if $is_externt(typ_i')

;; ../../../../spec/4b-typing-relation.watsup:146.1-148.35
relation Inst_ok: `%%%|-%%%%:%%%`(cursor, context, tid*, constyp, targIL*, arg*, id*, typ, targIL*, argIL*)

   ;; ../../../../spec/4h-typing-call.watsup:695.1-719.85
   rule global-packaget: `%%%|-%%%%:%%%`(cursor, C_0, tid_fresh*{tid_fresh <- tid_fresh*}, ct, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_i', targIL''*{targIL'' <- targIL''*}, argIL''*{argIL'' <- argIL''*})
      -- if cursor matches `GLOBAL`
      -- let `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i) = ct
      -- if $is_packaget($canon_typ(typ_i))
      -- let C_1 = $set_blockkind(C_0, `PACKAGE`_bkind())
      -- (Arg_ok: `%%|-%:%%`(`BLOCK`_cursor(), C_1, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- let theta = $infer_targs(tid_fresh*{tid_fresh <- tid_fresh*}, pt''*{pt'' <- pt''*}, typ_a*{typ_a <- typ_a*})
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_fresh))*{tid_fresh <- tid_fresh*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(targIL') = typ?{typ <- typ?})*{targIL' <- targIL'*, typ? <- typ?*}
      -- let targIL''*{targIL'' <- targIL''*} = targIL*{targIL <- targIL*} ++ targIL'*{targIL' <- targIL'*}
      -- let `ConsT%%`_constyp(pt'''*{pt''' <- pt'''*}, typ_i') = $subst_constyp(theta, `ConsT%%`_constyp(pt''*{pt'' <- pt''*}, typ_i))
      -- if ConsType_wf: `%|-%`($bound_tids(`GLOBAL`_cursor(), C_0), `ConsT%%`_constyp(pt'''*{pt''' <- pt'''*}, typ_i')) holds
      -- if Inst_site_ok: `%%|-%:INSTSITE_OK`(`GLOBAL`_cursor(), C_0, `ConsT%%`_constyp(pt'''*{pt''' <- pt'''*}, typ_i')) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(`BLOCK`_cursor(), C_1, `NOACT`_actctxt(), pt''', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt''' <- pt'''*, typ_a <- typ_a*}

   ;; ../../../../spec/4h-typing-call.watsup:721.1-744.79
   rule else: `%%%|-%%%%:%%%`(p, C, tid_fresh*{tid_fresh <- tid_fresh*}, ct, targIL*{targIL <- targIL*}, arg*{arg <- arg*}, id_deft*{id_deft <- id_deft*}, typ_i', targIL''*{targIL'' <- targIL''*}, argIL''*{argIL'' <- argIL''*})
      -- let `ConsT%%`_constyp(pt*{pt <- pt*}, typ_i) = ct
      -- if ~((p = `GLOBAL`_cursor()) /\ $is_packaget($canon_typ(typ_i)))
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- let pt'*{pt' <- pt'*} = $filter_default_args(pt*{pt <- pt*}, id_deft*{id_deft <- id_deft*})
      -- if (|pt'*{pt' <- pt'*}| = |argIL*{argIL <- argIL*}|)
      -- let pt''*{pt'' <- pt''*} = $align_params_with_args(pt'*{pt' <- pt'*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*})
      -- let theta = $infer_targs(tid_fresh*{tid_fresh <- tid_fresh*}, pt''*{pt'' <- pt''*}, typ_a*{typ_a <- typ_a*})
      -- (let typ?{typ <- typ?} = $find_map<tid, typ>(theta, tid_fresh))*{tid_fresh <- tid_fresh*, typ? <- typ?*}
      -- (if typ?{typ <- typ?} matches (_))*{typ? <- typ?*}
      -- (let ?(targIL') = typ?{typ <- typ?})*{targIL' <- targIL'*, typ? <- typ?*}
      -- let targIL''*{targIL'' <- targIL''*} = targIL*{targIL <- targIL*} ++ targIL'*{targIL' <- targIL'*}
      -- let `ConsT%%`_constyp(pt'''*{pt''' <- pt'''*}, typ_i') = $subst_constyp(theta, `ConsT%%`_constyp(pt''*{pt'' <- pt''*}, typ_i))
      -- if ConsType_wf: `%|-%`($bound_tids(p, C), `ConsT%%`_constyp(pt'''*{pt''' <- pt'''*}, typ_i')) holds
      -- if Inst_site_ok: `%%|-%:INSTSITE_OK`(p, C, `ConsT%%`_constyp(pt'''*{pt''' <- pt'''*}, typ_i')) holds
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `NOACT`_actctxt(), pt''', (argIL, typ_a), argIL''))*{argIL <- argIL*, argIL'' <- argIL''*, pt''' <- pt'''*, typ_a <- typ_a*}

;; ../../../../spec/4d2-typing-subtyping.watsup:312.1-312.72
def $reduce_senum_unary(exprIL, $check_unary(typ) : bool) : exprIL? =

   ;; ../../../../spec/4d2-typing-subtyping.watsup:314.1-316.26
   clause 0(exprIL, $check_unary) = ?(exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if $check_unary(typ)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:318.1-323.66
   clause 1(exprIL, $check_unary) = ?(exprIL'')
      -- let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL)
      -- if ~$check_unary(typ)
      -- let typ'' = typ
      -- if typ'' <: datatyp
      -- let datatyp = typ'' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ', _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp
      -- let exprIL' = `CastE%%%`_exprIL(typ', exprIL, `(%;%)`_annotIL(typ', ctk))
      -- let exprIL'''?{exprIL''' <- exprIL'''?} = $reduce_senum_unary(exprIL', $check_unary)
      -- if exprIL'''?{exprIL''' <- exprIL'''?} matches (_)
      -- let ?(exprIL'') = exprIL'''?{exprIL''' <- exprIL'''?}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:325.1-326.15
   clause 2(exprIL, $check_unary) = ?()
      -- otherwise

;; ../../../../spec/4d2-typing-subtyping.watsup:329.1-329.98
def $reduce_senums_binary(exprIL, exprIL, $check_binary(typ, typ) : bool) : (exprIL, exprIL)? =

   ;; ../../../../spec/4d2-typing-subtyping.watsup:331.1-334.36
   clause 0(exprIL_a, exprIL_b, $check_binary) = ?((exprIL_a, exprIL_b))
      -- let `(%;%)`_annotIL(typ_a, _ctk) = $annot(exprIL_a)
      -- let `(%;%)`_annotIL(typ_b, _ctk') = $annot(exprIL_b)
      -- if $check_binary(typ_a, typ_b)

   ;; ../../../../spec/4d2-typing-subtyping.watsup:336.1-342.97
   clause 1(exprIL_a, exprIL_b, $check_binary) = ?((exprIL_a'', exprIL_b''))
      -- let `(%;%)`_annotIL(typ_a, ctk_a) = $annot(exprIL_a)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- if ~$check_binary(typ_a, typ_b)
      -- let typ = typ_a
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ_a', _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp
      -- let exprIL_a' = `CastE%%%`_exprIL(typ_a', exprIL_a, `(%;%)`_annotIL(typ_a', ctk_a))
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $reduce_senums_binary(exprIL_a', exprIL_b, $check_binary)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_a'', exprIL_b'')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:344.1-350.97
   clause 2(exprIL_a, exprIL_b, $check_binary) = ?((exprIL_a'', exprIL_b''))
      -- let `(%;%)`_annotIL(typ_a, _ctk) = $annot(exprIL_a)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- if ~$check_binary(typ_a, typ_b)
      -- let typ = typ_b
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ_b', _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp
      -- let exprIL_b' = `CastE%%%`_exprIL(typ_b', exprIL_b, `(%;%)`_annotIL(typ_b', ctk_b))
      -- let (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} = $reduce_senums_binary(exprIL_a, exprIL_b', $check_binary)
      -- if (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?} matches (_)
      -- let ?((exprIL_a'', exprIL_b'')) = (exprIL, exprIL)?{(exprIL, exprIL) <- (exprIL, exprIL)?}

   ;; ../../../../spec/4d2-typing-subtyping.watsup:352.1-353.15
   clause 3(exprIL_a, exprIL_b, $check_binary) = ?()
      -- otherwise

;; ../../../../spec/4d2-typing-subtyping.watsup:356.1-356.55
def $coerce_binary(exprIL, exprIL) : (exprIL, exprIL)? =

   ;; ../../../../spec/4d2-typing-subtyping.watsup:358.1-361.32
   clause 0(exprIL_a, exprIL_b) = ?((exprIL_a, exprIL_b))
      -- let `(%;%)`_annotIL(typ_a, _ctk) = $annot(exprIL_a)
      -- let `(%;%)`_annotIL(typ_b, _ctk') = $annot(exprIL_b)
      -- if Type_alpha: `%~~%`(typ_a, typ_b) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:363.1-368.57
   clause 1(exprIL_a, exprIL_b) = ?((exprIL_a', exprIL_b))
      -- let `(%;%)`_annotIL(typ_a, ctk_a) = $annot(exprIL_a)
      -- let `(%;%)`_annotIL(typ_b, _ctk) = $annot(exprIL_b)
      -- if ~Type_alpha: `%~~%`(typ_a, typ_b) holds
      -- if Sub_impl: `%<<%`(typ_a, typ_b) holds
      -- let exprIL_a' = `CastE%%%`_exprIL(typ_b, exprIL_a, `(%;%)`_annotIL(typ_b, ctk_a))

   ;; ../../../../spec/4d2-typing-subtyping.watsup:370.1-376.57
   clause 2(exprIL_a, exprIL_b) = ?((exprIL_a, exprIL_b'))
      -- let `(%;%)`_annotIL(typ_a, _ctk) = $annot(exprIL_a)
      -- let `(%;%)`_annotIL(typ_b, ctk_b) = $annot(exprIL_b)
      -- if ~Type_alpha: `%~~%`(typ_a, typ_b) holds
      -- if ~Sub_impl: `%<<%`(typ_a, typ_b) holds
      -- if Sub_impl: `%<<%`(typ_b, typ_a) holds
      -- let exprIL_b' = `CastE%%%`_exprIL(typ_a, exprIL_b, `(%;%)`_annotIL(typ_a, ctk_b))

   ;; ../../../../spec/4d2-typing-subtyping.watsup:378.1-379.15
   clause 3(exprIL_a, exprIL_b) = ?()
      -- otherwise

;; ../../../../spec/4d2-typing-subtyping.watsup:382.1-382.42
def $coerce_assign(exprIL, typ) : exprIL? =

   ;; ../../../../spec/4d2-typing-subtyping.watsup:384.1-386.32
   clause 0(exprIL, typ_t) = ?(exprIL)
      -- let `(%;%)`_annotIL(typ_f, _ctk) = $annot(exprIL)
      -- if Type_alpha: `%~~%`(typ_f, typ_t) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:388.1-391.30
   clause 1(exprIL, typ_t) = ?(`CastE%%%`_exprIL(typ_t, exprIL, `(%;%)`_annotIL(typ_t, ctk_f)))
      -- let `(%;%)`_annotIL(typ_f, ctk_f) = $annot(exprIL)
      -- if ~Type_alpha: `%~~%`(typ_f, typ_t) holds
      -- if Sub_impl: `%<<%`(typ_f, typ_t) holds

   ;; ../../../../spec/4d2-typing-subtyping.watsup:393.1-394.15
   clause 2(exprIL, typ_t) = ?()
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:92.1-92.33
def $compatible_bnot(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:95.1-95.63
   clause 0(typ) = $compatible'_bnot($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:93.1-93.34
def $compatible'_bnot(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:96.1-96.38
   clause 0(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:97.1-97.38
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:98.1-99.15
   clause 2(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:107.1-107.33
def $compatible_lnot(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:110.1-110.63
   clause 0(typ) = $compatible'_lnot($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:108.1-108.34
def $compatible'_lnot(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:111.1-111.36
   clause 0(typ) = true
      -- if (typ = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:112.1-113.14
   clause 1(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:121.1-121.34
def $compatible_uplus(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:124.1-124.65
   clause 0(typ) = $compatible'_uplus($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:122.1-122.35
def $compatible'_uplus(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:125.1-125.36
   clause 0(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:126.1-126.39
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:127.1-127.39
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:128.1-129.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:137.1-137.35
def $compatible_uminus(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:140.1-140.67
   clause 0(typ) = $compatible'_uminus($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:138.1-138.36
def $compatible'_uminus(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:141.1-141.37
   clause 0(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:142.1-142.40
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:143.1-143.40
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:144.1-145.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:157.1-157.47
def $compatible_plusminusmult(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:160.1-161.69
   clause 0(typ_l, typ_r) = $compatible'_plusminusmult($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:158.1-158.48
def $compatible'_plusminusmult(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:162.1-162.50
   clause 0(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:163.1-163.56
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:164.1-164.56
   clause 2(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:165.1-166.15
   clause 3(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:187.1-187.46
def $compatible_satplusminus(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:190.1-191.68
   clause 0(typ_l, typ_r) = $compatible'_satplusminus($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:188.1-188.47
def $compatible'_satplusminus(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:192.1-192.55
   clause 0(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:193.1-193.55
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:194.1-195.15
   clause 2(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:216.1-216.40
def $compatible_divmod(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:219.1-220.62
   clause 0(typ_l, typ_r) = $compatible'_divmod($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:217.1-217.41
def $compatible'_divmod(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:221.1-221.43
   clause 0(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:222.1-223.15
   clause 1(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:269.1-269.39
def $compatible_shift(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:272.1-273.61
   clause 0(typ_l, typ_r) = $compatible'_shift($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:270.1-270.40
def $compatible'_shift(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:274.1-274.42
   clause 0(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:275.1-275.45
   clause 1(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if typ' <: numtyp
      -- let numtyp = typ' as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:276.1-276.45
   clause 2(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if typ' <: numtyp
      -- let numtyp = typ' as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:277.1-277.45
   clause 3(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:278.1-278.48
   clause 4(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:279.1-279.48
   clause 5(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:280.1-280.45
   clause 6(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:281.1-281.48
   clause 7(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:282.1-282.48
   clause 8(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:283.1-284.15
   clause 9(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:343.1-343.41
def $compatible_compare(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:346.1-347.63
   clause 0(typ_l, typ_r) = $compatible'_compare($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:344.1-344.42
def $compatible'_compare(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:348.1-348.44
   clause 0(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:349.1-349.50
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:350.1-350.50
   clause 2(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:351.1-352.15
   clause 3(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:373.1-373.41
def $compatible_bitwise(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:376.1-377.63
   clause 0(typ_l, typ_r) = $compatible'_bitwise($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:374.1-374.42
def $compatible'_bitwise(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:378.1-378.50
   clause 0(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:379.1-379.50
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:380.1-381.15
   clause 2(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:402.1-402.40
def $compatible_concat(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:405.1-406.62
   clause 0(typ_l, typ_r) = $compatible'_concat($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:403.1-403.41
def $compatible'_concat(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:407.1-407.49
   clause 0(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:408.1-408.49
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:409.1-409.49
   clause 2(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:410.1-410.49
   clause 3(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(_width') = numtyp'

   ;; ../../../../spec/4e-typing-expr.watsup:411.1-412.15
   clause 4(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:454.1-454.41
def $compatible_logical(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:457.1-458.63
   clause 0(typ_l, typ_r) = $compatible'_logical($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:455.1-455.42
def $compatible'_logical(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:459.1-459.46
   clause 0(typ, typ') = true
      -- if (typ = `BoolT`_primtyp() as typ)
      -- if (typ' = `BoolT`_primtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:460.1-461.15
   clause 1(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:521.1-521.38
def $compatible_mask(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:524.1-525.60
   clause 0(typ_l, typ_r) = $compatible'_mask($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:522.1-522.39
def $compatible'_mask(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:526.1-526.41
   clause 0(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:527.1-527.47
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:528.1-528.47
   clause 2(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:529.1-530.15
   clause 3(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:553.1-553.39
def $compatible_range(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:556.1-557.61
   clause 0(typ_l, typ_r) = $compatible'_range($canon_typ(typ_l), $canon_typ(typ_r))

;; ../../../../spec/4e-typing-expr.watsup:554.1-554.40
def $compatible'_range(typ, typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:558.1-558.42
   clause 0(typ, typ') = true
      -- if (typ = `IntT`_numtyp() as typ)
      -- if (typ' = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:559.1-559.48
   clause 1(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FIntT%`
      -- let `FIntT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:560.1-560.48
   clause 2(typ, typ') = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- if typ' <: numtyp
      -- let numtyp' = typ' as numtyp
      -- if numtyp' matches `FBitT%`
      -- let `FBitT%`_numtyp(w') = numtyp'
      -- if (w = w')

   ;; ../../../../spec/4e-typing-expr.watsup:561.1-562.15
   clause 3(typ_l, typ_r) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:584.1-586.26
relation Select_case_keyset_ok: `%%%|-%:%`(cursor, context, typ, keyset, keysetIL)

   ;; ../../../../spec/4e-typing-expr.watsup:588.1-593.30
   rule exprk-sett: `%%%|-%:%`(cursor, C, typ_k, keyset, `ExprK%`_keysetIL(exprIL))
      -- if cursor matches `LOCAL`
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ', _ctk) = $annot(exprIL)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- if Type_alpha: `%~~%`(typ, typ_k) holds

   ;; ../../../../spec/4e-typing-expr.watsup:595.1-602.63
   rule exprk-sett: `%%%|-%:%`(cursor, C, typ_k, keyset, `ExprK%`_keysetIL(exprIL'))
      -- if cursor matches `LOCAL`
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ', _ctk) = $annot(exprIL)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- if ~Type_alpha: `%~~%`(typ, typ_k) holds
      -- if Sub_impl: `%<<%`(typ, typ_k) holds
      -- let exprIL' = `CastE%%%`_exprIL(`SetT%`_synthtyp(typ_k) as typeIL, exprIL, `(%;%)`_annotIL(`SetT%`_synthtyp(typ_k) as typ, `DYN`_ctk()))

   ;; ../../../../spec/4e-typing-expr.watsup:604.1-610.63
   rule exprk-not-sett: `%%%|-%:%`(cursor, C, typ_k, keyset, `ExprK%`_keysetIL(exprIL'))
      -- if cursor matches `LOCAL`
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if Sub_impl: `%<<%`(typ, typ_k) holds
      -- let exprIL' = `CastE%%%`_exprIL(`SetT%`_synthtyp(typ_k) as typeIL, exprIL, `(%;%)`_annotIL(`SetT%`_synthtyp(typ_k) as typ, `DYN`_ctk()))

   ;; ../../../../spec/4e-typing-expr.watsup:612.1-613.39
   rule defaultk: `%%%|-%:%`(cursor, C, typ_k, keyset, `DefaultK`_keysetIL())
      -- if cursor matches `LOCAL`
      -- if keyset matches `DefaultK`

   ;; ../../../../spec/4e-typing-expr.watsup:615.1-616.31
   rule anyk: `%%%|-%:%`(cursor, C, typ_k, keyset, `AnyK`_keysetIL())
      -- if cursor matches `LOCAL`
      -- if keyset matches `AnyK`

;; ../../../../spec/4e-typing-expr.watsup:619.1-621.26
relation Select_case_keysets_ok: `%%|-%%:%`(cursor, context, typ*, keyset*, keysetIL*)

   ;; ../../../../spec/4e-typing-expr.watsup:623.1-625.59
   rule one-to-one: `%%|-%%:%`(p, C, typ*{typ <- typ*}, keyset'*{keyset' <- keyset'*}, [keysetIL])
      -- if typ*{typ <- typ*} matches [ _/1 ]
      -- let [typ_k] = typ*{typ <- typ*}
      -- if keyset'*{keyset' <- keyset'*} matches [ _/1 ]
      -- let [keyset] = keyset'*{keyset' <- keyset'*}
      -- Select_case_keyset_ok: `%%%|-%:%`(p, C, typ_k, keyset, keysetIL)

   ;; ../../../../spec/4e-typing-expr.watsup:627.1-629.67
   rule many-to-one: `%%|-%%:%`(p, C, typ_k*{typ_k <- typ_k*}, keyset'*{keyset' <- keyset'*}, [keysetIL])
      -- if keyset'*{keyset' <- keyset'*} matches [ _/1 ]
      -- let [keyset] = keyset'*{keyset' <- keyset'*}
      -- Select_case_keyset_ok: `%%%|-%:%`(p, C, `SeqT%`_synthtyp(typ_k*{typ_k <- typ_k*}) as typ, keyset, keysetIL)

   ;; ../../../../spec/4e-typing-expr.watsup:631.1-634.62
   rule many-to-many: `%%|-%%:%`(p, C, typ_k*{typ_k <- typ_k*}, keyset*{keyset <- keyset*}, keysetIL*{keysetIL <- keysetIL*})
      -- if (|typ_k*{typ_k <- typ_k*}| = |keyset*{keyset <- keyset*}|)
      -- (Select_case_keyset_ok: `%%%|-%:%`(p, C, typ_k, keyset, keysetIL))*{keyset <- keyset*, keysetIL <- keysetIL*, typ_k <- typ_k*}

;; ../../../../spec/4e-typing-expr.watsup:637.1-639.26
relation Select_case_ok: `%%%|-%:%`(cursor, context, typ*, selectcase, selectcaseIL)

   ;; ../../../../spec/4e-typing-expr.watsup:641.1-644.74
   rule : `%%%|-%:%`(cursor, C, typ_k*{typ_k <- typ_k*}, `%%`_selectcase(keyset*{keyset <- keyset*}, statelabel), `%%`_selectcaseIL(keysetIL*{keysetIL <- keysetIL*}, statelabel))
      -- if cursor matches `LOCAL`
      -- Select_case_keysets_ok: `%%|-%%:%`(`LOCAL`_cursor(), C, typ_k*{typ_k <- typ_k*}, keyset*{keyset <- keyset*}, keysetIL*{keysetIL <- keysetIL*})
      -- let styp?{styp <- styp?} = $find_styp(`LOCAL`_cursor(), C, `CURRENT%`_name(statelabel))
      -- if styp?{styp <- styp?} matches (_)
      -- let ?(`%%%%`_styp(typ, dir'', ctk'', val?{val <- val?})) = styp?{styp <- styp?}
      -- if (typ = `StateT`_synthtyp() as typ)
      -- if val?{val <- val?} matches ()

;; ../../../../spec/4e-typing-expr.watsup:662.1-662.39
def $compatible_arrayindex(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:665.1-665.75
   clause 0(typ) = $compatible'_arrayindex($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:663.1-663.40
def $compatible'_arrayindex(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:666.1-666.41
   clause 0(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:667.1-667.44
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:668.1-668.44
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:669.1-670.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:722.1-722.42
def $compatible_bitstringbase(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:725.1-725.81
   clause 0(typ) = $compatible'_bitstringbase($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:723.1-723.43
def $compatible'_bitstringbase(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:726.1-726.44
   clause 0(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:727.1-727.48
   clause 1(typ) = (w > 0)
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:728.1-728.47
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:729.1-730.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:732.1-732.43
def $compatible_bitstringindex(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:735.1-735.83
   clause 0(typ) = $compatible'_bitstringindex($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:733.1-733.44
def $compatible'_bitstringindex(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:736.1-736.45
   clause 0(typ) = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:737.1-737.48
   clause 1(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:738.1-738.48
   clause 2(typ) = true
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(_width) = numtyp

   ;; ../../../../spec/4e-typing-expr.watsup:739.1-740.15
   clause 3(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:742.1-742.52
def $is_valid_bitstring_slice(typ, nat, nat) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:745.1-746.75
   clause 0(typ, n_l, n_h) = ((n_l <= n_h) /\ $is_valid_bitstring_slice'($canon_typ(typ), n_l, n_h))

;; ../../../../spec/4e-typing-expr.watsup:743.1-743.53
def $is_valid_bitstring_slice'(typ, nat, nat) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:747.1-747.50
   clause 0(typ, _nat, _nat') = true
      -- if (typ = `IntT`_numtyp() as typ)

   ;; ../../../../spec/4e-typing-expr.watsup:748.1-750.35
   clause 1(typ, n_l, n_h) = ((n_h <= w) /\ (w_slice <= w))
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FIntT%`
      -- let `FIntT%`_numtyp(w) = numtyp
      -- let w_slice = ((n_h - n_l) + 1)

   ;; ../../../../spec/4e-typing-expr.watsup:751.1-753.35
   clause 2(typ, n_l, n_h) = ((n_h <= w) /\ (w_slice <= w))
      -- if typ <: numtyp
      -- let numtyp = typ as numtyp
      -- if numtyp matches `FBitT%`
      -- let `FBitT%`_numtyp(w) = numtyp
      -- let w_slice = ((n_h - n_l) + 1)

   ;; ../../../../spec/4e-typing-expr.watsup:754.1-755.15
   clause 3(_typ, _nat, _nat') = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:971.1-971.44
def $not_abstract_extern_object(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:975.1-976.52
   clause 0(typ) = $not_abstract_extern_object'($canon_typ(typ))

;; ../../../../spec/4e-typing-expr.watsup:972.1-972.45
def $not_abstract_extern_object'(typ) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:978.1-979.26
   clause 0(typ) = true
      -- if ~$is_externt(typ)

   ;; ../../../../spec/4e-typing-expr.watsup:980.1-983.45
   clause 1(typ) = true
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(_id, fmap) = objtyp
      -- let `{%}`_set<fid>(fid*{fid <- fid*}) = $dom_map<fid, funcdef>(fmap)
      -- (let funcdef?{funcdef <- funcdef?} = $find_map<fid, funcdef>(fmap, fid))*{fid <- fid*, funcdef? <- funcdef?*}
      -- (if funcdef?{funcdef <- funcdef?} matches (_))*{funcdef? <- funcdef?*}
      -- (let ?(fd) = funcdef?{funcdef <- funcdef?})*{fd <- fd*, funcdef? <- funcdef?*}
      -- (if $not_abstract_extern_object''(fd))*{fd <- fd*}

   ;; ../../../../spec/4e-typing-expr.watsup:984.1-985.15
   clause 2(typ) = false
      -- otherwise

;; ../../../../spec/4e-typing-expr.watsup:973.1-973.50
def $not_abstract_extern_object''(funcdef) : bool =

   ;; ../../../../spec/4e-typing-expr.watsup:987.1-987.88
   clause 0(funcdef) = false
      -- if funcdef <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((_tparam*{_tparam <- _tparam*}, _tparam'*{_tparam' <- _tparam'*}), functyp) = funcdef as polyfuncdef
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(_paramtyp*{_paramtyp <- _paramtyp*}, _typ) = functyp

   ;; ../../../../spec/4e-typing-expr.watsup:988.1-989.15
   clause 1(_funcdef) = true
      -- otherwise

;; ../../../../spec/4f-typing-stmt.watsup:46.1-48.29
relation Switch_tbl_label_ok: `%%%%|-%:%`(cursor, context, id, bool, switchlabel, switchlabelIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:50.1-56.55
   rule exprl: `%%%%|-%:%`(p, C, id_t, b_last, switchlabel, `ExprL%`_switchlabelIL(`NameE%%`_exprIL(`CURRENT%`_name(id_a), `(%;%)`_annotIL(typ_e, ctk_e))))
      -- if switchlabel matches `ExprL%`
      -- let `ExprL%`_switchlabel(expr) = switchlabel
      -- if expr matches `NameE%`
      -- let `NameE%`_expr(name) = expr
      -- if name matches `CURRENT%`
      -- let `CURRENT%`_name(id_a) = name
      -- let id_e = $concat_text(["action_list(", id_t, ")"])
      -- let id = $concat_text([id_e, ".", id_a])
      -- if (?(`TableEnumFieldV%%`_val(id_e, id_a)) = $find_val(p, C, `CURRENT%`_name(id)))
      -- let styp?{styp <- styp?} = $find_styp(p, C, `CURRENT%`_name(id))
      -- if styp?{styp <- styp?} matches (_)
      -- let ?(`%%%%`_styp(typ_e, _dir, ctk_e, _val?{_val <- _val?})) = styp?{styp <- styp?}

   ;; ../../../../spec/4f-typing-stmt.watsup:58.1-59.39
   rule defaultl: `%%%%|-%:%`(p, C, id_t, bool, switchlabel, `DefaultL`_switchlabelIL())
      -- if (bool = true)
      -- if switchlabel matches `DefaultL`

;; ../../../../spec/4f-typing-stmt.watsup:62.1-65.32
relation Switch_tbl_case_ok: `%%%%%|-%:%%%`(cursor, context, flow, id, bool, switchcase, flow, switchcaseIL, switchlabel)

   ;; ../../../../spec/4f-typing-stmt.watsup:67.1-73.44
   rule matchc: `%%%%%|-%:%%%`(p, C, f, id_t, b_last, switchcase, f', `MatchC%%`_switchcaseIL(switchlabelIL, blockIL), switchlabel)
      -- if switchcase matches `MatchC%%`
      -- let `MatchC%%`_switchcase(switchlabel, block) = switchcase
      -- Switch_tbl_label_ok: `%%%%|-%:%`(p, C, id_t, b_last, switchlabel, switchlabelIL)
      -- Block_ok: `%%%%|-%:%%%`(p, C, f, `NOINIT`_blkctxt(), block, C', f', blockIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:75.1-79.53
   rule fallc: `%%%%%|-%:%%%`(p, C, f, id_t, b_last, switchcase, f, `FallC%`_switchcaseIL(switchlabelIL), switchlabel)
      -- if switchcase matches `FallC%`
      -- let `FallC%`_switchcase(switchlabel) = switchcase
      -- Switch_tbl_label_ok: `%%%%|-%:%`(p, C, id_t, b_last, switchlabel, switchlabelIL)

;; ../../../../spec/4f-typing-stmt.watsup:82.1-85.29
relation Switch_tbl_cases_ok: `%%%%|-%:%%%`(cursor, context, flow, id, switchcase*, flow, switchcaseIL*, switchlabel*)

   ;; ../../../../spec/4f-typing-stmt.watsup:87.1-88.32
   rule empty: `%%%%|-%:%%%`(p, C, f, id_t, switchcase*{switchcase <- switchcase*}, f, [], [])
      -- if switchcase*{switchcase <- switchcase*} matches []

   ;; ../../../../spec/4f-typing-stmt.watsup:90.1-98.72
   rule seq: `%%%%|-%:%%%`(p, C, f, id_t, switchcase*{switchcase <- switchcase*}, f'', switchcaseIL_h :: switchcaseIL_t*{switchcaseIL_t <- switchcaseIL_t*}, switchlabel_h :: switchlabel_t*{switchlabel_t <- switchlabel_t*})
      -- if switchcase*{switchcase <- switchcase*} matches _ :: _
      -- let switchcase_h :: switchcase_t*{switchcase_t <- switchcase_t*} = switchcase*{switchcase <- switchcase*}
      -- let b_last = (switchcase_t*{switchcase_t <- switchcase_t*} = [])
      -- Switch_tbl_case_ok: `%%%%%|-%:%%%`(p, C, f, id_t, b_last, switchcase_h, f', switchcaseIL_h, switchlabel_h)
      -- Switch_tbl_cases_ok: `%%%%|-%:%%%`(p, C, f', id_t, switchcase_t*{switchcase_t <- switchcase_t*}, f'', switchcaseIL_t*{switchcaseIL_t <- switchcaseIL_t*}, switchlabel_t*{switchlabel_t <- switchlabel_t*})

;; ../../../../spec/4f-typing-stmt.watsup:113.1-115.29
relation Switch_gen_label_ok: `%%%%|-%:%`(cursor, context, typ, bool, switchlabel, switchlabelIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:117.1-121.48
   rule exprl: `%%%%|-%:%`(p, C, typ_s, b_last, switchlabel, `ExprL%`_switchlabelIL(exprIL'))
      -- if switchlabel matches `ExprL%`
      -- let `ExprL%`_switchlabel(expr) = switchlabel
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_s)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}

   ;; ../../../../spec/4f-typing-stmt.watsup:123.1-124.40
   rule defaultl: `%%%%|-%:%`(p, C, typ_s, bool, switchlabel, `DefaultL`_switchlabelIL())
      -- if (bool = true)
      -- if switchlabel matches `DefaultL`

;; ../../../../spec/4f-typing-stmt.watsup:127.1-130.32
relation Switch_gen_case_ok: `%%%%%|-%:%%%`(cursor, context, flow, typ, bool, switchcase, flow, switchcaseIL, switchlabel)

   ;; ../../../../spec/4f-typing-stmt.watsup:132.1-137.53
   rule matchc: `%%%%%|-%:%%%`(p, C, f, typ_s, b_last, switchcase, f', `MatchC%%`_switchcaseIL(switchlabelIL, blockIL), switchlabel)
      -- if switchcase matches `MatchC%%`
      -- let `MatchC%%`_switchcase(switchlabel, block) = switchcase
      -- Switch_gen_label_ok: `%%%%|-%:%`(p, C, typ_s, b_last, switchlabel, switchlabelIL)
      -- Block_ok: `%%%%|-%:%%%`(p, C, f, `NOINIT`_blkctxt(), block, C', f', blockIL)

   ;; ../../../../spec/4f-typing-stmt.watsup:139.1-143.54
   rule fallc: `%%%%%|-%:%%%`(p, C, f, typ_s, b_last, switchcase, f, `FallC%`_switchcaseIL(switchlabelIL), switchlabel)
      -- if switchcase matches `FallC%`
      -- let `FallC%`_switchcase(switchlabel) = switchcase
      -- Switch_gen_label_ok: `%%%%|-%:%`(p, C, typ_s, b_last, switchlabel, switchlabelIL)

;; ../../../../spec/4f-typing-stmt.watsup:146.1-149.29
relation Switch_gen_cases_ok: `%%%%|-%:%%%`(cursor, context, flow, typ, switchcase*, flow, switchcaseIL*, switchlabel*)

   ;; ../../../../spec/4f-typing-stmt.watsup:151.1-152.33
   rule empty: `%%%%|-%:%%%`(p, C, f, typ_s, switchcase*{switchcase <- switchcase*}, f, [], [])
      -- if switchcase*{switchcase <- switchcase*} matches []

   ;; ../../../../spec/4f-typing-stmt.watsup:154.1-164.57
   rule seq: `%%%%|-%:%%%`(p, C, f, typ_s, switchcase*{switchcase <- switchcase*}, f'', switchcaseIL_h :: switchcaseIL_t*{switchcaseIL_t <- switchcaseIL_t*}, switchlabel_h :: switchlabel_t*{switchlabel_t <- switchlabel_t*})
      -- if switchcase*{switchcase <- switchcase*} matches _ :: _
      -- let switchcase_h :: switchcase_t*{switchcase_t <- switchcase_t*} = switchcase*{switchcase <- switchcase*}
      -- let b_last = (switchcase_t*{switchcase_t <- switchcase_t*} = [])
      -- Switch_gen_case_ok: `%%%%%|-%:%%%`(p, C, f, typ_s, b_last, switchcase_h, f', switchcaseIL_h, switchlabel_h)
      -- Switch_gen_cases_ok: `%%%%|-%:%%%`(p, C, f', typ_s, switchcase_t*{switchcase_t <- switchcase_t*}, f'', switchcaseIL_t*{switchcaseIL_t <- switchcaseIL_t*}, switchlabel_t*{switchlabel_t <- switchlabel_t*})

;; ../../../../spec/4g-typing-decl.watsup:89.1-91.29
relation Inst_init_decl_ok: `%%%%|-%:%%%`(cursor, context, frame, fdenv, decl, frame, fdenv, declIL)

   ;; ../../../../spec/4g-typing-decl.watsup:93.1-99.58
   rule instd: `%%%%|-%:%%%`(p, C, frame, fdenv, decl', frame', fdenv, declIL)
      -- if decl' matches `InstD%%%%%`
      -- let `InstD%%%%%`_decl(id', name, targ*{targ <- targ*}, arg*{arg <- arg*}, decl*{decl <- decl*}) = decl'
      -- Decl_ok: `%%|-%:%%`(p, C, `InstD%%%%%`_decl(id', name, targ*{targ <- targ*}, arg*{arg <- arg*}, decl*{decl <- decl*}), C', declIL)
      -- let styp?{styp <- styp?} = $find_styp(p, C', `CURRENT%`_name(id'))
      -- if styp?{styp <- styp?} matches (_)
      -- let ?(styp') = styp?{styp <- styp?}
      -- let frame' = $update_map<id, styp>(frame, id', styp')

   ;; ../../../../spec/4g-typing-decl.watsup:101.1-129.59
   rule funcd: `%%%%|-%:%%%`(p, C_0, frame, fdenv, decl, frame, fdenv', `FuncD%%%%%%`_declIL(id, typ_r, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}, blockIL))
      -- if decl matches `FuncD%%%%%`
      -- let `FuncD%%%%%`_decl(id, type_r, tparam*{tparam <- tparam*}, param*{param <- param*}, block) = decl
      -- let fid = $to_fid(id, param*{param <- param*})
      -- let C_1 = $set_blockkind(C_0, `EXTERN`_bkind())
      -- let C_2 = C_1[BLOCK.FRAME = frame]
      -- let C_3 = $add_tparams(`LOCAL`_cursor(), C_2, tparam*{tparam <- tparam*})
      -- Type_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_3, type_r, typ_r, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- let C_4 = $set_localkind(C_3, `EXTERNABSTRACTMETHOD%`_lkind(typ_r))
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_4, param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let C_5 = $add_params(`LOCAL`_cursor(), C_4, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- let C_6 = $add_tparams(`LOCAL`_cursor(), C_5, tparam_hidden*{tparam_hidden <- tparam_hidden*})
      -- Block_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C_6, `CONT`_flow(), `INIT`_blkctxt(), block, C_7, f, blockIL)
      -- if ((f = `RET`_flow()) \/ (typ_r = `VoidT`_primtyp() as typ))
      -- let fd = `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ExternMethodT%%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*, typ_r)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(p, C_0), fd) holds
      -- let fdenv' = $update_map<fid, funcdef>(fdenv, fid, fd)

;; ../../../../spec/4g-typing-decl.watsup:132.1-134.26
relation Inst_init_decls_ok: `%%%|-%:%%%`(context, frame, fdenv, decl*, frame, fdenv, declIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:136.1-137.41
   rule nil: `%%%|-%:%%%`(C, frame, fdenv, decl*{decl <- decl*}, frame, fdenv, [])
      -- if decl*{decl <- decl*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:139.1-145.61
   rule cons: `%%%|-%:%%%`(C, frame, fdenv, decl*{decl <- decl*}, frame'', fdenv'', declIL_h :: declIL_t*{declIL_t <- declIL_t*})
      -- if decl*{decl <- decl*} matches _ :: _
      -- let decl_h :: decl_t*{decl_t <- decl_t*} = decl*{decl <- decl*}
      -- Inst_init_decl_ok: `%%%%|-%:%%%`(`GLOBAL`_cursor(), C, frame, fdenv, decl_h, frame', fdenv', declIL_h)
      -- Inst_init_decls_ok: `%%%|-%:%%%`(C, frame', fdenv', decl_t*{decl_t <- decl_t*}, frame'', fdenv'', declIL_t*{declIL_t <- declIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:148.1-148.75
def $update_fdenv_extern(fdenv, theta, fid*, funcdef*) : map<fid, funcdef> =

   ;; ../../../../spec/4g-typing-decl.watsup:150.1-150.65
   clause 0(fdenv_ext, theta, fid*{fid <- fid*}, funcdef*{funcdef <- funcdef*}) = fdenv_ext
      -- if fid*{fid <- fid*} matches []
      -- if funcdef*{funcdef <- funcdef*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:151.1-159.72
   clause 1(fdenv_ext, theta, fid'*{fid' <- fid'*}, funcdef*{funcdef <- funcdef*}) = $update_fdenv_extern(fdenv_ext', theta, fid_t*{fid_t <- fid_t*}, fd_t*{fd_t <- fd_t*})
      -- if fid'*{fid' <- fid'*} matches _ :: _
      -- let fid_h :: fid_t*{fid_t <- fid_t*} = fid'*{fid' <- fid'*}
      -- if funcdef*{funcdef <- funcdef*} matches _ :: _
      -- let fd_h :: fd_t*{fd_t <- fd_t*} = funcdef*{funcdef <- funcdef*}
      -- let `%%`_fid(id_h, _(id, bool)*{_(id, bool) <- _(id, bool)*}) = fid_h
      -- let (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} = $find_func_by_name(id_h, fdenv_ext)
      -- if (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?} matches (_)
      -- let ?((fid, fd)) = (fid, funcdef)?{(fid, funcdef) <- (fid, funcdef)?}
      -- let funcdef' = fd
      -- if funcdef' <: polyfuncdef
      -- let `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), functyp) = funcdef' as polyfuncdef
      -- if functyp matches `ExternAbstractMethodT%%`
      -- let `ExternAbstractMethodT%%`_functyp(pt*{pt <- pt*}, typ_r) = functyp
      -- let fd_ext = `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ExternMethodT%%`_functyp(pt*{pt <- pt*}, typ_r)) as funcdef
      -- let fd_ext' = $subst_funcdef(theta, fd_ext)
      -- if FuncDef_alpha: `%~~%`(fd_ext', fd_h) holds
      -- let fdenv_ext' = $update_map<fid, funcdef>(fdenv_ext, fid, fd_ext')

;; ../../../../spec/4g-typing-decl.watsup:319.1-322.32
relation SEnum_field_ok: `%%%%|-%%:%%`(context, id, typ, (member, val)*, member, expr, context, (member, val)*)

   ;; ../../../../spec/4g-typing-decl.watsup:324.1-338.60
   rule : `%%%%|-%%:%%`(C, id_s, typ_s, (member_s, val_s)*{member_s <- member_s*, val_s <- val_s*}, member, expr, C', (member_s', val_s')*{member_s' <- member_s'*, val_s' <- val_s'*})
      -- Expr_ok: `%%|-%:%`(`BLOCK`_cursor(), C, expr, exprIL)
      -- let `(%;%)`_annotIL(_typ, ctk) = $annot(exprIL)
      -- if ctk matches `LCTK`
      -- let exprIL''?{exprIL'' <- exprIL''?} = $coerce_assign(exprIL, typ_s)
      -- if exprIL''?{exprIL'' <- exprIL''?} matches (_)
      -- let ?(exprIL') = exprIL''?{exprIL'' <- exprIL''?}
      -- Eval_static: `%%|-%~>%`(`BLOCK`_cursor(), C, exprIL', val_e)
      -- let val = `SEnumFieldV%%%`_val(id_s, member, val_e)
      -- let member_s'*{member_s' <- member_s'*} = member_s*{member_s <- member_s*} ++ [member]
      -- let val_s'*{val_s' <- val_s'*} = val_s*{val_s <- val_s*} ++ [val]
      -- let typ_f = `SEnumT%%%`_datatyp(id_s, typ_s, (member_s', val_s')*{member_s' <- member_s'*, val_s' <- val_s'*}) as typ
      -- let C' = $add_styp(`BLOCK`_cursor(), C, member, `%%%%`_styp(typ_f, `NO`_dir(), `LCTK`_ctk(), ?(val)))

;; ../../../../spec/4g-typing-decl.watsup:341.1-344.29
relation SEnum_fields_ok: `%%%%|-%:%%`(context, id, typ, (member, val)*, (member, expr)*, context, (member, val)*)

   ;; ../../../../spec/4g-typing-decl.watsup:346.1-347.52
   rule nil: `%%%%|-%:%%`(C, id, typ, (member, val)*{member <- member*, val <- val*}, (member, expr)*{(member, expr) <- (member, expr)*}, C, (member, val)*{member <- member*, val <- val*})
      -- if (member, expr)*{(member, expr) <- (member, expr)*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:349.1-357.81
   rule cons: `%%%%|-%:%%`(C, id, typ, (member, val)*{member <- member*, val <- val*}, (member, expr)*{(member, expr) <- (member, expr)*}, C'', (member'', val'')*{member'' <- member''*, val'' <- val''*})
      -- if (member, expr)*{(member, expr) <- (member, expr)*} matches _ :: _
      -- let (member_h, expr_h) :: (member_t, expr_t)*{expr_t <- expr_t*, member_t <- member_t*} = (member, expr)*{(member, expr) <- (member, expr)*}
      -- SEnum_field_ok: `%%%%|-%%:%%`(C, id, typ, (member, val)*{member <- member*, val <- val*}, member_h, expr_h, C', (member', val')*{member' <- member'*, val' <- val'*})
      -- SEnum_fields_ok: `%%%%|-%:%%`(C', id, typ, (member', val')*{member' <- member'*, val' <- val'*}, (member_t, expr_t)*{expr_t <- expr_t*, member_t <- member_t*}, C'', (member'', val'')*{member'' <- member''*, val'' <- val''*})

;; ../../../../spec/4g-typing-decl.watsup:596.1-596.49
def $split_methods(method*) : (method*, method*) =

   ;; ../../../../spec/4g-typing-decl.watsup:598.1-598.37
   clause 0(method*{method <- method*}) = ([], [])
      -- if method*{method <- method*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:599.1-601.59
   clause 1(method*{method <- method*}) = (method_h :: method_c*{method_c <- method_c*}, method_m*{method_m <- method_m*})
      -- if method*{method <- method*} matches _ :: _
      -- let method_h :: method_t*{method_t <- method_t*} = method*{method <- method*}
      -- let method' = method_h
      -- if method' matches `ExternConsM%%`
      -- let `ExternConsM%%`_method(_id, _cparam*{_cparam <- _cparam*}) = method'
      -- let (method_c*{method_c <- method_c*}, method_m*{method_m <- method_m*}) = $split_methods(method_t*{method_t <- method_t*})

   ;; ../../../../spec/4g-typing-decl.watsup:602.1-604.59
   clause 2(method*{method <- method*}) = (method_c*{method_c <- method_c*}, method_h :: method_m*{method_m <- method_m*})
      -- if method*{method <- method*} matches _ :: _
      -- let method_h :: method_t*{method_t <- method_t*} = method*{method <- method*}
      -- let method' = method_h
      -- if method' matches `ExternM%%%%`
      -- let `ExternM%%%%`_method(_id, _type, _tparam*{_tparam <- _tparam*}, _param*{_param <- _param*}) = method'
      -- let (method_c*{method_c <- method_c*}, method_m*{method_m <- method_m*}) = $split_methods(method_t*{method_t <- method_t*})

   ;; ../../../../spec/4g-typing-decl.watsup:605.1-607.59
   clause 3(method*{method <- method*}) = (method_c*{method_c <- method_c*}, method_h :: method_m*{method_m <- method_m*})
      -- if method*{method <- method*} matches _ :: _
      -- let method_h :: method_t*{method_t <- method_t*} = method*{method <- method*}
      -- let method' = method_h
      -- if method' matches `ExternAbstractM%%%%`
      -- let `ExternAbstractM%%%%`_method(_id, _type, _tparam*{_tparam <- _tparam*}, _param*{_param <- _param*}) = method'
      -- let (method_c*{method_c <- method_c*}, method_m*{method_m <- method_m*}) = $split_methods(method_t*{method_t <- method_t*})

;; ../../../../spec/4g-typing-decl.watsup:610.1-612.23
relation Method_ok: `%%|-%:%%`(context, id, method, context, methodIL)

   ;; ../../../../spec/4g-typing-decl.watsup:614.1-630.46
   rule externconsm: `%%|-%:%%`(C, id_e, method, C', `ExternConsM%%%`_methodIL(id_e, tparam_hidden*{tparam_hidden <- tparam_hidden*}, cparamIL*{cparamIL <- cparamIL*}))
      -- if method matches `ExternConsM%%`
      -- let `ExternConsM%%`_method(id_e', cparam*{cparam <- cparam*}) = method
      -- if (id_e = id_e')
      -- let cid = $to_fid(id_e, cparam*{cparam <- cparam*})
      -- (CParam_ok: `%%|-%:%%`(`BLOCK`_cursor(), C, cparam, cparamIL, tid_fresh_c*{tid_fresh_c <- tid_fresh_c*}))*{cparam <- cparam*, cparamIL <- cparamIL*, tid_fresh_c* <- tid_fresh_c**}
      -- (let `%%%%`_paramIL(id_c, dir_c, typ_c, exprIL_c?{exprIL_c <- exprIL_c?}) = cparamIL)*{cparamIL <- cparamIL*, dir_c <- dir_c*, exprIL_c? <- exprIL_c?*, id_c <- id_c*, typ_c <- typ_c*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_c*{tid_fresh_c <- tid_fresh_c*}*{tid_fresh_c* <- tid_fresh_c**})
      -- let typdef'?{typdef' <- typdef'?} = $find_typdef(`GLOBAL`_cursor(), C, `CURRENT%`_name(id_e))
      -- if typdef'?{typdef' <- typdef'?} matches (_)
      -- let ?(typdef) = typdef'?{typdef' <- typdef'?}
      -- if typdef <: polytypdef
      -- let `PolyD%->%`_polytypdef((tparam_e*{tparam_e <- tparam_e*}, tparam*{tparam <- tparam*}), typ_e) = typdef as polytypdef
      -- if tparam*{tparam <- tparam*} matches []
      -- let typ = `SpecT%%`_abstyp(`PolyD%->%`_polytypdef((tparam_e*{tparam_e <- tparam_e*}, []), typ_e), `VarT%`_abstyp(tparam_e) as typ*{tparam_e <- tparam_e*}) as typ
      -- let cd = `ConsD%->%`_consdef((tparam_e*{tparam_e <- tparam_e*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ConsT%%`_constyp(`%%%%`_paramtyp(id_c, dir_c, typ_c, exprIL_c?{exprIL_c <- exprIL_c?})*{dir_c <- dir_c*, exprIL_c? <- exprIL_c?*, id_c <- id_c*, typ_c <- typ_c*}, typ))
      -- if ConsDef_wf: `%|-%`($bound_tids(`BLOCK`_cursor(), C), cd) holds
      -- let C' = $add_consdef(`GLOBAL`_cursor(), C, cid, cd)

   ;; ../../../../spec/4g-typing-decl.watsup:632.1-654.61
   rule externabstractm: `%%|-%:%%`(C_0, id_e, method, C_4, `ExternAbstractM%%%%%`_methodIL(id, typ_r, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}))
      -- if method matches `ExternAbstractM%%%%`
      -- let `ExternAbstractM%%%%`_method(id, type_r, tparam*{tparam <- tparam*}, param*{param <- param*}) = method
      -- if (id_e =/= id)
      -- let fid = $to_fid(id, param*{param <- param*})
      -- let C_1 = $add_typdefs(`LOCAL`_cursor(), C_0, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- Type_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, type_r, typ_r, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- let C_2 = $set_localkind(C_1, `EXTERNABSTRACTMETHOD%`_lkind(typ_r))
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let C_3 = $add_params(`LOCAL`_cursor(), C_2, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- let fd = `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ExternAbstractMethodT%%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*, typ_r)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(`BLOCK`_cursor(), C_0), fd) holds
      -- let C_4 = $add_funcdef_non_overload(`BLOCK`_cursor(), C_0, fid, fd)

   ;; ../../../../spec/4g-typing-decl.watsup:656.1-679.48
   rule externm: `%%|-%:%%`(C_0, id_e, method, C_4, `ExternM%%%%%`_methodIL(id, typ_r, tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}, paramIL*{paramIL <- paramIL*}))
      -- if method matches `ExternM%%%%`
      -- let `ExternM%%%%`_method(id, type_r, tparam*{tparam <- tparam*}, param*{param <- param*}) = method
      -- if (id_e =/= id)
      -- let fid = $to_fid(id, param*{param <- param*})
      -- let C_1 = $add_typdefs(`LOCAL`_cursor(), C_0, tparam*{tparam <- tparam*}, `MonoD%`_monotypdef(`VarT%`_abstyp(tparam) as typ) as typdef*{tparam <- tparam*})
      -- Type_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_1, type_r, typ_r, tid*{tid <- tid*})
      -- if tid*{tid <- tid*} matches []
      -- let C_2 = $set_localkind(C_1, `EXTERNMETHOD`_lkind())
      -- (Param_ok: `%%|-%:%%`(`LOCAL`_cursor(), C_2, param, paramIL, tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}))*{param <- param*, paramIL <- paramIL*, tid_fresh_p* <- tid_fresh_p**}
      -- (let `%%%%`_paramIL(id_p, dir_p, typ_p, exprIL_p?{exprIL_p <- exprIL_p?}) = paramIL)*{dir_p <- dir_p*, exprIL_p? <- exprIL_p?*, id_p <- id_p*, paramIL <- paramIL*, typ_p <- typ_p*}
      -- let tparam_hidden*{tparam_hidden <- tparam_hidden*} = $concat_<tid>(tid_fresh_p*{tid_fresh_p <- tid_fresh_p*}*{tid_fresh_p* <- tid_fresh_p**})
      -- let C_3 = $add_params(`LOCAL`_cursor(), C_2, paramIL*{paramIL <- paramIL*} as paramtyp*)
      -- let fd = `PolyFD%->%`_polyfuncdef((tparam*{tparam <- tparam*}, tparam_hidden*{tparam_hidden <- tparam_hidden*}), `ExternMethodT%%`_functyp(paramIL*{paramIL <- paramIL*} as paramtyp*, typ_r)) as funcdef
      -- if FuncDef_wf: `%|-%`($bound_tids(`BLOCK`_cursor(), C_0), fd) holds
      -- let C_4 = $add_funcdef(`BLOCK`_cursor(), C_0, fid, fd)

;; ../../../../spec/4g-typing-decl.watsup:682.1-684.23
relation Methods_ok: `%%|-%:%%`(context, id, method*, context, methodIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:686.1-687.24
   rule nil: `%%|-%:%%`(C, id_e, method*{method <- method*}, C, [])
      -- if method*{method <- method*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:689.1-692.56
   rule cons: `%%|-%:%%`(C, id_e, method*{method <- method*}, C'', methodIL_h :: methodIL_t*{methodIL_t <- methodIL_t*})
      -- if method*{method <- method*} matches _ :: _
      -- let method_h :: method_t*{method_t <- method_t*} = method*{method <- method*}
      -- Method_ok: `%%|-%:%%`(C, id_e, method_h, C', methodIL_h)
      -- Methods_ok: `%%|-%:%%`(C', id_e, method_t*{method_t <- method_t*}, C'', methodIL_t*{methodIL_t <- methodIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:758.1-760.20
relation ParserState_ok: `%|-%:%`(context, parserstate, parserstateIL)

   ;; ../../../../spec/4g-typing-decl.watsup:762.1-764.60
   rule : `%|-%:%`(C, `%%`_parserstate(statelabel, block), `%%`_parserstateIL(statelabel, blockIL))
      -- Block_ok: `%%%%|-%:%%%`(`LOCAL`_cursor(), C, `CONT`_flow(), `INIT`_blkctxt(), block, C', flow, blockIL)
      -- if flow matches `CONT`

;; ../../../../spec/4g-typing-decl.watsup:817.1-819.26
relation Table_key_ok: `%%%|-%:%%`(cursor, context, tblctx, tblkey, tblctx, tblkeyIL)

   ;; ../../../../spec/4g-typing-decl.watsup:855.1-868.55
   rule : `%%%|-%:%%`(p, C, tblctx, `%%`_tblkey(expr, matchkind), tblctx'', `%%`_tblkeyIL(exprIL, matchkind))
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if Type_wf: `%|-%`($bound_tids(p, C), `SetT%`_synthtyp(typ) as typ) holds
      -- if (?(`MatchKindV%`_val(matchkind)) = $find_val(p, C, `CURRENT%`_name(matchkind)))
      -- if $check_table_key(matchkind, typ)
      -- let tblctx' = $update_mode(matchkind, typ, tblctx)
      -- let tblctx'' = $add_key((typ, matchkind), tblctx')

;; ../../../../spec/4g-typing-decl.watsup:821.1-821.44
def $check_table_key(matchkind, typ) : bool =

   ;; ../../../../spec/4g-typing-decl.watsup:823.1-829.25
   clause 0(matchkind, typ) = true
      -- if ((matchkind = "exact") \/ (matchkind = "optional"))
      -- let typ' = $canon_typ(typ)
      -- if (((((($is_errt(typ') \/ $is_boolt(typ')) \/ $is_intt(typ')) \/ $is_fintt(typ')) \/ $is_fbitt(typ')) \/ $is_vbitt(typ')) \/ $is_enumt(typ'))

   ;; ../../../../spec/4g-typing-decl.watsup:831.1-833.42
   clause 1(matchkind, typ) = $check_table_key(matchkind, typ')
      -- if ((matchkind = "exact") \/ (matchkind = "optional"))
      -- let typ'' = $canon_typ(typ)
      -- if typ'' <: datatyp
      -- let datatyp = typ'' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ', _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/4g-typing-decl.watsup:835.1-837.38
   clause 2(matchkind, typ) = $check_table_key(matchkind, typ')
      -- if ((matchkind = "exact") \/ (matchkind = "optional"))
      -- let typ'' = $canon_typ(typ)
      -- if typ'' <: datatyp
      -- let datatyp = typ'' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ') = datatyp

   ;; ../../../../spec/4g-typing-decl.watsup:839.1-842.61
   clause 3(matchkind, typ) = true
      -- if (((matchkind = "lpm") \/ (matchkind = "ternary")) \/ (matchkind = "range"))
      -- let typ' = $canon_typ(typ)
      -- if (($is_intt(typ') \/ $is_fintt(typ')) \/ $is_fbitt(typ'))

   ;; ../../../../spec/4g-typing-decl.watsup:844.1-846.42
   clause 4(matchkind, typ) = $check_table_key(matchkind, typ')
      -- if (((matchkind = "lpm") \/ (matchkind = "ternary")) \/ (matchkind = "range"))
      -- let typ'' = $canon_typ(typ)
      -- if typ'' <: datatyp
      -- let datatyp = typ'' as datatyp
      -- if datatyp matches `SEnumT%%%`
      -- let `SEnumT%%%`_datatyp(_id, typ', _(member, val)*{_(member, val) <- _(member, val)*}) = datatyp

   ;; ../../../../spec/4g-typing-decl.watsup:848.1-850.38
   clause 5(matchkind, typ) = $check_table_key(matchkind, typ')
      -- if (((matchkind = "lpm") \/ (matchkind = "ternary")) \/ (matchkind = "range"))
      -- let typ'' = $canon_typ(typ)
      -- if typ'' <: datatyp
      -- let datatyp = typ'' as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(_id, typ') = datatyp

   ;; ../../../../spec/4g-typing-decl.watsup:852.1-853.15
   clause 6(matchkind, typ) = false
      -- otherwise

;; ../../../../spec/4g-typing-decl.watsup:871.1-873.26
relation Table_keys_ok: `%%%|-%:%%`(cursor, context, tblctx, tblkeyprop, tblctx, tblkeypropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:875.1-876.33
   rule nil: `%%%|-%:%%`(p, C, tblctx, tblkey*{tblkey <- tblkey*}, tblctx, [])
      -- if tblkey*{tblkey <- tblkey*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:878.1-881.68
   rule cons: `%%%|-%:%%`(p, C, tblctx, tblkey*{tblkey <- tblkey*}, tblctx'', tblkeyIL_h :: tblkeyIL_t*{tblkeyIL_t <- tblkeyIL_t*})
      -- if tblkey*{tblkey <- tblkey*} matches _ :: _
      -- let tblkey_h :: tblkey_t*{tblkey_t <- tblkey_t*} = tblkey*{tblkey <- tblkey*}
      -- Table_key_ok: `%%%|-%:%%`(p, C, tblctx, tblkey_h, tblctx', tblkeyIL_h)
      -- Table_keys_ok: `%%%|-%:%%`(p, C, tblctx', tblkey_t*{tblkey_t <- tblkey_t*}, tblctx'', tblkeyIL_t*{tblkeyIL_t <- tblkeyIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:887.1-889.26
relation Call_action_partial_ok: `%%|-%%:%%%`(cursor, context, paramtyp*, (argIL, typ)*, paramIL*, paramIL*, argIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:904.1-910.80
   rule : `%%|-%%:%%%`(p, C, pt*{pt <- pt*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*}, paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}, argIL'*{argIL' <- argIL'*})
      -- let (paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}) = $split_directionless_params(pt*{pt <- pt*} as paramIL*)
      -- if (|paramIL_d*{paramIL_d <- paramIL_d*}| = |argIL*{argIL <- argIL*}|)
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `ACT`_actctxt(), paramIL_d as paramtyp, (argIL, typ_a), argIL'))*{argIL <- argIL*, argIL' <- argIL'*, paramIL_d <- paramIL_d*, typ_a <- typ_a*}

;; ../../../../spec/4g-typing-decl.watsup:891.1-891.65
def $split_directionless_params(paramIL*) : (paramIL*, paramIL*) =

   ;; ../../../../spec/4g-typing-decl.watsup:893.1-893.50
   clause 0(paramIL*{paramIL <- paramIL*}) = ([], [])
      -- if paramIL*{paramIL <- paramIL*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:894.1-897.75
   clause 1(paramIL*{paramIL <- paramIL*}) = (paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_h :: paramIL_c*{paramIL_c <- paramIL_c*})
      -- if paramIL*{paramIL <- paramIL*} matches _ :: _
      -- let paramIL_h :: paramIL_t*{paramIL_t <- paramIL_t*} = paramIL*{paramIL <- paramIL*}
      -- let `%%%%`_paramIL(_idIL, dir, _typeIL, _exprIL?{_exprIL <- _exprIL?}) = paramIL_h
      -- if dir matches `NO`
      -- let (paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}) = $split_directionless_params(paramIL_t*{paramIL_t <- paramIL_t*})

   ;; ../../../../spec/4g-typing-decl.watsup:898.1-902.75
   clause 2(paramIL*{paramIL <- paramIL*}) = (paramIL_h :: paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*})
      -- if paramIL*{paramIL <- paramIL*} matches _ :: _
      -- let paramIL_h :: paramIL_t*{paramIL_t <- paramIL_t*} = paramIL*{paramIL <- paramIL*}
      -- let `%%%%`_paramIL(_idIL, dir, _typeIL, _exprIL?{_exprIL <- _exprIL?}) = paramIL_h
      -- if (dir =/= `NO`_dir())
      -- let (paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}) = $split_directionless_params(paramIL_t*{paramIL_t <- paramIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:913.1-915.26
relation Table_action_ok: `%%%|-%:%%`(cursor, context, tblctx, tblaction, tblctx, tblactionIL)

   ;; ../../../../spec/4g-typing-decl.watsup:917.1-925.59
   rule : `%%%|-%:%%`(p, C, tblctx, `%%`_tblaction(name, arg*{arg <- arg*}), tblctx', `%%%%`_tblactionIL(name, argIL'*{argIL' <- argIL'*}, paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}))
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- let funcdef = $find_funcdef_by_name(p, C, name)
      -- if funcdef <: monofuncdef
      -- let `MonoFD%`_monofuncdef(functyp) = funcdef as monofuncdef
      -- if functyp matches `ActionT%`
      -- let `ActionT%`_functyp(pt*{pt <- pt*}) = functyp
      -- Call_action_partial_ok: `%%|-%%:%%%`(p, C, pt*{pt <- pt*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*}, paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}, argIL'*{argIL' <- argIL'*})
      -- let tblctx' = $add_action((name, pt*{pt <- pt*}, argIL*{argIL <- argIL*}), tblctx)

;; ../../../../spec/4g-typing-decl.watsup:928.1-931.26
relation Table_actions_ok: `%%%|-%:%%`(cursor, context, tblctx, tblactionprop, tblctx, tblactionpropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:933.1-934.33
   rule nil: `%%%|-%:%%`(p, C, tblctx, tblaction*{tblaction <- tblaction*}, tblctx, [])
      -- if tblaction*{tblaction <- tblaction*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:936.1-945.32
   rule cons: `%%%|-%:%%`(p, C, tblctx, tblaction*{tblaction <- tblaction*}, tblctx'', tblactionIL_h :: tblactionIL_t*{tblactionIL_t <- tblactionIL_t*})
      -- if tblaction*{tblaction <- tblaction*} matches _ :: _
      -- let tblaction_h :: tblaction_t*{tblaction_t <- tblaction_t*} = tblaction*{tblaction <- tblaction*}
      -- Table_action_ok: `%%%|-%:%%`(p, C, tblctx, tblaction_h, tblctx', tblactionIL_h)
      -- Table_actions_ok: `%%%|-%:%%`(p, C, tblctx', tblaction_t*{tblaction_t <- tblaction_t*}, tblctx'', tblactionIL_t*{tblactionIL_t <- tblactionIL_t*})
      -- let tblactionIL*{tblactionIL <- tblactionIL*} = tblactionIL_h :: tblactionIL_t*{tblactionIL_t <- tblactionIL_t*}
      -- (let `%%%%`_tblactionIL(name, argIL*{argIL <- argIL*}, paramIL_d*{paramIL_d <- paramIL_d*}, paramIL_c*{paramIL_c <- paramIL_c*}) = tblactionIL)*{argIL* <- argIL**, name <- name*, paramIL_c* <- paramIL_c**, paramIL_d* <- paramIL_d**, tblactionIL <- tblactionIL*}
      -- if $distinct_<name>(name*{name <- name*})

;; ../../../../spec/4g-typing-decl.watsup:951.1-954.29
relation Table_entry_keyset_ok: `%%%|-%%:%%`(cursor, context, tblctx, key, keyset, tblstate, keysetIL)

   ;; ../../../../spec/4g-typing-decl.watsup:956.1-970.28
   rule exprk-lpm-maske: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, tblstate_e, `ExprK%`_keysetIL(exprIL))
      -- if (text = "lpm")
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if expr matches `MaskE%%`
      -- let `MaskE%%`_expr(expr_b, expr_m) = expr
      -- Expr_ok: `%%|-%:%`(p, C, `MaskE%%`_expr(expr_b, expr_m), exprIL)
      -- let `(%;%)`_annotIL(typ', _ctk) = $annot(exprIL)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- let exprIL' = exprIL
      -- if exprIL' matches `MaskE%%%`
      -- let `MaskE%%%`_exprIL(exprIL_b, exprIL_m, _annotIL) = exprIL'
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(n_w) = mode
      -- Eval_static: `%%|-%~>%`(p, C, exprIL_m, val_m)
      -- let i_m = $get_num(val_m)
      -- let tblstate_e = $get_lpm_prefix(`FBitV%%`_val(n_w, $to_bitstr(n_w as int, i_m)))
      -- if Sub_impl: `%<<%`(typ, typ_k) holds

   ;; ../../../../spec/4g-typing-decl.watsup:972.1-985.63
   rule exprk-lpm-else: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `LPM%`_tblstate(n_w), `ExprK%`_keysetIL(exprIL'))
      -- if (text = "lpm")
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if ~($is_maske(expr) \/ $is_rangee(expr))
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL)
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(n_w) = mode
      -- if Sub_impl: `%<<%`(typ, typ_k) holds
      -- let exprIL' = `CastE%%%`_exprIL(`SetT%`_synthtyp(typ_k) as typeIL, exprIL, `(%;%)`_annotIL(`SetT%`_synthtyp(typ_k) as typ, ctk))

   ;; ../../../../spec/4g-typing-decl.watsup:987.1-992.28
   rule exprk-ternary-maske: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `NOLPM`_tblstate(), `ExprK%`_keysetIL(exprIL))
      -- if (text = "ternary")
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if expr matches `MaskE%%`
      -- let `MaskE%%`_expr(expr_b, expr_m) = expr
      -- Expr_ok: `%%|-%:%`(p, C, `MaskE%%`_expr(expr_b, expr_m), exprIL)
      -- let `(%;%)`_annotIL(typ', _ctk) = $annot(exprIL)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- if Sub_impl: `%<<%`(typ, typ_k) holds

   ;; ../../../../spec/4g-typing-decl.watsup:994.1-1005.63
   rule exprk-ternary-else: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `NOLPM`_tblstate(), `ExprK%`_keysetIL(exprIL'))
      -- if (text = "ternary")
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if ~($is_maske(expr) \/ $is_rangee(expr))
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL)
      -- if Sub_impl: `%<<%`(typ, typ_k) holds
      -- let exprIL' = `CastE%%%`_exprIL(`SetT%`_synthtyp(typ_k) as typeIL, exprIL, `(%;%)`_annotIL(`SetT%`_synthtyp(typ_k) as typ, ctk))

   ;; ../../../../spec/4g-typing-decl.watsup:1007.1-1012.28
   rule exprk-range-rangee: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `NOLPM`_tblstate(), `ExprK%`_keysetIL(exprIL))
      -- if (text = "range")
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if expr matches `RangeE%%`
      -- let `RangeE%%`_expr(expr_l, expr_r) = expr
      -- Expr_ok: `%%|-%:%`(p, C, `RangeE%%`_expr(expr_l, expr_r), exprIL)
      -- let `(%;%)`_annotIL(typ', _ctk) = $annot(exprIL)
      -- if typ' <: synthtyp
      -- let synthtyp = typ' as synthtyp
      -- if synthtyp matches `SetT%`
      -- let `SetT%`_synthtyp(typ) = synthtyp
      -- if Sub_impl: `%<<%`(typ, typ_k) holds

   ;; ../../../../spec/4g-typing-decl.watsup:1014.1-1025.63
   rule exprk-range-else: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `NOLPM`_tblstate(), `ExprK%`_keysetIL(exprIL'))
      -- if (text = "range")
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if ~($is_maske(expr) \/ $is_rangee(expr))
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL)
      -- if Sub_impl: `%<<%`(typ, typ_k) holds
      -- let exprIL' = `CastE%%%`_exprIL(`SetT%`_synthtyp(typ_k) as typeIL, exprIL, `(%;%)`_annotIL(`SetT%`_synthtyp(typ_k) as typ, ctk))

   ;; ../../../../spec/4g-typing-decl.watsup:1027.1-1039.63
   rule exprk-else: `%%%|-%%:%%`(p, C, tblctx, (typ_k, matchkind), keyset, `NOLPM`_tblstate(), `ExprK%`_keysetIL(exprIL'))
      -- if keyset matches `ExprK%`
      -- let `ExprK%`_keyset(expr) = keyset
      -- if (((matchkind =/= "lpm") /\ (matchkind =/= "ternary")) /\ (matchkind =/= "range"))
      -- if ~($is_maske(expr) \/ $is_rangee(expr))
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, ctk) = $annot(exprIL)
      -- if Sub_impl: `%<<%`(typ, typ_k) holds
      -- let exprIL' = `CastE%%%`_exprIL(`SetT%`_synthtyp(typ_k) as typeIL, exprIL, `(%;%)`_annotIL(`SetT%`_synthtyp(typ_k) as typ, ctk))

   ;; ../../../../spec/4g-typing-decl.watsup:1041.1-1043.35
   rule defaultk-lpm: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `LPM%`_tblstate(n_w), `DefaultK`_keysetIL())
      -- if (text = "lpm")
      -- if keyset matches `DefaultK`
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(n_w) = mode

   ;; ../../../../spec/4g-typing-decl.watsup:1045.1-1047.30
   rule defaultk-else: `%%%|-%%:%%`(p, C, tblctx, (typ_k, matchkind), keyset, `NOLPM`_tblstate(), `DefaultK`_keysetIL())
      -- if keyset matches `DefaultK`
      -- if (matchkind =/= "exact")

   ;; ../../../../spec/4g-typing-decl.watsup:1049.1-1051.33
   rule anyk-lpm: `%%%|-%%:%%`(p, C, tblctx, (typ_k, text), keyset, `LPM%`_tblstate(0), `AnyK`_keysetIL())
      -- if (text = "lpm")
      -- if keyset matches `AnyK`
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(_nat) = mode

   ;; ../../../../spec/4g-typing-decl.watsup:1053.1-1055.30
   rule defaultk-else: `%%%|-%%:%%`(p, C, tblctx, (typ_k, matchkind), keyset, `NOLPM`_tblstate(), `AnyK`_keysetIL())
      -- if keyset matches `AnyK`
      -- if (matchkind =/= "exact")

;; ../../../../spec/4g-typing-decl.watsup:1058.1-1060.32
relation Table_entry_keysets_state_ok: `%%%%|-%%:%%`(cursor, context, tblctx, tblstate, key*, keyset*, tblstate, keysetIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:1062.1-1063.48
   rule nil: `%%%%|-%%:%%`(p, C, tblctx, tblstate, key*{key <- key*}, keyset*{keyset <- keyset*}, tblstate, [])
      -- if key*{key <- key*} matches []
      -- if keyset*{keyset <- keyset*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:1065.1-1072.73
   rule cons: `%%%%|-%%:%%`(p, C, tblctx, tblstate_0, key*{key <- key*}, keyset*{keyset <- keyset*}, tblstate_3, keysetIL_h :: keysetIL_t*{keysetIL_t <- keysetIL_t*})
      -- if key*{key <- key*} matches _ :: _
      -- let key_h :: key_t*{key_t <- key_t*} = key*{key <- key*}
      -- if keyset*{keyset <- keyset*} matches _ :: _
      -- let keyset_h :: keyset_t*{keyset_t <- keyset_t*} = keyset*{keyset <- keyset*}
      -- Table_entry_keyset_ok: `%%%|-%%:%%`(p, C, tblctx, key_h, keyset_h, tblstate_1, keysetIL_h)
      -- let tblstate_2 = $update_state(tblstate_0, tblstate_1)
      -- Table_entry_keysets_state_ok: `%%%%|-%%:%%`(p, C, tblctx, tblstate_2, key_t*{key_t <- key_t*}, keyset_t*{keyset_t <- keyset_t*}, tblstate_3, keysetIL_t*{keysetIL_t <- keysetIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:1075.1-1077.26
relation Table_entry_keysets_ok: `%%%|-%:%%`(cursor, context, tblctx, keyset*, tblstate, keysetIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:1079.1-1081.35
   rule noprilpm-defaultk: `%%%|-%:%%`(p, C, tblctx, keyset*{keyset <- keyset*}, `LPM%`_tblstate(nat), [`DefaultK`_keysetIL()])
      -- if (keyset*{keyset <- keyset*} = [`DefaultK`_keyset()])
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(nat) = mode

   ;; ../../../../spec/4g-typing-decl.watsup:1083.1-1085.73
   rule else-defaultk: `%%%|-%:%%`(p, C, tblctx, keyset*{keyset <- keyset*}, `NOLPM`_tblstate(), [`DefaultK`_keysetIL()])
      -- if (keyset*{keyset <- keyset*} = [`DefaultK`_keyset()])
      -- if (((tblctx.MODE = `NOPRI`_mode()) \/ (tblctx.MODE = `PRI`_mode())) \/ (tblctx.MODE = `PRILPM`_mode()))

   ;; ../../../../spec/4g-typing-decl.watsup:1087.1-1089.35
   rule noprilpm-anyk: `%%%|-%:%%`(p, C, tblctx, keyset*{keyset <- keyset*}, `LPM%`_tblstate(0), [`AnyK`_keysetIL()])
      -- if (keyset*{keyset <- keyset*} = [`AnyK`_keyset()])
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(nat) = mode

   ;; ../../../../spec/4g-typing-decl.watsup:1091.1-1093.73
   rule else-anyk: `%%%|-%:%%`(p, C, tblctx, keyset*{keyset <- keyset*}, `NOLPM`_tblstate(), [`AnyK`_keysetIL()])
      -- if (keyset*{keyset <- keyset*} = [`AnyK`_keyset()])
      -- if (((tblctx.MODE = `NOPRI`_mode()) \/ (tblctx.MODE = `PRI`_mode())) \/ (tblctx.MODE = `PRILPM`_mode()))

   ;; ../../../../spec/4g-typing-decl.watsup:1095.1-1099.67
   rule others: `%%%|-%:%%`(p, C, tblctx, keyset*{keyset <- keyset*}, tblstate, keysetIL*{keysetIL <- keysetIL*})
      -- if (|tblctx.KEYS| = |keyset*{keyset <- keyset*}|)
      -- Table_entry_keysets_state_ok: `%%%%|-%%:%%`(p, C, tblctx, `NOLPM`_tblstate(), tblctx.KEYS, keyset*{keyset <- keyset*}, tblstate, keysetIL*{keysetIL <- keysetIL*})

;; ../../../../spec/4g-typing-decl.watsup:1102.1-1104.29
relation Call_default_action_ok: `%%|-%%%:%`(cursor, context, paramtyp*, (argIL, typ)*, argIL*, argIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:1116.1-1123.71
   rule : `%%|-%%%:%`(p, C, pt*{pt <- pt*}, (argIL, typ)*{argIL <- argIL*, typ <- typ*}, argIL_a*{argIL_a <- argIL_a*}, argIL'*{argIL' <- argIL'*})
      -- if (|pt*{pt <- pt*}| = |argIL*{argIL <- argIL*}|)
      -- let argIL_d*{argIL_d <- argIL_d*} = $filter_directionless_args(pt*{pt <- pt*}, argIL*{argIL <- argIL*})
      -- (if (argIL_a = argIL_d))*{argIL_a <- argIL_a*, argIL_d <- argIL_d*}
      -- (Call_convention_arg_ok: `%%%|-%~~%:%`(p, C, `ACT`_actctxt(), pt, (argIL, typ), argIL'))*{argIL <- argIL*, argIL' <- argIL'*, pt <- pt*, typ <- typ*}

;; ../../../../spec/4g-typing-decl.watsup:1106.1-1106.59
def $filter_directionless_args(paramtyp*, argIL*) : argIL* =

   ;; ../../../../spec/4g-typing-decl.watsup:1108.1-1108.47
   clause 0(paramtyp*{paramtyp <- paramtyp*}, argIL*{argIL <- argIL*}) = []
      -- if paramtyp*{paramtyp <- paramtyp*} matches []
      -- if argIL*{argIL <- argIL*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:1109.1-1111.33
   clause 1(paramtyp*{paramtyp <- paramtyp*}, argIL*{argIL <- argIL*}) = $filter_directionless_args(pt_t*{pt_t <- pt_t*}, argIL_t*{argIL_t <- argIL_t*})
      -- if paramtyp*{paramtyp <- paramtyp*} matches _ :: _
      -- let pt_h :: pt_t*{pt_t <- pt_t*} = paramtyp*{paramtyp <- paramtyp*}
      -- if argIL*{argIL <- argIL*} matches _ :: _
      -- let argIL_h :: argIL_t*{argIL_t <- argIL_t*} = argIL*{argIL <- argIL*}
      -- let `%%%%`_paramtyp(id, dir, typ, exprIL?{exprIL <- exprIL?}) = pt_h
      -- if dir matches `NO`

   ;; ../../../../spec/4g-typing-decl.watsup:1112.1-1114.15
   clause 2(paramtyp*{paramtyp <- paramtyp*}, argIL*{argIL <- argIL*}) = argIL_h :: $filter_directionless_args(pt_t*{pt_t <- pt_t*}, argIL_t*{argIL_t <- argIL_t*})
      -- if paramtyp*{paramtyp <- paramtyp*} matches _ :: _
      -- let pt_h :: pt_t*{pt_t <- pt_t*} = paramtyp*{paramtyp <- paramtyp*}
      -- if argIL*{argIL <- argIL*} matches _ :: _
      -- let argIL_h :: argIL_t*{argIL_t <- argIL_t*} = argIL*{argIL <- argIL*}
      -- otherwise

;; ../../../../spec/4g-typing-decl.watsup:1126.1-1128.26
relation Table_entry_action_ok: `%%%|-%:%`(cursor, context, tblctx, tblaction, tblactionIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1130.1-1140.43
   rule : `%%%|-%:%`(p, C, tblctx, `%%`_tblaction(name, arg*{arg <- arg*}), tblactionIL)
      -- let (paramtyp*, argIL*)?{(paramtyp*, argIL*) <- (paramtyp*, argIL*)?} = $find_action(tblctx, name)
      -- if (paramtyp*, argIL*)?{(paramtyp*, argIL*) <- (paramtyp*, argIL*)?} matches (_)
      -- let ?((pt*{pt <- pt*}, argIL_a*{argIL_a <- argIL_a*})) = (paramtyp*, argIL*)?{(paramtyp*, argIL*) <- (paramtyp*, argIL*)?}
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_arg))*{arg <- arg*, argIL <- argIL*, typ_arg <- typ_arg*}
      -- Call_default_action_ok: `%%|-%%%:%`(p, C, pt*{pt <- pt*}, (argIL, typ_arg)*{argIL <- argIL*, typ_arg <- typ_arg*}, argIL_a*{argIL_a <- argIL_a*}, argIL'*{argIL' <- argIL'*})
      -- let tblactionIL = `%%%%`_tblactionIL(name, argIL'*{argIL' <- argIL'*}, pt*{pt <- pt*} as paramIL*, [])

;; ../../../../spec/4g-typing-decl.watsup:1143.1-1145.29
relation Table_entry_priority_ok: `%%%%|-%:%%`(cursor, context, tblctx, tblstate, expr?, tblctx, val?)

   ;; ../../../../spec/4g-typing-decl.watsup:1147.1-1149.28
   rule nopri: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx, ?())
      -- if cursor matches `LOCAL`
      -- if expr?{expr <- expr?} matches ()
      -- if (tblctx.MODE = `NOPRI`_mode())

   ;; ../../../../spec/4g-typing-decl.watsup:1151.1-1153.35
   rule noprilpm: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx, ?())
      -- if cursor matches `LOCAL`
      -- if tblstate matches `LPM%`
      -- let `LPM%`_tblstate(nat_prefix) = tblstate
      -- if expr?{expr <- expr?} matches ()
      -- let mode = tblctx.MODE
      -- if mode matches `NOPRILPM%`
      -- let `NOPRILPM%`_mode(nat) = mode

   ;; ../../../../spec/4g-typing-decl.watsup:1155.1-1169.45
   rule priority-values-nil-somep: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr'?{expr' <- expr'?}, tblctx'', ?(`IntV%`_val(i)))
      -- if cursor matches `LOCAL`
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- if ((tblctx.MODE = `PRI`_mode()) \/ (tblctx.MODE = `PRILPM`_mode()))
      -- if ~tblctx.ENTRIES.CONST
      -- if (tblctx.PRIORITIES.VALUES = [])
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- Eval_static: `%%|-%~>%`(`LOCAL`_cursor(), C, exprIL, val)
      -- let i = $get_num(val)
      -- if (i >= 0 as int)
      -- let tblctx' = tblctx[PRIORITIES.INIT = true]
      -- let tblctx'' = $add_priority(i, tblctx')

   ;; ../../../../spec/4g-typing-decl.watsup:1171.1-1184.43
   rule priority-values-nil-none-lw: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx', ?(`IntV%`_val(i)))
      -- if cursor matches `LOCAL`
      -- if expr?{expr <- expr?} matches ()
      -- if ((tblctx.MODE = `PRI`_mode()) \/ (tblctx.MODE = `PRILPM`_mode()))
      -- if (tblctx.PRIORITIES.VALUES = [])
      -- if tblctx.PRIORITIES.LARGEST_WINS
      -- let i_size = tblctx.ENTRIES.SIZE
      -- let i_delta = tblctx.PRIORITIES.DELTA
      -- let i = (((i_size - 1 as int) * i_delta) + 1 as int)
      -- if (i >= 0 as int)
      -- let tblctx' = $add_priority(i, tblctx)

   ;; ../../../../spec/4g-typing-decl.watsup:1186.1-1193.43
   rule priority-values-nil-none-no-lw: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx', ?(`IntV%`_val(1 as int)))
      -- if cursor matches `LOCAL`
      -- if expr?{expr <- expr?} matches ()
      -- if ((tblctx.MODE = `PRI`_mode()) \/ (tblctx.MODE = `PRILPM`_mode()))
      -- if (tblctx.PRIORITIES.VALUES = [])
      -- if ~tblctx.PRIORITIES.LARGEST_WINS
      -- let tblctx' = $add_priority(1 as int, tblctx)

   ;; ../../../../spec/4g-typing-decl.watsup:1195.1-1209.43
   rule else-somep: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr'?{expr' <- expr'?}, tblctx', ?(`IntV%`_val(i)))
      -- if cursor matches `LOCAL`
      -- if expr'?{expr' <- expr'?} matches (_)
      -- let ?(expr) = expr'?{expr' <- expr'?}
      -- if ((tblctx.MODE = `PRI`_mode()) \/ (tblctx.MODE = `PRILPM`_mode()))
      -- if ~tblctx.ENTRIES.CONST
      -- if (tblctx.PRIORITIES.VALUES =/= [])
      -- if tblctx.PRIORITIES.INIT
      -- Expr_ok: `%%|-%:%`(`LOCAL`_cursor(), C, expr, exprIL)
      -- Eval_static: `%%|-%~>%`(`LOCAL`_cursor(), C, exprIL, val)
      -- let i = $get_num(val)
      -- if (i >= 0 as int)
      -- let tblctx' = $add_priority(i, tblctx)

   ;; ../../../../spec/4g-typing-decl.watsup:1211.1-1224.44
   rule else-none-lw: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx', ?(`IntV%`_val(i')))
      -- if cursor matches `LOCAL`
      -- if expr?{expr <- expr?} matches ()
      -- if ((tblctx.MODE = `PRI`_mode()) \/ (tblctx.MODE = `PRILPM`_mode()))
      -- if (tblctx.PRIORITIES.VALUES =/= [])
      -- let i_delta = tblctx.PRIORITIES.DELTA
      -- let i = $find_last_priority(tblctx)
      -- if tblctx.PRIORITIES.LARGEST_WINS
      -- let i' = (i - i_delta)
      -- if (i' >= 0 as int)
      -- let tblctx' = $add_priority(i', tblctx)

   ;; ../../../../spec/4g-typing-decl.watsup:1226.1-1239.44
   rule else-none-no-lw: `%%%%|-%:%%`(cursor, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx', ?(`IntV%`_val(i')))
      -- if cursor matches `LOCAL`
      -- if expr?{expr <- expr?} matches ()
      -- if ((tblctx.MODE = `PRI`_mode()) \/ (tblctx.MODE = `PRILPM`_mode()))
      -- if (tblctx.PRIORITIES.VALUES =/= [])
      -- let i_delta = tblctx.PRIORITIES.DELTA
      -- let i = $find_last_priority(tblctx)
      -- if ~tblctx.PRIORITIES.LARGEST_WINS
      -- let i' = (i + i_delta)
      -- if (i' >= 0 as int)
      -- let tblctx' = $add_priority(i', tblctx)

;; ../../../../spec/4g-typing-decl.watsup:1242.1-1244.26
relation Table_entry_ok: `%%%|-%:%%`(cursor, context, tblctx, tblentry, tblctx, tblentryIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1246.1-1254.74
   rule : `%%%|-%:%%`(p, C, tblctx, `%%%%`_tblentry(bool, keyset*{keyset <- keyset*}, tblaction, expr?{expr <- expr?}), tblctx', `%%%%`_tblentryIL(bool, keysetIL*{keysetIL <- keysetIL*}, tblactionIL, val?{val <- val?}))
      -- Table_entry_keysets_ok: `%%%|-%:%%`(p, C, tblctx, keyset*{keyset <- keyset*}, tblstate, keysetIL*{keysetIL <- keysetIL*})
      -- Table_entry_action_ok: `%%%|-%:%`(p, C, tblctx, tblaction, tblactionIL)
      -- Table_entry_priority_ok: `%%%%|-%:%%`(p, C, tblctx, tblstate, expr?{expr <- expr?}, tblctx', val?{val <- val?})

;; ../../../../spec/4g-typing-decl.watsup:1257.1-1259.26
relation Table_entries_fold_ok: `%%%|-%:%%`(cursor, context, tblctx, tblentry*, tblctx, tblentryIL*)

   ;; ../../../../spec/4g-typing-decl.watsup:1261.1-1262.33
   rule nil: `%%%|-%:%%`(p, C, tblctx, tblentry*{tblentry <- tblentry*}, tblctx, [])
      -- if tblentry*{tblentry <- tblentry*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:1264.1-1269.58
   rule cons: `%%%|-%:%%`(p, C, tblctx, tblentry*{tblentry <- tblentry*}, tblctx'', tblentryIL_h :: tblentryIL_t*{tblentryIL_t <- tblentryIL_t*})
      -- if tblentry*{tblentry <- tblentry*} matches _ :: _
      -- let tblentry_h :: tblentry_t*{tblentry_t <- tblentry_t*} = tblentry*{tblentry <- tblentry*}
      -- Table_entry_ok: `%%%|-%:%%`(p, C, tblctx, tblentry_h, tblctx', tblentryIL_h)
      -- Table_entries_fold_ok: `%%%|-%:%%`(p, C, tblctx', tblentry_t*{tblentry_t <- tblentry_t*}, tblctx'', tblentryIL_t*{tblentryIL_t <- tblentryIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:1272.1-1274.26
relation Table_entries_ok: `%%%|-%:%%`(cursor, context, tblctx, tblentryprop, tblctx, tblentrypropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1276.1-1284.77
   rule : `%%%|-%:%%`(p, C, tblctx_0, `%%`_tblentryprop(b, tblentry*{tblentry <- tblentry*}), tblctx_3, `%%`_tblentrypropIL(b, tblentryIL*{tblentryIL <- tblentryIL*}))
      -- if ((|tblctx_0.KEYS| = 0) => (|tblentry*{tblentry <- tblentry*}| = 0))
      -- let tblctx_1 = tblctx_0[ENTRIES.SIZE = |tblentry*{tblentry <- tblentry*}| as int]
      -- let tblctx_2 = tblctx_1[ENTRIES.CONST = b]
      -- Table_entries_fold_ok: `%%%|-%:%%`(p, C, tblctx_2, tblentry*{tblentry <- tblentry*}, tblctx_3, tblentryIL*{tblentryIL <- tblentryIL*})

;; ../../../../spec/4g-typing-decl.watsup:1290.1-1292.26
relation Table_default_ok: `%%%|-%:%`(cursor, context, tblctx, tbldefaultprop, tbldefaultpropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1294.1-1304.43
   rule : `%%%|-%:%`(p, C, tblctx, `%%`_tbldefaultprop(bool, `%%`_tblaction(name, arg*{arg <- arg*})), `%%`_tbldefaultpropIL(bool, tblactionIL))
      -- let (paramtyp*, argIL*)?{(paramtyp*, argIL*) <- (paramtyp*, argIL*)?} = $find_action(tblctx, name)
      -- if (paramtyp*, argIL*)?{(paramtyp*, argIL*) <- (paramtyp*, argIL*)?} matches (_)
      -- let ?((pt*{pt <- pt*}, argIL_a*{argIL_a <- argIL_a*})) = (paramtyp*, argIL*)?{(paramtyp*, argIL*) <- (paramtyp*, argIL*)?}
      -- (Arg_ok: `%%|-%:%%`(p, C, arg, argIL, typ_a))*{arg <- arg*, argIL <- argIL*, typ_a <- typ_a*}
      -- Call_default_action_ok: `%%|-%%%:%`(p, C, pt*{pt <- pt*}, (argIL, typ_a)*{argIL <- argIL*, typ_a <- typ_a*}, argIL_a*{argIL_a <- argIL_a*}, argIL'*{argIL' <- argIL'*})
      -- let tblactionIL = `%%%%`_tblactionIL(name, argIL'*{argIL' <- argIL'*}, pt*{pt <- pt*} as paramIL*, [])

;; ../../../../spec/4g-typing-decl.watsup:1310.1-1312.26
relation Table_custom_ok: `%%%|-%:%%`(cursor, context, tblctx, tblcustomprop, tblctx, tblcustompropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1314.1-1318.58
   rule size: `%%%|-%:%%`(p, C, tblctx, `%%%`_tblcustomprop(b, text, expr), tblctx, `%%%`_tblcustompropIL(b, "size", exprIL))
      -- if (text = "size")
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if (($is_intt(typ) \/ $is_fintt(typ)) \/ $is_fbitt(typ))

   ;; ../../../../spec/4g-typing-decl.watsup:1320.1-1328.60
   rule largest_priority_wins: `%%%|-%:%%`(p, C, tblctx, `%%%`_tblcustomprop(b, text, expr), tblctx', `%%%`_tblcustompropIL(b, "largest_priority_wins", exprIL))
      -- if (text = "largest_priority_wins")
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if (typ = `BoolT`_primtyp() as typ)
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)
      -- if val matches `BoolV%`
      -- let `BoolV%`_val(b_lw) = val
      -- let tblctx' = tblctx[PRIORITIES.LARGEST_WINS = b_lw]

   ;; ../../../../spec/4g-typing-decl.watsup:1330.1-1342.56
   rule priority_delta: `%%%|-%:%%`(p, C, tblctx, `%%%`_tblcustomprop(b, text, expr), tblctx', `%%%`_tblcustompropIL(b, "priority_delta", exprIL))
      -- if (text = "priority_delta")
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)
      -- let `(%;%)`_annotIL(typ, _ctk) = $annot(exprIL)
      -- if (($is_intt(typ) \/ $is_fintt(typ)) \/ $is_fbitt(typ))
      -- Eval_static: `%%|-%~>%`(p, C, exprIL, val)
      -- let i_delta = $get_num(val)
      -- if (i_delta > 0 as int)
      -- let tblctx' = tblctx[PRIORITIES.DELTA = i_delta]

   ;; ../../../../spec/4g-typing-decl.watsup:1344.1-1348.35
   rule unknown: `%%%|-%:%%`(p, C, tblctx, `%%%`_tblcustomprop(b, member, expr), tblctx, `%%%`_tblcustompropIL(b, member, exprIL))
      -- if (((member =/= "size") /\ (member =/= "largest_priority_wins")) /\ (member =/= "priority_delta"))
      -- Expr_ok: `%%|-%:%`(p, C, expr, exprIL)

;; ../../../../spec/4g-typing-decl.watsup:1351.1-1353.26
relation Table_prop_ok: `%%%|-%:%%`(cursor, context, tblctx, tblprop, tblctx, tblpropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1355.1-1358.54
   rule keyp: `%%%|-%:%%`(p, C, tblctx, tblprop, tblctx', `KeyP%`_tblpropIL(tblkeypropIL))
      -- if tblprop matches `KeyP%`
      -- let `KeyP%`_tblprop(tblkeyprop) = tblprop
      -- Table_keys_ok: `%%%|-%:%%`(p, C, tblctx, tblkeyprop, tblctx', tblkeypropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1360.1-1363.60
   rule actionp: `%%%|-%:%%`(p, C, tblctx, tblprop, tblctx', `ActionP%`_tblpropIL(tblactionpropIL))
      -- if tblprop matches `ActionP%`
      -- let `ActionP%`_tblprop(tblactionprop) = tblprop
      -- Table_actions_ok: `%%%|-%:%%`(p, C, tblctx, tblactionprop, tblctx', tblactionpropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1365.1-1368.58
   rule entryp: `%%%|-%:%%`(p, C, tblctx, tblprop, tblctx', `EntryP%`_tblpropIL(tblentrypropIL))
      -- if tblprop matches `EntryP%`
      -- let `EntryP%`_tblprop(tblentryprop) = tblprop
      -- Table_entries_ok: `%%%|-%:%%`(p, C, tblctx, tblentryprop, tblctx', tblentrypropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1370.1-1373.54
   rule defaultp: `%%%|-%:%%`(p, C, tblctx, tblprop, tblctx, `DefaultP%`_tblpropIL(tbldefaultpropIL))
      -- if tblprop matches `DefaultP%`
      -- let `DefaultP%`_tblprop(tbldefaultprop) = tblprop
      -- Table_default_ok: `%%%|-%:%`(p, C, tblctx, tbldefaultprop, tbldefaultpropIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1375.1-1378.60
   rule customp: `%%%|-%:%%`(p, C, tblctx, tblprop, tblctx', `CustomP%`_tblpropIL(tblcustompropIL))
      -- if tblprop matches `CustomP%`
      -- let `CustomP%`_tblprop(tblcustomprop) = tblprop
      -- Table_custom_ok: `%%%|-%:%%`(p, C, tblctx, tblcustomprop, tblctx', tblcustompropIL)

;; ../../../../spec/4g-typing-decl.watsup:1381.1-1383.26
relation Table_props_ok: `%%%|-%:%%`(cursor, context, tblctx, tbl, tblctx, tblIL)

   ;; ../../../../spec/4g-typing-decl.watsup:1385.1-1386.33
   rule nil: `%%%|-%:%%`(p, C, tblctx, tblprop*{tblprop <- tblprop*}, tblctx, [])
      -- if tblprop*{tblprop <- tblprop*} matches []

   ;; ../../../../spec/4g-typing-decl.watsup:1388.1-1394.56
   rule cons: `%%%|-%:%%`(p, C, tblctx, tblprop*{tblprop <- tblprop*}, tblctx'', tblpropIL_h :: tblpropIL_t*{tblpropIL_t <- tblpropIL_t*})
      -- if tblprop*{tblprop <- tblprop*} matches _ :: _
      -- let tblprop_h :: tblprop_t*{tblprop_t <- tblprop_t*} = tblprop*{tblprop <- tblprop*}
      -- Table_prop_ok: `%%%|-%:%%`(p, C, tblctx, tblprop_h, tblctx', tblpropIL_h)
      -- Table_props_ok: `%%%|-%:%%`(p, C, tblctx', tblprop_t*{tblprop_t <- tblprop_t*}, tblctx'', tblpropIL_t*{tblpropIL_t <- tblpropIL_t*})

;; ../../../../spec/4g-typing-decl.watsup:1400.1-1402.26
relation Table_type_decl_ok: `%%%|-%:%%`(cursor, context, tblctx, id, context, typ)

   ;; ../../../../spec/4g-typing-decl.watsup:1404.1-1421.62
   rule : `%%%|-%:%%`(cursor, C, tblctx, id, C', typ_s)
      -- if cursor matches `BLOCK`
      -- let id_e = $concat_text(["action_list(", id, ")"])
      -- let (name, pt*{pt <- pt*}, argIL*{argIL <- argIL*})*{argIL* <- argIL**, name <- name*, pt* <- pt**} = tblctx.ACTIONS
      -- (let member = $string_of_name(name))*{member <- member*, name <- name*}
      -- let typ_e = `TableEnumT%%`_synthtyp(id_e, member*{member <- member*}) as typ
      -- (let val_e = `TableEnumFieldV%%`_val(id_e, member))*{member <- member*, val_e <- val_e*}
      -- (let id_f = $concat_text([id_e, ".", member]))*{id_f <- id_f*, member <- member*}
      -- let C' = $add_styps(`BLOCK`_cursor(), C, id_f*{id_f <- id_f*}, `%%%%`_styp(typ_e, `NO`_dir(), `LCTK`_ctk(), ?(val_e))*{val_e <- val_e*})
      -- let id_s = $concat_text(["apply_result(", id, ")"])
      -- let typ_s = `TableStructT%%`_synthtyp(id_s, [("hit", `BoolT`_primtyp() as typ), ("miss", `BoolT`_primtyp() as typ), ("action_run", typ_e)]) as typ

;; ../../../../spec/4h-typing-call.watsup:152.1-152.53
def $filter_default_args(paramtyp*, id*) : paramtyp* =

   ;; ../../../../spec/4h-typing-call.watsup:154.1-154.46
   clause 0(paramtyp*{paramtyp <- paramtyp*}, id_deft*{id_deft <- id_deft*}) = []
      -- if paramtyp*{paramtyp <- paramtyp*} matches []

   ;; ../../../../spec/4h-typing-call.watsup:155.1-157.25
   clause 1(paramtyp*{paramtyp <- paramtyp*}, id_deft*{id_deft <- id_deft*}) = $filter_default_args(pt_t*{pt_t <- pt_t*}, id_deft*{id_deft <- id_deft*})
      -- if paramtyp*{paramtyp <- paramtyp*} matches _ :: _
      -- let pt_h :: pt_t*{pt_t <- pt_t*} = paramtyp*{paramtyp <- paramtyp*}
      -- let `%%%%`_paramtyp(id_p, _dir, _typ, _exprIL?{_exprIL <- _exprIL?}) = pt_h
      -- if id_p <- id_deft*{id_deft <- id_deft*}

   ;; ../../../../spec/4h-typing-call.watsup:158.1-159.15
   clause 2(paramtyp*{paramtyp <- paramtyp*}, id_deft*{id_deft <- id_deft*}) = pt_h :: $filter_default_args(pt_t*{pt_t <- pt_t*}, id_deft*{id_deft <- id_deft*})
      -- if paramtyp*{paramtyp <- paramtyp*} matches _ :: _
      -- let pt_h :: pt_t*{pt_t <- pt_t*} = paramtyp*{paramtyp <- paramtyp*}
      -- otherwise

;; ../../../../spec/4h-typing-call.watsup:163.15-163.32
syntax pmap = map<id, paramtyp>

;; ../../../../spec/4h-typing-call.watsup:165.1-165.65
def $align_params_with_args(paramtyp*, (argIL, typ)*) : paramtyp* =

   ;; ../../../../spec/4h-typing-call.watsup:168.1-171.66
   clause 0(pt*{pt <- pt*}, (argIL, typ)*{argIL <- argIL*, typ <- typ*}) = pt'*{pt' <- pt'*}
      -- (let `%%%%`_paramtyp(id, _dir, _typ, _exprIL?{_exprIL <- _exprIL?}) = pt)*{_dir <- _dir*, _exprIL? <- _exprIL?*, _typ <- _typ*, id <- id*, pt <- pt*}
      -- let pmap = `{%}`_set<pair<id, paramtyp>>(`%->%`_pair<id, paramtyp>(id, pt)*{id <- id*, pt <- pt*})
      -- (let pt' = $align_params_with_args'(pmap, pt, (argIL, typ)))*{argIL <- argIL*, pt <- pt*, pt' <- pt'*, typ <- typ*}

;; ../../../../spec/4h-typing-call.watsup:166.1-166.69
def $align_params_with_args'(pmap, paramtyp, (argIL, typ)) : paramtyp =

   ;; ../../../../spec/4h-typing-call.watsup:173.1-173.58
   clause 0(pmap, pt, (argIL, _typ)) = pt
      -- if argIL matches `ExprA%`
      -- let `ExprA%`_argIL(_exprIL) = argIL

   ;; ../../../../spec/4h-typing-call.watsup:174.1-175.48
   clause 1(pmap, pt, (argIL, _typ)) = pt'
      -- if argIL matches `NameA%%`
      -- let `NameA%%`_argIL(id, _exprIL?{_exprIL <- _exprIL?}) = argIL
      -- let paramtyp?{paramtyp <- paramtyp?} = $find_map<id, paramtyp>(pmap, id)
      -- if paramtyp?{paramtyp <- paramtyp?} matches (_)
      -- let ?(pt') = paramtyp?{paramtyp <- paramtyp?}

   ;; ../../../../spec/4h-typing-call.watsup:176.1-176.55
   clause 2(pmap, pt, (argIL, _typ)) = pt
      -- if argIL matches `AnyA`

;; ../../../../spec/4h-typing-call.watsup:183.1-184.12
syntax typcstr = 
   | `KNOWN%`(typ)
   | `UNKNOWN`()

;; ../../../../spec/4h-typing-call.watsup:188.1-188.42
def $empty_cstr(tid*) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:190.1-190.47
   clause 0(tid*{tid <- tid*}) = `{%}`_set<pair<tid, typcstr>>(`%->%`_pair<tid, typcstr>(tid, `UNKNOWN`_typcstr())*{tid <- tid*})

;; ../../../../spec/4h-typing-call.watsup:193.1-193.63
def $gen_cstr(map<tid, typcstr>, typ, typ) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:202.1-203.56
   clause 0(cstr, typ, typ_a) = $update_map<tid, typcstr>(cstr, tid, `KNOWN%`_typcstr(typ_a))
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `VarT%`
      -- let `VarT%`_abstyp(tid) = abstyp
      -- if $in_set<tid>(tid, $dom_map<tid, typcstr>(cstr))

   ;; ../../../../spec/4h-typing-call.watsup:205.1-209.50
   clause 1(cstr, typ, typ') = $gen_cstrs(cstr', typ_p'*{typ_p' <- typ_p'*}, typ_a'*{typ_a' <- typ_a'*})
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_p, typ_p'*{typ_p' <- typ_p'*}) = abstyp
      -- if typ' <: abstyp
      -- let abstyp' = typ' as abstyp
      -- if abstyp' matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_a, typ_a'*{typ_a' <- typ_a'*}) = abstyp'
      -- let typ_p'' = $specialize_typdef(ptd_p as typdef, typ_p'*{typ_p' <- typ_p'*})
      -- let typ_a'' = $specialize_typdef(ptd_a as typdef, typ_a'*{typ_a' <- typ_a'*})
      -- if ($is_nominal(typ_p'') /\ $is_nominal(typ_a''))
      -- let cstr' = $gen_cstr(cstr, typ_p'', typ_a'')

   ;; ../../../../spec/4h-typing-call.watsup:211.1-215.50
   clause 2(cstr, typ, typ') = cstr'
      -- if typ <: abstyp
      -- let abstyp = typ as abstyp
      -- if abstyp matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_p, typ_p'*{typ_p' <- typ_p'*}) = abstyp
      -- if typ' <: abstyp
      -- let abstyp' = typ' as abstyp
      -- if abstyp' matches `SpecT%%`
      -- let `SpecT%%`_abstyp(ptd_a, typ_a'*{typ_a' <- typ_a'*}) = abstyp'
      -- let typ_p'' = $specialize_typdef(ptd_p as typdef, typ_p'*{typ_p' <- typ_p'*})
      -- let typ_a'' = $specialize_typdef(ptd_a as typdef, typ_a'*{typ_a' <- typ_a'*})
      -- if ~($is_nominal(typ_p'') /\ $is_nominal(typ_a''))
      -- let cstr' = $gen_cstr(cstr, typ_p'', typ_a'')

   ;; ../../../../spec/4h-typing-call.watsup:217.1-217.75
   clause 3(cstr, typ, typ_a) = $gen_cstr(cstr, typ_p', typ_a)
      -- if typ <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ_p') = typ as aliastyp

   ;; ../../../../spec/4h-typing-call.watsup:219.1-219.75
   clause 4(cstr, typ_p, typ) = $gen_cstr(cstr, typ_p, typ_a')
      -- if typ <: aliastyp
      -- let `DefT%%`_aliastyp(_id, typ_a') = typ as aliastyp

   ;; ../../../../spec/4h-typing-call.watsup:221.1-221.86
   clause 5(cstr, typ, typ') = $gen_cstr(cstr, typ_p', typ_a')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `NewT%%`
      -- let `NewT%%`_datatyp(id, typ_p') = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `NewT%%`
      -- let `NewT%%`_datatyp(id', typ_a') = datatyp'
      -- if (id = id')

   ;; ../../../../spec/4h-typing-call.watsup:223.1-223.78
   clause 6(cstr, typ, typ') = $gen_cstr(cstr, typ_p, typ_a)
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `ListT%`
      -- let `ListT%`_datatyp(typ_p) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `ListT%`
      -- let `ListT%`_datatyp(typ_a) = datatyp'

   ;; ../../../../spec/4h-typing-call.watsup:225.1-225.85
   clause 7(cstr, typ, typ') = $gen_cstrs(cstr, typ_p*{typ_p <- typ_p*}, typ_a*{typ_a <- typ_a*})
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_p*{typ_p <- typ_p*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `TupleT%`
      -- let `TupleT%`_datatyp(typ_a*{typ_a <- typ_a*}) = datatyp'

   ;; ../../../../spec/4h-typing-call.watsup:227.1-227.92
   clause 8(cstr, typ, typ') = $gen_cstr(cstr, typ_p', typ_a')
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_p', i_p) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `StackT%%`
      -- let `StackT%%`_datatyp(typ_a', i_a) = datatyp'

   ;; ../../../../spec/4h-typing-call.watsup:229.1-229.121
   clause 9(cstr, typ, typ') = $gen_cstrs(cstr, typ_p'*{typ_p' <- typ_p'*}, typ_a'*{typ_a' <- typ_a'*})
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `StructT%%`
      -- let `StructT%%`_datatyp(id, (member_p, typ_p')*{member_p <- member_p*, typ_p' <- typ_p'*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `StructT%%`
      -- let `StructT%%`_datatyp(id', (member_a, typ_a')*{member_a <- member_a*, typ_a' <- typ_a'*}) = datatyp'
      -- if (id = id')

   ;; ../../../../spec/4h-typing-call.watsup:231.1-231.121
   clause 10(cstr, typ, typ') = $gen_cstrs(cstr, typ_p'*{typ_p' <- typ_p'*}, typ_a'*{typ_a' <- typ_a'*})
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id, (member_p, typ_p')*{member_p <- member_p*, typ_p' <- typ_p'*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `HeaderT%%`
      -- let `HeaderT%%`_datatyp(id', (member_a, typ_a')*{member_a <- member_a*, typ_a' <- typ_a'*}) = datatyp'
      -- if (id = id')

   ;; ../../../../spec/4h-typing-call.watsup:233.1-233.119
   clause 11(cstr, typ, typ') = $gen_cstrs(cstr, typ_p'*{typ_p' <- typ_p'*}, typ_a'*{typ_a' <- typ_a'*})
      -- if typ <: datatyp
      -- let datatyp = typ as datatyp
      -- if datatyp matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id, (member_p, typ_p')*{member_p <- member_p*, typ_p' <- typ_p'*}) = datatyp
      -- if typ' <: datatyp
      -- let datatyp' = typ' as datatyp
      -- if datatyp' matches `UnionT%%`
      -- let `UnionT%%`_datatyp(id', (member_a, typ_a')*{member_a <- member_a*, typ_a' <- typ_a'*}) = datatyp'
      -- if (id = id')

   ;; ../../../../spec/4h-typing-call.watsup:235.1-238.47
   clause 12(cstr, typ, typ') = $gen_cstr_fd'(cstr, fid_p*{fid_p <- fid_p*}, fdenv_p, fdenv_a)
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id, fdenv_p) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `ExternT%%`
      -- let `ExternT%%`_objtyp(id', fdenv_a) = objtyp'
      -- if (id = id')
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid_p, fd_p)*{fd_p <- fd_p*, fid_p <- fid_p*}) = fdenv_p
      -- let `{%}`_set<pair<fid, funcdef>>(`%->%`_pair<fid, funcdef>(fid_a, fd_a)*{fd_a <- fd_a*, fid_a <- fid_a*}) = fdenv_a
      -- if $eq_set<fid>(`{%}`_set<fid>(fid_p*{fid_p <- fid_p*}), `{%}`_set<fid>(fid_a*{fid_a <- fid_a*}))

   ;; ../../../../spec/4h-typing-call.watsup:240.1-242.33
   clause 13(cstr, typ, typ') = $gen_cstrs(cstr, typ_p'*{typ_p' <- typ_p'*}, typ_a'*{typ_a' <- typ_a'*})
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id, pt_p*{pt_p <- pt_p*}) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `ParserT%%`
      -- let `ParserT%%`_objtyp(_id', pt_a*{pt_a <- pt_a*}) = objtyp'
      -- (let `%%%%`_paramtyp(_id'', dir, typ_p', _exprIL?{_exprIL <- _exprIL?}) = pt_p)*{_exprIL? <- _exprIL?*, _id'' <- _id''*, dir <- dir*, pt_p <- pt_p*, typ_p' <- typ_p'*}
      -- (let `%%%%`_paramtyp(_id''', dir', typ_a', _exprIL'?{_exprIL' <- _exprIL'?}) = pt_a)*{_exprIL'? <- _exprIL'?*, _id''' <- _id'''*, dir' <- dir'*, pt_a <- pt_a*, typ_a' <- typ_a'*}
      -- (if (dir' = dir))*{dir <- dir*, dir' <- dir'*}

   ;; ../../../../spec/4h-typing-call.watsup:244.1-246.33
   clause 14(cstr, typ, typ') = $gen_cstrs(cstr, typ_p'*{typ_p' <- typ_p'*}, typ_a'*{typ_a' <- typ_a'*})
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id, pt_p*{pt_p <- pt_p*}) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `ControlT%%`
      -- let `ControlT%%`_objtyp(_id', pt_a*{pt_a <- pt_a*}) = objtyp'
      -- (let `%%%%`_paramtyp(_id'', dir, typ_p', _exprIL?{_exprIL <- _exprIL?}) = pt_p)*{_exprIL? <- _exprIL?*, _id'' <- _id''*, dir <- dir*, pt_p <- pt_p*, typ_p' <- typ_p'*}
      -- (let `%%%%`_paramtyp(_id''', dir', typ_a', _exprIL'?{_exprIL' <- _exprIL'?}) = pt_a)*{_exprIL'? <- _exprIL'?*, _id''' <- _id'''*, dir' <- dir'*, pt_a <- pt_a*, typ_a' <- typ_a'*}
      -- (if (dir' = dir))*{dir <- dir*, dir' <- dir'*}

   ;; ../../../../spec/4h-typing-call.watsup:248.1-248.93
   clause 15(cstr, typ, typ') = $gen_cstrs(cstr, typ_p*{typ_p <- typ_p*}, typ_a*{typ_a <- typ_a*})
      -- if typ <: objtyp
      -- let objtyp = typ as objtyp
      -- if objtyp matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id, typ_p*{typ_p <- typ_p*}) = objtyp
      -- if typ' <: objtyp
      -- let objtyp' = typ' as objtyp
      -- if objtyp' matches `PackageT%%`
      -- let `PackageT%%`_objtyp(_id', typ_a*{typ_a <- typ_a*}) = objtyp'

   ;; ../../../../spec/4h-typing-call.watsup:250.1-251.15
   clause 16(cstr, typ_p, typ_a) = cstr
      -- otherwise

;; ../../../../spec/4h-typing-call.watsup:194.1-194.66
def $gen_cstrs(map<tid, typcstr>, typ*, typ*) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:254.1-256.49
   clause 0(cstr, typ_p*{typ_p <- typ_p*}, typ_a*{typ_a <- typ_a*}) = $merge_cstrs(cstr, cstr'*{cstr' <- cstr'*})
      -- if (|typ_p*{typ_p <- typ_p*}| = |typ_a*{typ_a <- typ_a*}|)
      -- (let cstr' = $gen_cstr(cstr, typ_p, typ_a))*{cstr' <- cstr'*, typ_a <- typ_a*, typ_p <- typ_p*}

;; ../../../../spec/4h-typing-call.watsup:195.1-195.74
def $gen_cstr_fd(map<tid, typcstr>, funcdef, funcdef) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:259.1-263.90
   clause 0(cstr, fd_p, fd_a) = cstr''
      -- let `%%%%`_paramtyp(_id, _dir, typ_p, _exprIL?{_exprIL <- _exprIL?})*{_dir <- _dir*, _exprIL? <- _exprIL?*, _id <- _id*, typ_p <- typ_p*} = $get_params_funcdef(fd_p)
      -- let `%%%%`_paramtyp(_id', _dir', typ_a, _exprIL'?{_exprIL' <- _exprIL'?})*{_dir' <- _dir'*, _exprIL'? <- _exprIL'?*, _id' <- _id'*, typ_a <- typ_a*} = $get_params_funcdef(fd_a)
      -- let cstr' = $gen_cstrs(cstr, typ_p*{typ_p <- typ_p*}, typ_a*{typ_a <- typ_a*})
      -- let cstr'' = $gen_cstr(cstr', $get_typ_ret_funcdef(fd_p), $get_typ_ret_funcdef(fd_a))

;; ../../../../spec/4h-typing-call.watsup:196.1-196.77
def $gen_cstr_fd'(map<tid, typcstr>, fid*, fdenv, fdenv) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:265.1-265.54
   clause 0(cstr, fid*{fid <- fid*}, fdenv_p, fdenv_a) = cstr
      -- if fid*{fid <- fid*} matches []

   ;; ../../../../spec/4h-typing-call.watsup:267.1-270.47
   clause 1(cstr, fid*{fid <- fid*}, fdenv_p, fdenv_a) = $gen_cstr_fd'(cstr', fid_t*{fid_t <- fid_t*}, fdenv_p, fdenv_a)
      -- if fid*{fid <- fid*} matches _ :: _
      -- let fid_h :: fid_t*{fid_t <- fid_t*} = fid*{fid <- fid*}
      -- let funcdef?{funcdef <- funcdef?} = $find_map<fid, funcdef>(fdenv_p, fid_h)
      -- if funcdef?{funcdef <- funcdef?} matches (_)
      -- let ?(fd_p) = funcdef?{funcdef <- funcdef?}
      -- let funcdef'?{funcdef' <- funcdef'?} = $find_map<fid, funcdef>(fdenv_a, fid_h)
      -- if funcdef'?{funcdef' <- funcdef'?} matches (_)
      -- let ?(fd_a) = funcdef'?{funcdef' <- funcdef'?}
      -- let cstr' = $gen_cstr_fd(cstr, fd_p, fd_a)

;; ../../../../spec/4h-typing-call.watsup:197.1-197.74
def $merge_cstr(map<tid, typcstr>, map<tid, typcstr>) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:273.1-275.85
   clause 0(cstr_o, cstr_n) = $merge_cstr'(cstr_o, cstr_n, tid_o*{tid_o <- tid_o*}, `{%}`_set<pair<tid, typcstr>>([]))
      -- let `{%}`_set<tid>(tid_o*{tid_o <- tid_o*}) = $dom_map<tid, typcstr>(cstr_o)
      -- if $eq_set<tid>($dom_map<tid, typcstr>(cstr_o), $dom_map<tid, typcstr>(cstr_n))

;; ../../../../spec/4h-typing-call.watsup:198.1-198.100
def $merge_cstr'(map<tid, typcstr>, map<tid, typcstr>, tid*, map<tid, typcstr>) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:278.1-278.51
   clause 0(cstr_o, cstr_n, tid*{tid <- tid*}, cstr) = cstr
      -- if tid*{tid <- tid*} matches []

   ;; ../../../../spec/4h-typing-call.watsup:280.1-283.64
   clause 1(cstr_o, cstr_n, tid*{tid <- tid*}, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*{tid_t <- tid_t*}, cstr')
      -- if tid*{tid <- tid*} matches _ :: _
      -- let tid_h :: tid_t*{tid_t <- tid_t*} = tid*{tid <- tid*}
      -- if ($find_map<tid, typcstr>(cstr_o, tid_h) = ?(`UNKNOWN`_typcstr()))
      -- if ($find_map<tid, typcstr>(cstr_n, tid_h) = ?(`UNKNOWN`_typcstr()))
      -- let cstr' = $update_map<tid, typcstr>(cstr, tid_h, `UNKNOWN`_typcstr())

   ;; ../../../../spec/4h-typing-call.watsup:285.1-288.68
   clause 2(cstr_o, cstr_n, tid*{tid <- tid*}, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*{tid_t <- tid_t*}, cstr')
      -- if tid*{tid <- tid*} matches _ :: _
      -- let tid_h :: tid_t*{tid_t <- tid_t*} = tid*{tid <- tid*}
      -- if ($find_map<tid, typcstr>(cstr_o, tid_h) = ?(`UNKNOWN`_typcstr()))
      -- let typcstr'?{typcstr' <- typcstr'?} = $find_map<tid, typcstr>(cstr_n, tid_h)
      -- if typcstr'?{typcstr' <- typcstr'?} matches (_)
      -- let ?(typcstr) = typcstr'?{typcstr' <- typcstr'?}
      -- if typcstr matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_n) = typcstr
      -- let cstr' = $update_map<tid, typcstr>(cstr, tid_h, `KNOWN%`_typcstr(typ_n))

   ;; ../../../../spec/4h-typing-call.watsup:290.1-293.68
   clause 3(cstr_o, cstr_n, tid*{tid <- tid*}, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*{tid_t <- tid_t*}, cstr')
      -- if tid*{tid <- tid*} matches _ :: _
      -- let tid_h :: tid_t*{tid_t <- tid_t*} = tid*{tid <- tid*}
      -- let typcstr'?{typcstr' <- typcstr'?} = $find_map<tid, typcstr>(cstr_o, tid_h)
      -- if typcstr'?{typcstr' <- typcstr'?} matches (_)
      -- let ?(typcstr) = typcstr'?{typcstr' <- typcstr'?}
      -- if typcstr matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_o) = typcstr
      -- if ($find_map<tid, typcstr>(cstr_n, tid_h) = ?(`UNKNOWN`_typcstr()))
      -- let cstr' = $update_map<tid, typcstr>(cstr, tid_h, `KNOWN%`_typcstr(typ_o))

   ;; ../../../../spec/4h-typing-call.watsup:295.1-299.68
   clause 4(cstr_o, cstr_n, tid*{tid <- tid*}, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*{tid_t <- tid_t*}, cstr')
      -- if tid*{tid <- tid*} matches _ :: _
      -- let tid_h :: tid_t*{tid_t <- tid_t*} = tid*{tid <- tid*}
      -- let typcstr'?{typcstr' <- typcstr'?} = $find_map<tid, typcstr>(cstr_o, tid_h)
      -- if typcstr'?{typcstr' <- typcstr'?} matches (_)
      -- let ?(typcstr) = typcstr'?{typcstr' <- typcstr'?}
      -- if typcstr matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_o) = typcstr
      -- let typcstr'''?{typcstr''' <- typcstr'''?} = $find_map<tid, typcstr>(cstr_n, tid_h)
      -- if typcstr'''?{typcstr''' <- typcstr'''?} matches (_)
      -- let ?(typcstr'') = typcstr'''?{typcstr''' <- typcstr'''?}
      -- if typcstr'' matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_n) = typcstr''
      -- if Sub_impl: `%<<%`(typ_o, typ_n) holds
      -- let cstr' = $update_map<tid, typcstr>(cstr, tid_h, `KNOWN%`_typcstr(typ_n))

   ;; ../../../../spec/4h-typing-call.watsup:301.1-306.68
   clause 5(cstr_o, cstr_n, tid*{tid <- tid*}, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*{tid_t <- tid_t*}, cstr')
      -- if tid*{tid <- tid*} matches _ :: _
      -- let tid_h :: tid_t*{tid_t <- tid_t*} = tid*{tid <- tid*}
      -- let typcstr'?{typcstr' <- typcstr'?} = $find_map<tid, typcstr>(cstr_o, tid_h)
      -- if typcstr'?{typcstr' <- typcstr'?} matches (_)
      -- let ?(typcstr) = typcstr'?{typcstr' <- typcstr'?}
      -- if typcstr matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_o) = typcstr
      -- let typcstr'''?{typcstr''' <- typcstr'''?} = $find_map<tid, typcstr>(cstr_n, tid_h)
      -- if typcstr'''?{typcstr''' <- typcstr'''?} matches (_)
      -- let ?(typcstr'') = typcstr'''?{typcstr''' <- typcstr'''?}
      -- if typcstr'' matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_n) = typcstr''
      -- if ~Sub_impl: `%<<%`(typ_o, typ_n) holds
      -- if Sub_impl: `%<<%`(typ_n, typ_o) holds
      -- let cstr' = $update_map<tid, typcstr>(cstr, tid_h, `KNOWN%`_typcstr(typ_o))

;; ../../../../spec/4h-typing-call.watsup:199.1-199.76
def $merge_cstrs(map<tid, typcstr>, map<tid, typcstr>*) : map<tid, typcstr> =

   ;; ../../../../spec/4h-typing-call.watsup:309.1-309.35
   clause 0(cstr, map<tid, typcstr>*{map<tid, typcstr> <- map<tid, typcstr>*}) = cstr
      -- if map<tid, typcstr>*{map<tid, typcstr> <- map<tid, typcstr>*} matches []

   ;; ../../../../spec/4h-typing-call.watsup:310.1-312.46
   clause 1(cstr, map<tid, typcstr>*{map<tid, typcstr> <- map<tid, typcstr>*}) = cstr''
      -- if map<tid, typcstr>*{map<tid, typcstr> <- map<tid, typcstr>*} matches _ :: _
      -- let cstr_h :: cstr_t*{cstr_t <- cstr_t*} = map<tid, typcstr>*{map<tid, typcstr> <- map<tid, typcstr>*}
      -- let cstr' = $merge_cstr(cstr, cstr_h)
      -- let cstr'' = $merge_cstrs(cstr', cstr_t*{cstr_t <- cstr_t*})

;; ../../../../spec/4h-typing-call.watsup:200.1-200.54
def $resolve_cstrs(map<tid, typcstr>) : map<tid, typ> =

   ;; ../../../../spec/4h-typing-call.watsup:317.1-317.40
   clause 0(set<pair<tid, typcstr>>) = `{%}`_set<pair<tid, typ>>([])
      -- if (set<pair<tid, typcstr>> = `{%}`_set<pair<tid, typcstr>>([]))

   ;; ../../../../spec/4h-typing-call.watsup:319.1-325.78
   clause 1(`{%}`_set<pair<tid, typcstr>>(pair<tid, typcstr>*{pair<tid, typcstr> <- pair<tid, typcstr>*})) = $add_map<tid, typ>(`{%}`_set<pair<tid, typ>>(`%->%`_pair<tid, typ>(tid_t', typ_t')*{tid_t' <- tid_t'*, typ_t' <- typ_t'*}), tid_h, typ_h')
      -- if pair<tid, typcstr>*{pair<tid, typcstr> <- pair<tid, typcstr>*} matches _ :: _
      -- let `%->%`_pair<tid, typcstr>(tid_h, typcstr) :: `%->%`_pair<tid, typcstr>(tid_t, typcstr_t)*{tid_t <- tid_t*, typcstr_t <- typcstr_t*} = pair<tid, typcstr>*{pair<tid, typcstr> <- pair<tid, typcstr>*}
      -- if typcstr matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_h) = typcstr
      -- let typ = typ_h
      -- if typ <: synthtyp
      -- let synthtyp = typ as synthtyp
      -- if synthtyp matches `SeqT%`
      -- let `SeqT%`_synthtyp(typ_inner*{typ_inner <- typ_inner*}) = synthtyp
      -- (let tparamIL = $gen_tparam(typ_inner))*{tparamIL <- tparamIL*, typ_inner <- typ_inner*}
      -- (let typ_inner' = `VarT%`_abstyp(tparamIL) as typ)*{tparamIL <- tparamIL*, typ_inner' <- typ_inner'*}
      -- let typ_h' = `SpecT%%`_abstyp(`PolyD%->%`_polytypdef((tparamIL*{tparamIL <- tparamIL*}, []), `TupleT%`_datatyp(typ_inner*{typ_inner <- typ_inner*}) as typ), typ_inner'*{typ_inner' <- typ_inner'*}) as typ
      -- let `{%}`_set<pair<tid, typ>>(`%->%`_pair<tid, typ>(tid_t', typ_t')*{tid_t' <- tid_t'*, typ_t' <- typ_t'*}) = $resolve_cstrs(`{%}`_set<pair<tid, typcstr>>(`%->%`_pair<tid, typcstr>(tid_t, typcstr_t)*{tid_t <- tid_t*, typcstr_t <- typcstr_t*}))

   ;; ../../../../spec/4h-typing-call.watsup:327.1-330.78
   clause 2(`{%}`_set<pair<tid, typcstr>>(pair<tid, typcstr>*{pair<tid, typcstr> <- pair<tid, typcstr>*})) = $add_map<tid, typ>(`{%}`_set<pair<tid, typ>>(`%->%`_pair<tid, typ>(tid_t', typ_t')*{tid_t' <- tid_t'*, typ_t' <- typ_t'*}), tid_h, typ_h)
      -- if pair<tid, typcstr>*{pair<tid, typcstr> <- pair<tid, typcstr>*} matches _ :: _
      -- let `%->%`_pair<tid, typcstr>(tid_h, typcstr) :: `%->%`_pair<tid, typcstr>(tid_t, typcstr_t)*{tid_t <- tid_t*, typcstr_t <- typcstr_t*} = pair<tid, typcstr>*{pair<tid, typcstr> <- pair<tid, typcstr>*}
      -- if typcstr matches `KNOWN%`
      -- let `KNOWN%`_typcstr(typ_h) = typcstr
      -- if (typ_h =/= `AnyT`_synthtyp() as typ)
      -- let `{%}`_set<pair<tid, typ>>(`%->%`_pair<tid, typ>(tid_t', typ_t')*{tid_t' <- tid_t'*, typ_t' <- typ_t'*}) = $resolve_cstrs(`{%}`_set<pair<tid, typcstr>>(`%->%`_pair<tid, typcstr>(tid_t, typcstr_t)*{tid_t <- tid_t*, typcstr_t <- typcstr_t*}))

;; ../../../../spec/4h-typing-call.watsup:314.1-314.32
def $gen_tparam(typ) : tparamIL =

   ;; ../../../../spec/4h-typing-call.watsup:315.1-315.36
   clause 0(typ) = $fresh_tid

;; ../../../../spec/4h-typing-call.watsup:334.1-334.56
def $infer_targs(tid*, paramtyp*, typ*) : map<tid, typ> =

   ;; ../../../../spec/4h-typing-call.watsup:337.1-337.44
   clause 0(tid*{tid <- tid*}, pt*{pt <- pt*}, typ*{typ <- typ*}) = `{%}`_set<pair<tid, typ>>([])
      -- if tid*{tid <- tid*} matches []

   ;; ../../../../spec/4h-typing-call.watsup:338.1-339.15
   clause 1(tid*{tid <- tid*}, pt*{pt <- pt*}, typ*{typ <- typ*}) = $infer_targs'(tid*{tid <- tid*}, pt*{pt <- pt*}, typ*{typ <- typ*})
      -- otherwise

;; ../../../../spec/4h-typing-call.watsup:335.1-335.57
def $infer_targs'(tid*, paramtyp*, typ*) : map<tid, typ> =

   ;; ../../../../spec/4h-typing-call.watsup:341.1-343.49
   clause 0(tid*{tid <- tid*}, `%%%%`_paramtyp(id, dir, typ_p, exprIL_deft?{exprIL_deft <- exprIL_deft?})*{dir <- dir*, exprIL_deft? <- exprIL_deft?*, id <- id*, typ_p <- typ_p*}, typ_a*{typ_a <- typ_a*}) = $resolve_cstrs(cstr')
      -- let cstr = $empty_cstr(tid*{tid <- tid*})
      -- let cstr' = $gen_cstrs(cstr, typ_p*{typ_p <- typ_p*}, typ_a*{typ_a <- typ_a*})

;; ../../../../spec/4h-typing-call.watsup:460.1-460.48
def $is_table_apply_in_action_arg(argIL) : bool =

   ;; ../../../../spec/4h-typing-call.watsup:463.1-463.49
   clause 0(argIL) = false
